.\" SPDX-License-Identifier: GFDL-1.1-no-invariants-or-later
.\" groff -P-pa4 -t -me -Tpdf re586.me >re586.pdf
.he 'Notes on the Altos 586 Computer''%'
.+c
.(l C
.b "Notes on the Altos 586 Computer"
.sp  2
Work in progress, Jule 2022
by Lubomir Rintel
.)l
.sp  2
I've recently obtained the system board from the Altos 586 computer.
Unfortunately, it came without documentation, the hard drive or the
controller board.

With the goal of putting the system to some use I've decided to examine
the hardware and firmware, learn how the system is put together and perhaps
eventually substitute the missing parts.

This document contains some notes from my investigation, provided in
hope of being useful to other owners of Altos 586 systems.

.sh 1 "Altos 586 vs. 586T"

There seems to be some documentation available for a related system,
Altos 586T. While there's no service manuals or schematics, there's
a reference manual\**
.(f
\**
.i "586T/986T System Reference Manual" ,
P/N 690-15813-002, April 1985
.)f
that describes many aspects of the computer architecture and firmware
itnerfaces.

The Altos 586 system seems to be largely similar to Altos 586T.
The "T" in the latter system's designation seems to stand for "Tape",
as, unlike the 586, 586T includes a tape drive.

The disk controller board used in 586T seems to be vastly different from
the controller board used in the Altos 586. While the Altos 586 board
is bases on around the 8089 I/O controller and only controls a hard drive,
the 586T board includes a Floppy and Tape controllers and utilizes a
Z80 processor to handle the I/O.

Considering the above, the 586T manual is largely relevant to the 586,
except for when it comes to disk I/O, be it floppy access or hard
drive access.

.bp
.sh 1 "Z80 Peripheral Controller"

As on 586T, the peripheral controller is a Z80 controlling a bunch of serial
interfaces, timers for baud rate generators and a RTC. It's equipped with a
PIO for generating utility signal lines.

On a 586 it also has an extra duty of controlling the floppy drives,
described below.

.sh 2 "Peripherals"

The peripherals are mostly the same as in the 586T machine aside from the
addition of the Floppy Controller and the related circuitry.

Consult the
.i "586T/986T System Reference Manual"
for description of the peripherals common to 586 and 586T.

.sh 2 "I/O Port Map"

.TS
doublebox nospaces allbox tab(|);
lb|lb|lb|lbx
l|l|l|l.
Address         | Name  | Part                          | Description
_
00h             |       |                               | Bus Address Top Bits Latch
20h \[en] 23h   | PIT 0 | Intel 8254                    | Programmable Interval Timer
24h \[en] 24h   | PIT 1 | Intel 8254                    | Programmable Interval Timer
28h \[en] 2Bh   | SIO 0 | Zilog Z8440APS (Z80A SIO/0)   | Serial I/O Controller
2Ch \[en] 2Fh   | SIO 1 | Zilog Z8440APS (Z80A SIO/0)   | Serial I/O Controller
30h \[en] 33h   | SIO 2 | Zilog Z8440APS (Z80A SIO/0)   | Serial I/O Controller
34h \[en] 37h   | PIO   | Zilog Z8420APS (Z80A PIO)     | Parallel I/O Controller
38h \[en] 3Bh   | FDC   | Western Digital FDC1797       | Floppy Disk Controller/Formatter
3Ch             | DMA   | Zilog Z8410APS (Z80A DMA)     | Direct Memory Access Controller
40h             |       |                               | DMA Carrier/Parity
80h \[en] 9Fh   | RTC   | MM58167AN                     | Microprocessor Real Time Clock
.TE

.sh 2 "Floppy Disk Controller/Formatter"

The floppy disk controller is the FDC1797 part hooked on in a
straightforward manner. The output control signals are interfaced to a
standard Shuggart floppy connector via open-collector drivers, the input
signals go through a line drivers with external pull up register array.
The read data signal is passed through external data separator
circuitry to generate clock and data from MFM encoded signal.

Some of the FDC lines involved in the Floppy Drive access are connected to
the PIO. In particular, the
.i #DDEN
pin needs to be set low in order to read double-density (MFM) disks, which is
almost certainly the case.  The 
.i INTRQ
pin is connected to PIO's
.i PA7
input pin. No idea if it's actually used.

To actually access the floppy drive, the appropriate
.i "Drive Select"
signal needs to be pulled low. For reading double-sided floppies, the drive
head/side is selected by the
.i "Side Select"
signal. The
.i "Drive Select"
and
.i "Side Select"
signals are also both controlled by the PIO.

For the details about the control lines consult the paragraph on
the Parallel I/O Controller below.

.bp
.sh 2 "Parallel I/O Controller"

For the most part, the pins I've traced out are related to the floppy
circuitry. Others are unknown.

.TS
doublebox nospaces allbox tab(|);
lb|lb|lb|lbx
l|l|l|l.
#  | Pin | Direction | Description
_
15 | PA0 |           |
14 | PA1 |           |
13 | PA2 |           |
12 | PA3 |           |
10 | PA4 |           |
 9 | PA5 |           |
 8 | PA6 |           |
 7 | PA7 | Input     | FDC INTRQ (Pin 39)
27 | PB0 | Output    | "586 sync" sub-board (Pin 7)
28 | PB1 | Output    | "586 sync" sub-board (Pin 8)
29 | PB2 | Input     | Goes into unpopulated connector next to FDD (Pin 10)
30 | PB3 | Output    | Floppy Drive Select 0
31 | PB4 | Output    | Floppy Drive Select 1
32 | PB5 | Output    | Floppy Side Select
33 | PB6 | Output    | FDC #DDEN (Pin 37)
34 | PB7 | Input     | PIT ? OUT2 (Pin 17)
.TE

.bp
.sh 1 "Floppy Interface"

.sh 2 "Geometry and Format"

The Altos 586 computer uses 5\[14]" diskettes in a drive with following
parameters:

.TS
doublebox nospaces allbox tab(|);
lb|l.
Data density | Double Density
Encoding     | MFM
Speed        | 300 RPM
Bit rate     | 250 kbps
Tracks       | 80
Heads/Sides  | 2
.TE

The floppies XENIX, CP/M and the firmware use the following format (though the
controller permits other formats).

.TS
doublebox nospaces allbox tab(|);
lb|l.
Sector size       | 512 bytes
Sectors per track | 9
.TE

Note that while this format is fairly unusual for 5\[14]" drives and media,
it's exactly the same as IBM PC 3\[12]" DD (720 KB) disks use. Regular
3\[12]" drives can be used if they're adapted for the Altos 586 floppy
connector pinout (see below).

The regular 1.44 MB floppies can usually be used with DD format, but
the density select window needs to be covered with a piece of opaque tape.

.sh 2 "Floppy Connector Pinout"

The floppy connector is not PC compatible and therefore usual PC floppy drives can't be
used without modifications. It uses straight ribbon cables, not the PC-style ones with a twist.

The pinout (and drive geometry) is fairly close to to what Commodore Amiga computers use.
There seems to be a plenty of tutorials on modifying PC drives for Amiga on the Web.
The same modificaqtions should work for the Altos 586.

.TS
doublebox nospaces allbox tab(|);
lb|cb|s|lb|lb|lbx
c|l|l|l|l|l
^|l|l|l|l|l.
Function | Pin       | Direction | Function          | Note
_
GND      |   1 |   2 | Output    | Motor Enable     |
         |   3 |   4 |           |                  |
         |   5 |   6 |           |                  |
         |   7 |   8 | Input     | Sector Index     |
         |   9 |  10 | Output    | Disk Select 0    |
         |  11 |  12 | Output    | Disk Select 1    |
         |  13 |  14 |           |                  |
         |  15 |  16 | Output    | Motor Enable     | Jumpered with E32
         |  17 |  18 | Output    | Step Direction   |
         |  19 |  20 | Output    | Step Pulse       |
         |  21 |  22 | Output    | Write Data       |
         |  23 |  24 | Output    | Write Gate       |
         |  25 |  26 | Input     | Track 0          |
         |  27 |  28 | Input     | Write Protect    |
         |  29 |  30 | Input     | Read Data        |
         |  31 |  32 | Output    | Side/Head Select | Jumpered by E1, closed for double-sided drive
         |  33 |  34 | Input     | Drive Ready      |
.TE


.bp
.sh 1 "Firmware Interface"

The firmware interface is unsurprisingly very similar to 586T. A notable
difference is addition of the Floppy Channel, described below.

The 
.i "586T/986T System Reference Manual"
is not too clear about the
offset of various register blocks though they can be for the most
part inferred from their respective lengths, since they immediately
follow each other.

The layout of register blocks on the 586 is somewhat different
due to the inclusion of the
.i "Floppy Drive Interface Registers"
block before the
.i "Time of Day Registers". The following table contains the
offsets of each block. It is incidentally also the offset of
each command register the firmware looks at, since each
block starts with a command register.

.TS
doublebox nospaces allbox tab(|);
lb|lbx
l|l.
Offset | Description
0Ah    | Communication Channel Registers (Port 1)
20h    | Communication Channel Registers (Port 2)
36h    | Communication Channel Registers (Port 3)
4Ch    | Communication Channel Registers (Port 4)
62h    | Communication Channel Registers (Port 5)
78h    | Communication Channel Registers (Port 6)
8Ah    | Floppy Drive Interface Registers
D4h    | Time of Day Registers
.TE

The
.i "Communication Channel Registers"
and
.i "Time of Day Registers"
are described in the
.i "586T/986T System Reference Manual" , on pages A-7 and A-12
respectively. The rest of this section deals with the
Floppy interface exclusively.

.sh 2 "Floppy Drive Interface Registers"

This structure is present at offset 8Ah from the command control
block (CCB). Not all members are used by all commands.

.TS
doublebox nospaces allbox tab(|);
lb|lb|lb|lbx
l|l|l|l.
Offset          | Size          | Description                   | Typical Value
_
+00h            | BYTE          | Command                       | 87h, 88h, .\~.\~.
+01h            | BYTE          | Status                        | 00h, 48h, 40h, C0h, .\~.\~.
+02h \[en] +04h | BYTE[3]       | Next Floppy Command Pointer   | T{
Pointer to
.i "Floppy Command Queue"
entry
T}
+05h            | BYTE          | Floppy Command Queue Size     | 02h
+06h            | BYTE          | Last Floppy Command Index     | 01h
+07h            | BYTE          | Next Floppy Command Index     | 00h
+08h            | BYTE          | Unused                        | 00h
+09h            | BYTE          | Unused                        | 00h
+0Ah \[en] +B3h | BYTE[32]      | Floppy 1 Parameters           | T{
.i "Floppy Parameters"
T}
+B4h \[en] +D3h | BYTE[32]      | Floppy 2 Parameters           | T{
.i "Floppy Parameters"
T}
.TE

.sh 2 "Floppy Drive Interface Commands"

There factory software has been seen issuing three different command,
with two of them having known function:

.TS
doublebox nospaces allbox tab(|);
lb|lbx
l|l.
Command | Description
87h     | Set Floppy Drive Parameters
88h     | Submit Floppy Command Queue
8fh     | Unknown
.TE

As with the other command blocks, the most significant bit indicates
to the peripheral controller that there's a new command to process.
Once the processing is finished, the peripheral controller sets the
bit to zero.

.sh 3 "Set Floppy Drive Parameters"

The
.i "Set Floppy Drive Parameters"
command reads the
.i "Floppy Parameters"
structure (see below) and saves it in the controller's SRAM.
The other registers in the block are ignored.
This command needs to be called to set the sector size before any
Floppy I/O.

Failure to set the sector size up will cause the read
commands to overflow a data buffer, corrupting the controller SRAM.
The main processor firmware calls this command on startup.

.sh 3 "Submit Floppy Command Queue"

The
.i "Submit Floppy Command Queue"
command submits the
.i "Floppy Command Queue"
for processing. Said queue is in fact a ring buffer whose entries
are the addresses of 
.i "Floppy Disk Interface Parameter Block"
structures (described below).

Upon submission, the processing starts with the entry on address in
.i "Next Floppy Command Pointer". When the I/O processor handles
an entry, it increments the next entry index, wrapping it around
the queue size if necessary. The processing finishes once the next
entry index is equal to the last entry index.

Note that the I/O processor modifies the
.i "Next Floppy Command Index" register
when it finishes handlin an entry, but keeps the value in
.i "Next Floppy Command Pointer"
unchanged, while still using it to calculate the address of
the next entry to process. When you submit another batch of commands When you submit another batch of commands
you need to adjust it accordingly.

This command doesn't use the
.i "Floppy Parameters"
in the register block, though it requires that the parameters are
set by the
.i "Set Floppy Drive Parameters"
previously.

.bp
.sh 2 "Floppy Parameters"

Used to issue I/O commands, not used by
.I "Set Parameters"
command.

.TS
doublebox nospaces allbox tab(|);
lb|lb|lb|lbx
l|l|l|l.
Offset                  | Size           | Description           | Typical Value
_
+00h                    | WORD           | Unknown               | 0200h
+02h                    | WORD           | Sector size           | 0200h
+04h                    | BYTE           | Unknown               | 06h
+05h \[en] +1fh         | BYTE[.\~.\~.]  | Unknown/Filler (00h)  | 00h .\~.\~.
.TE

.sh 2 "Floppy Command Queue"

.TS
doublebox nospaces allbox tab(|);
lb|lb|lb|lbx
l|l|l|l
l|l|l|l
c|s|s|s
l|l|l|l.
Offset                  | Size          | Description                  | Typical Value
_
+00h                    | DWORD         | Floppy Command Block Address | T{
Pointer to
.i "Floppy Command Block"
T}
+04h                    | DWORD         | Floppy Command Block Address | T{
Pointer to
.i "Floppy Command Block"
T}
\.\~.\~.
+04h * n                | DWORD         | Floppy Command Block Address | T{
Pointer to
.i "Floppy Command Block"
T}
.TE

.sh 2 "Floppy Disk Interface Parameter Block"

.TS
doublebox nospaces allbox tab(|);
lb|lb|lb|lbx
l|l|l|l
^|l|l|^
l|l|l|l.
Offset                   | Size          | Description           | Typical Value
_
+00h                     | High 4 bits   | Command               | 10h, 20h, 1Ah, 2Ah, .\~.\~.
                         | Low 4 bits    | Retries               |
+01h                     | BYTE          | Status                |
+02h                     | BYTE          | Drive Number          | 00h
+03h                     | BYTE          | Track                 | 00h \[en] 28h
+04h                     | BYTE          | Head                  | 00h, 01h
+05h                     | BYTE          | Sector                | 01h \[en] 09h
+06h \[en] +09h          | BYTE[3]       | Data Buffer Address   |
.TE

.bp
.sh 1 "Reading a Floppy from the Firmware ROM Monitor"

This section provides a concrete example of using the Floppy Interface
of the peripheral controller.

.ft CW
FAILED POWER-UP TEST B	\f[I]Controller board error. I got no board.\f[]
.br
Monitor Version a2.2
.br
Enter [1] to boot from Hard Disk
.br
Enter [2] to boot from Floppy Disk
.br
Enter [3] to enter Monitor
.br
.br
Enter option: \f[CB]3\f[]
.ft R

First let's find the Channel Control Block address (CCB).
Read it from 1FFFCh:

.ft CW
< A, B, D, G, I, K, L, M, O, R, S, X > \f[CB]D 1000:FFFC 4\f[]
.br
  1000:FFFC                             16040000   *................*
.ft R

It's 416h. The channel register offsets are calculated from this address.
The new command register is at offset 05h from the beginning of the CCB,
therefore at address 41Bh.

Now let's prepare a small program that just bumps the command counter so that
the controller firmware will know it needs to check for new commands.
It then invokes
.I "Interrupt 3"
to return to the monitor. We'll place it at address 2000h, which is an
arbitrarily chosen address in the DRAM.

It's not strictly necessary here, since each key press results in a serial
command and the command registers are checked anyway, but would be necessary
for floppy communication outside the monitor.

.ft CW
< A, B, D, G, I, K, L, M, O, R, S, X > \f[CB]A 0:2000\f[]
.br
  0000:2000  00-\f[CB]fe\f[]		\f[I]incb 0x41b\f[]
.br
  0000:2001  00-\f[CB]06\f[]
.br
  0000:2002  00-\f[CB]1b\f[]
.br
  0000:2003  00-\f[CB]04\f[]
.br
  0000:2004  00-\f[CB]cc\f[]		\f[I]int 3\f[]
.br
  0000:2005  00-\f[CB],\f[]
.br
.ft R

We can proceed setting the floppy parameters. This is also not strictly
necessary if we're using the ROM monitor, because the firmware must have
initialized the parameters for us.

Let's do it anyway though, for demonstration purposes. It might also be useful
if the floppy format uses a sector of size other than 512 bytes.

The floppy command register is at offset 8Ah from the beginning of the CCB,
therefore at address 4A0h.

For reasons explained below, we start setting the bytes from 4A1h and set the
command byte (4A0h) last.

.ft CW
< A, B, D, G, I, K, L, M, O, R, S, X > \f[CB]A 0:04A1\f[]
.br
  0000:04A1  00-\f[CB]00\f[]		\f[I]Status bit, doesn't matter\f[]
.br
  0000:04A2  60-\f[CB]60\f[]		\f[I]Buffer pointer, not used\f[]
.br
  0000:04A3  09-\f[CB]09\f[]
.br
  0000:04A4  00-\f[CB]00\f[]
.br
  0000:04A5  02-\f[CB]02\f[]
.br
  0000:04A6  00-\f[CB]00\f[]		\f[I]Pointer counter, not used\f[]
.br
  0000:04A7  00-\f[CB]00\f[]
.br
  0000:04A8  00-\f[CB]00\f[]		\f[I]Unknown\f[]
.br
  0000:04A9  00-\f[CB]00\f[]
.br
  0000:04AA  00-\f[CB]00\f[]		\f[I]Floppy 1 parameters\f[]
.br
  0000:04AB  02-\f[CB]02\f[]
.br
  0000:04AC  00-\f[CB]00\f[]
.br
  0000:04AD  02-\f[CB]02\f[]
.br
  0000:04AE  06-\f[CB]06\f[]
.br
  0000:04AF  00-\f[CB]00\f[]
.br
	\f[R].\~.\~.\f[]
.br
  0000:04C9  00-\f[CB]00\f[]
.br
	\f[R].\~.\~.\f[]
.br
  0000:04CA  00-\f[CB]00\f[]		\f[I]Floppy 2 parameters\f[]
.br
  0000:04CB  02-\f[CB]02\f[]
.br
  0000:04CC  00-\f[CB]00\f[]
.br
  0000:04CD  02-\f[CB]02\f[]
.br
  0000:04CE  06-\f[CB]06\f[]
.br
  0000:04CF  00-\f[CB]00\f[]
.br
...
.br
  0000:04E9  00-\f[CB]00\f[]
.br
  0000:04EA  11-\f[CB],\f[]
.br
< A, B, D, G, I, K, L, M, O, R, S, X > \f[CB]A 0:04A0\f[]
.br
  0000:04A0  00-\f[CB]87\f[]		\f[I]The "Floppy Parameters" command byte\f[]
.br
  0000:04A1  00-\f[CB],\f[]
.ft R

We set the command byte last to make sure the controller firmware
doesn't see a valid command until the parameters are all set.

Now we can bump the command counter with the program we entered in at
the beginning (though, as stated above, this is not really necessary):

.ft CW
< A, B, D, G, I, K, L, M, O, R, S, X > \f[CB]G 0:2000\f[]
.br
Break ....
.br
CS:IP FC00:0000  Flags  - - - - S - - - - 
.br
  AX    BX    CX    DX    SI    DI    DS    ES    SS    SP    BP    
.br
  0000  0000  0000  0000  0000  0000  0000  0000  0000  0FFC  0000  
.ft R

Let's enter some actual floppy I/O requests now.

Start with a seek:

.ft CW
< A, B, D, G, I, K, L, M, O, R, S, X > \f[CB]A 0:2100\f[]
.br
  0000:2100  00-\f[CB]10\f[]		\f[I]Seek command\f[]
.br
  0000:2101  00-\f[CB]00\f[]		\f[I]Status\f[]
.br
  0000:2102  00-\f[CB]00\f[]		\f[I]Unknown, 00h\f[]
.br
  0000:2103  00-\f[CB]05\f[]		\f[I]Track\f[]
.br
  0000:2104  00-\f[CB]01\f[]		\f[I]Head\f[]
.br
  0000:2105  00-\f[CB]05\f[]		\f[I]Sector\f[]
.br
  0000:2106  00-\f[CB],\f[]
.ft R

Seek to a different track, so that we're sure we see the head move:

.ft CW
< A, B, D, G, I, K, L, M, O, R, S, X > \f[CB]A 0:2200\f[]
.br
  0000:2200  00-\f[CB]10\f[]		\f[I]Seek command\f[]
.br
  0000:2201  00-\f[CB]00\f[]		\f[I]Status\f[]
.br
  0000:2202  00-\f[CB]00\f[]		\f[I]Unknown, 00h\f[]
.br
  0000:2203  00-\f[CB]25\f[]		\f[I]Track\f[]
.br
  0000:2204  00-\f[CB]01\f[]		\f[I]Head\f[]
.br
  0000:2205  00-\f[CB]05\f[]		\f[I]Sector\f[]
.br
  0000:2206  00-\f[CB],\f[]
.ft R

And then read a sector. The controller will seek back to the appropriate track:

.ft CW
< A, B, D, G, I, K, L, M, O, R, S, X > \f[CB]A 0:2300\f[]
.br
  0000:2300  00-\f[CB]10\f[]		\f[I]Read command\f[]
.br
  0000:2301  00-\f[CB]00\f[]		\f[I]Status\f[]
.br
  0000:2302  00-\f[CB]00\f[]		\f[I]Unknown, 00h\f[]
.br
  0000:2303  00-\f[CB]05\f[]		\f[I]Track\f[]
.br
  0000:2304  00-\f[CB]01\f[]		\f[I]Head\f[]
.br
  0000:2305  00-\f[CB]05\f[]		\f[I]Sector\f[]
.br
  0000:2306  00-\f[CB]00\f[]		\f[I]Destination buffer address: 00002500h\f[]
.br
  0000:2307  00-\f[CB]25\f[]
.br
  0000:2308  00-\f[CB]00\f[]
.br
  0000:2309  00-\f[CB]00\f[]
.br
  0000:230A  00-\f[CB],\f[]
.ft R

Create a queue with the three commands we created above:

.ft CW
< A, B, D, G, I, K, L, M, O, R, S, X > \f[CB]A 0:2400\f[]
.br
  0000:2400  00-\f[CB]00\f[]		\f[I]First command at 00002100h\f[]
.br
  0000:2401  00-\f[CB]21\f[]		\f[I](See above: seek to track 5)\f[]
.br
  0000:2402  00-\f[CB]00\f[]
.br
  0000:2403  00-\f[CB]00\f[]
.br
  0000:2404  00-\f[CB]00\f[]		\f[I]First command at 00002200h\f[]
.br
  0000:2405  00-\f[CB]22\f[]		\f[I](See above: seek to track 25h)\f[]
.br
  0000:2406  00-\f[CB]00\f[]
.br
  0000:2407  00-\f[CB]00\f[]
.br
  0000:2408  00-\f[CB]00\f[]		\f[I]First command at 00002300h\f[]
.br
  0000:2409  00-\f[CB]23\f[]		\f[I](See above: read from CHS 5/1/5 to 2500h)\f[]
.br
  0000:240A  00-\f[CB]00\f[]
.br
  0000:240B  00-\f[CB]00\f[]
.br
  0000:240C  00-\f[CB],\f[]
.ft R

Now invoke the queue the same way as we set the parameters:

.ft CW
< A, B, D, G, I, K, L, M, O, R, S, X > \f[CB]A 0:04A1\f[]
.br
  0000:04A1  00-\f[CB]ff\f[]		\f[I]Status\f[]
.br
  0000:04A2  60-\f[CB]00\f[]		\f[I]The queue is at 00002400h\f[]
.br
  0000:04A3  09-\f[CB]24\f[]
.br
  0000:04A4  00-\f[CB]00\f[]
.br
  0000:04A5  02-\f[CB]04\f[]		\f[I]Queue Length\f[]
.br
  0000:04A6  00-\f[CB]03\f[]		\f[I]Last valid command is 03h commands in the queue\f[]
.br
  0000:04A7  00-\f[CB]00\f[]		\f[I]Start with the command 00h\f[]
.br
  0000:04A8  00-\f[CB]00\f[]
.br
  0000:04A9  00-\f[CB]00\f[]
.br
  0000:04AA  00-\f[CB],\f[]
.br
< A, B, D, G, I, K, L, M, O, R, S, X > \f[CB]A 0:04A0\f[]
.br
  0000:04A0  00-\f[CB]c8\f[]		\f[I]Now set the command byte\f[]
.br
  0000:04A1  48-\f[CB],\f[]			\f[I]to process the queue\f[]
.br
< A, B, D, G, I, K, L, M, O, R, S, X > \f[CB]G 0:2000\f[]
.br
Break ....
.br
CS:IP FC00:0008  Flags  - - - - S - A - - 
.br
  AX    BX    CX    DX    SI    DI    DS    ES    SS    SP    BP    
.br
  0000  0000  0000  0000  0000  0000  0000  0000  0000  0FF8  0000  
.ft R

The command is in. Let's keep checking the status byte until it indicates
success:

.ft CW
< A, B, D, G, I, K, L, M, O, R, S, X > \f[CB]D 0:04A1 1\f[]
.br
  0000:04A1    48                                  *.H.$............*
.ft R

The status is now 48h. We need it to be 40h. Try some more:

.br
.ft CW
< A, B, D, G, I, K, L, M, O, R, S, X > \f[CB]D 0:04A1 1\f[]
.br
  0000:04A1    40                                  *.@.$............*
.ft R

Now the status is 40h, which indicates no error.

The sector data is now at 2500h, let's check it out:

.ft CW
< A, B, D, G, I, K, L, M, O, R, S, X > \f[CB]D 0:2500 200\f[]
.br
  0000:2500  EB080000 30000000 0002CCEB FD000000   *k...0.....Lk}...*
.br
	\f[R].\~.\~.\f[]
.br
  0000:26F0  00000000 00000000 00000000 00000000   *................*
.br
< A, B, D, G, I, K, L, M, O, R, S, X >
.br
.ft R

.bp
.sh 2 "Z80 ROM Monitor"

The factory firmware seems to include a ROM Monitor software.
Having a firmware monitor is very helpful for investigation of
the system. It would allow controlling the Z80 peripherals
directly and operating them without the main 8086 processor.

Unfortunately, I didn't discover a way to enter the factory
ROM monitor. I've ended up temporarily replacing the ROM
with a different one, allowing me to poke around the controller.
That way I've lost the way of utilizing the factory firmware
on the main processor, which would just end up being stuck
in a tight loop.

.bp
.sh 1 "Hard Drive Controller Board"

I don't own this board and know little more about the board
than could be observed from firmware disassembly.

This hard drive controller is based on the Intel 8089 I/O processor.
The 8089 processor is connected to on-board logic and sector buffer
SRAM via a private bus, allowing them to be accessed without
congesting the system bus. It is also connected to the main memory
via the system bus, allowing for efficient DMA transfers of the
sector data.

The 8089 is controlled with specialized programs placed in the main
memory and synchronized with the main CPU with interrupts.

The firmware includes one such program to handle the disk reads
and writes. It is parametrized by I/O parameter blocks
(IOPB) placed in the main memory. It is described in detail in
section below.

.sh 2 "IOPB Handling Program"

This program is provided in the firmware image and run on the 8089
on the hard drive board to service the I/O operations.

It is controlled by the I/O parameter block structure to ultimately
transfer data between a main memory buffer and the hard drive.
The data is not transferred directly between the controller's data
port and the main memory. Instead, the data is bounced through a 
a buffer in controller board's SRAM.

This utilizes the main memory bus more efficiently.
The controller data port transfers eight bits of data at a time at
a rate determined by the disk rotation speed. These slow accesses
are done over a bus that's private to the controller board, avoiding
congestion of the main bus. On the other hand, the SRAMs allows
16-bit accesses at a much faster rate, utilizing the main memory
as little as possible.

On reads, the data is first transferred from the data port to
the SRAM buffer and then from SRAM to the main memory. On writes,
the data is copied from main memory to SRAM buffer and then from
SRAM to the data port.

The number of sectors specified in IOPB determines how many transfers
are done between the data port and the SRAM. The number of bytes
transferred between SRAM and main memory is specified in IOPB directly.
These two numbers are related -- main memory transfer needs to
transfer sufficient number of bytes to include complete sector data.

The commented I/O program follows:

.ft CW
\f[I]; Program parameters, passed by the user\f[]
.br
\f[CB]IOPB_OP\f[]         EQU 04H
.br
\f[CB]IOPB_STATUS\f[]     EQU 05H
.br
\f[CB]IOPB_CYL\f[]        EQU 06H
.br
\f[CB]IOPB_DRV_HD\f[]     EQU 08H
.br
\f[CB]IOPB_SEC\f[]        EQU 09H \f[I]; Starting sector\f[]
.br
\f[CB]IOPB_BYTE_CNT\f[]   EQU 0AH \f[I]; The DMA buffer size\f[]
.br
\f[CB]IOPB_DMA_BUF\f[]    EQU 0CH \f[I]; The DMA buffer address\f[]
.br
\f[CB]IOPB_SEC_CNT\f[]    EQU 10H \f[I]; Number of sectors\f[]
.br

.br
\f[I]; These are reserved to be used by the IOP\f[]
.br
\f[CB]IOPB_IO_SIZE\f[]    EQU 12H \f[I]; Written by the IOP\f[]
.br
\f[CB]IOPB_LAST_CYL\f[]   EQU 14H \f[I]; Last cylinder we've seeked to\f[]
.br
\f[CB]IOPB_LINK_REG\f[]   EQU 16H \f[I]; Return address of subroutine calls\f[]
.br

.br
\f[I]; Bits of IOPB_OP\f[]
.br
\f[CB]OP_BIT_RD\f[]       EQU 0   \f[I]; Read (0) or write (1)\f[]
.br
\f[CB]OP_BIT_UNK\f[]      EQU 2
.br
\f[CB]OP_BIT_ECC\f[]      EQU 3   \f[I]; Include the ECC bits on read\f[]
.br
\f[CB]OP_BIT_SEL\f[]      EQU 5   \f[I]; Drive/Head has changed\f[]
.br
\f[CB]OP_CMD_BITS\f[]     EQU 0FH
.br

.br
\f[I]; Bits of IOPB_STATUS\f[]
.br
\f[CB]STATUS_BIT_ERR\f[]  EQU 7
.br

.br
\f[I]; These are addresses in 8089's I/O space\f[]
.br
\f[CB]HDD_SRAM_ADDR\f[]   EQU 00000H
.br
\f[CB]HDD_REGS_ADDR\f[]   EQU 0FFD0H
.br

.br
\f[I]; Registers at HDD_REGS_ADDR\f[]
.br
\f[CB]PORT_DATA\f[]       EQU 00H
.br
\f[CB]PORT_DRV_HD\f[]     EQU 02H
.br
\f[CB]PORT_04H\f[]        EQU 04H
.br
\f[CB]PORT_CMD_STAT\f[]   EQU 06H
.br

.br
\f[CB]ENTRY\f[]:
.br
        movi  gc,\f[CB]HDD_REGS_ADDR\f[]
.br

.br
        \f[I]; Is bit 5 set?\f[]
.br
        jnbt  [pp].\f[CB]IOPB_OP\f[],\f[CB]OP_BIT_SEL\f[],\f[CB]NO_SEL\f[]
.br

.br
        \f[I]; If bit 5 is set, then drive and head might have\f[]
.br
        \f[I]; CHanged and we need ensure correct head is selected.\f[]
.br
        movbi [gc].\f[CB]PORT_CMD_STAT\f[],80H
.br
        movb  [gc].\f[CB]PORT_DRV_HD\f[],[pp].\f[CB]IOPB_DRV_HD\f[]
.br
\f[CB]B0\f[]:     jnbt  [gc].\f[CB]PORT_CMD_STAT\f[],7,B0
.br

.br
        movbi [gc].\f[CB]PORT_CMD_STAT\f[],20H
.br
        movi  [pp].\f[CB]IOPB_LAST_CYL\f[],0
.br
\f[CB]C0\f[]:     jbt   [gc].\f[CB]PORT_CMD_STAT\f[],0,C0
.br

.br
        ljnbt [gc].\f[CB]PORT_04H\f[],0,\f[CB]RETURN_81H\f[]        \f[I]; Error?\f[]
.br

.br
\f[CB]NO_SEL\f[]:
.br
        andbi [pp].\f[CB]IOPB_OP\f[],\f[CB]OP_CMD_BITS\f[]  \f[I]; Command bits mask\f[]
.br
        ljzb  [pp].\f[CB]IOPB_OP\f[],\f[CB]RETURN_00H\f[]   \f[I]; Command is zero\f[]
.br

.br
        \f[I]; Select head\f[]
.br
        movb  [gc].\f[CB]PORT_DRV_HD\f[],[pp].\f[CB]IOPB_DRV_HD\f[]
.br
\f[CB]B1\f[]:     jnbt  [gc].\f[CB]PORT_CMD_STAT\f[],7,B1
.br

.br
        \f[I]; Seek to cylinder\f[]
.br
        movb  [gc].\f[CB]PORT_DATA\f[],[pp].\f[CB]IOPB_LAST_CYL\f[]
.br
        movb  [gc].\f[CB]PORT_DATA\f[],[pp].\f[CB]IOPB_LAST_CYL\f[]+1
.br
        movb  [gc].\f[CB]PORT_04H\f[],[pp].\f[CB]IOPB_CYL\f[]
.br
        movb  [gc].\f[CB]PORT_04H\f[],[pp].\f[CB]IOPB_CYL\f[]+1
.br
        movbi [gc].\f[CB]PORT_CMD_STAT\f[],10H
.br
        mov   [pp].\f[CB]IOPB_LAST_CYL\f[],[pp].\f[CB]IOPB_CYL\f[]
.br
\f[CB]C1\f[]:     jbt   [gc].\f[CB]PORT_CMD_STAT\f[],0,C1
.br
\f[CB]D0\f[]:     jnbt  [gc].\f[CB]PORT_04H\f[],1,D0
.br

.br
        \f[I]; Zero sectors? Tothing to do.\f[]
.br
        jzb   [pp].\f[CB]IOPB_SEC_CNT\f[],\f[CB]RETURN_00H\f[]
.br

.br
        \f[I]; A read?\f[]
.br
        jbt   [pp].\f[CB]IOPB_OP\f[],\f[CB]OP_BIT_RD\f[],\f[CB]HDD_SRAM_XFER\f[]
.br

.br
        \f[I]; Whis is a write. Transfer the data from main memory\f[]
.br
        \f[I]; DMA buffer to controller board SRAM first\f[]
.br
        lpd   ga,[pp].\f[CB]IOPB_DMA_BUF\f[]
.br
        movi  gb,\f[CB]PORT_DATA\f[]
.br
        mov   bc,[pp].\f[CB]IOPB_BYTE_CNT\f[]
.br
        call  [pp].\f[CB]IOPB_LINK_REG\f[],\f[CB]MEM_SRAM_XFER\f[]
.br

.br
\f[CB]HDD_SRAM_XFER\f[]:
.br
        \f[I]; Setup for for a transfer between SRAM and the HDD's\f[]
.br
        \f[I]; data register, common to read and write\f[]
.br
        movi  gb,\f[CB]HDD_SRAM_ADDR\f[]
.br
        movi  mc,0FE80H \f[I]; Why?\f[]
.br
        movi  ga,\f[CB]HDD_REGS_ADDR\f[]+\f[CB]PORT_DATA\f[]
.br
        movi  [pp].\f[CB]IOPB_IO_SIZE\f[],512
.br

.br
        \f[I]; A read or write?\f[]
.br
        jnbt  [pp].\f[CB]IOPB_OP\f[],\f[CB]OP_BIT_RD\f[],\f[CB]XFER_WR\f[]
.br

.br
        \f[I]; A read. Setup for transfer from HDD from SRAM.\f[]
.br
        movi  cc,8A28H
.br
        wid   8,16
.br

.br
        \f[I]; Go do the transfer if we don't want ECC\f[]
.br
        jnbt  [pp].\f[CB]IOPB_OP\f[],\f[CB]OP_BIT_ECC\f[],\f[CB]XFER_SEC\f[]
.br

.br
        \f[I]; We want ECC. Bump the transfer size.\f[]
.br
        movi  [pp].\f[CB]IOPB_IO_SIZE\f[],512+5
.br
        jmp   \f[CB]XFER_SEC\f[]
.br

.br
\f[CB]XFER_WR\f[]:
.br
        \f[I]; A write. Setup for transfer from SRAM to HDD.\f[]
.br
        movi  cc,5628H
.br
        wid   16,8
.br
        jnbt  [pp].\f[CB]IOPB_OP\f[],\f[CB]OP_BIT_UNK\f[],\f[CB]XFER_SEC\f[]
.br
        movi  [pp].\f[CB]IOPB_IO_SIZE\f[],4 \f[I]; No idea what this is.\f[]
.br

.br
\f[CB]XFER_SEC\f[]:
.br
        \f[I]; Transfer one sector\f[]
.br
        mov   bc,[pp].\f[CB]IOPB_IO_SIZE\f[]
.br
        movb  [gc].\f[CB]PORT_DATA\f[],[pp].\f[CB]IOPB_SEC\f[]
.br
        xfer
.br

.br
        \f[I]; Check for errors\f[]
.br
        movb  [gc].\f[CB]PORT_CMD_STAT\f[],[pp].\f[CB]IOPB_OP\f[]
.br
        jmcne [gc].\f[CB]PORT_CMD_STAT\f[],\f[CB]RETURN_ERR\f[]
.br

.br
        \f[I]; Are we done or there's more?\f[]
.br
        decb  [pp].\f[CB]IOPB_SEC_CNT\f[]
.br
        jzb   [pp].\f[CB]IOPB_SEC_CNT\f[],\f[CB]HDD_SRAM_XFER_DONE\f[]
.br

.br
        \f[I]; There's more.\f[]
.br
        incb  [pp].\f[CB]IOPB_SEC\f[]
.br
        jmp   \f[CB]XFER_SEC\f[]
.br

.br

.br
\f[CB]HDD_SRAM_XFER_DONE\f[]:
.br
        \f[I]; Transfer between HDD and SRAM has finished.\f[]
.br
        \f[I]; Was it a write? Then we're all done.\f[]
.br
        jnbt  [pp].\f[CB]IOPB_OP\f[],\f[CB]OP_BIT_RD\f[],\f[CB]RETURN_00H\f[]
.br

.br
        \f[I]; This was a read. We need to transfer from SRAM\f[]
.br
        \f[I]; to the main memory DMA buffer.\f[]
.br
        lpd   gb,[pp].\f[CB]IOPB_DMA_BUF\f[]
.br
        movi  ga,\f[CB]PORT_DATA\f[]
.br
        mov   bc,[pp].\f[CB]IOPB_BYTE_CNT\f[]
.br
        call  [pp].\f[CB]IOPB_LINK_REG\f[],\f[CB]MEM_SRAM_XFER\f[]
.br

.br
\f[CB]RETURN_00H\f[]:
.br
        \f[I]; Successful return.\f[]
.br
        movbi [pp].\f[CB]IOPB_STATUS\f[],0
.br
        jmp   \f[CB]DONE\f[]
.br

.br
\f[CB]MEM_SRAM_XFER\f[]:
.br
        \f[I]; A subroutine that does a memory-to memory transfer.\f[]
.br
        \f[I]; Used to copy data between the controller SRAM and\f[]
.br
        \f[I]; the DMA buffer in main memory, in either direction.\f[]
.br
        wid   16,16
.br
        movi  cc,0C208H
.br
        xfer
.br
        nop
.br
        movp  tp,[pp].\f[CB]IOPB_LINK_REG\f[]
.br

.br
\f[CB]RETURN_ERR\f[]:
.br
        \f[I]; Error return. Communicate the error from the status\f[]
.br
        \f[I]; register to the IOPB.\f[]
.br
        movb  [pp].\f[CB]IOPB_STATUS\f[],[gc].\f[CB]PORT_CMD_STAT\f[]
.br
        andbi [pp].\f[CB]IOPB_STATUS\f[],7EH
.br
        setb  [pp].\f[CB]IOPB_STATUS\f[],\f[CB]STATUS_BIT_ERR\f[]
.br
        movbi [gc].\f[CB]PORT_CMD_STAT\f[],00H
.br
        jmp   \f[CB]DONE\f[]
.br

.br
\f[CB]RETURN_81H\f[]:
.br
        \f[I]; Error 1.\f[]
.br
        movi  [pp].\f[CB]IOPB_STATUS\f[],\f[CB]STATUS_BIT_ERR\f[]+1
.br

.br
\f[CB]DONE\f[]:
.br
        sintr
.br
        hlt
.br
.ft R
