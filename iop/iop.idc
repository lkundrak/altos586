//
// ษอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออป
// บ     This file is generated by The Interactive Disassembler (IDA)        บ
// บ                           Freeware version                              บ
// บ     Copyright (c) 2000 by DataRescue sa/nv, http://www.datarescue.com   บ
// ศอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออผ
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - press F2 and enter the name of this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void) {
        GenInfo();              // various settings
        Segments();             // segmentation
        Enums();                // enumerations
        Structures();           // structure types
        Bytes();                // individual bytes (code,data)
        Functions();            // function definitions
        SegRegs();              // segment register values
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        DeleteAll();    // purge database
	SetPrcsr("z80");
	StringStp(0xA);
	Tabs(1);
	Comments(0);
	Voids(0);
	XrefShow(5);
	AutoShow(1);
	Indent(16);
	CmtIndent(40);
	LowVoids(0x0);
	HighVoids(0x2800);
	TailDepth(0x10);
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	;
	SegCreate(0,0x2000,0,0,1,5);
	SegRename(0,"ROM");
	SegClass (0,"CODE");
	SetSegmentType(0,2);
	SegCreate(0x2000,0x2800,0,0,1,2);
	SegRename(0x2000,"RAM");
	SegClass (0x2000,"RAM");
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;                // enum id

	id = AddEnum(-1,"PORTS",0x1100000);
	AddConstEx(id,"BUS_ADDRESS_LATCH",	0,	0xffffffff);
	SetConstCmt(GetConst(id,0,0xffffffff),"Address Latch - System memory block number (bits 0 thru 4)",1);
	AddConstEx(id,"PIT0_COUNTER_0",	0x20,	0xffffffff);
	SetConstCmt(GetConst(id,0x20,0xffffffff),"PIT 0 - Counter 0 provides baud rate for port 3",1);
	AddConstEx(id,"PIT0_COUNTER_1",	0x21,	0xffffffff);
	SetConstCmt(GetConst(id,0x21,0xffffffff),"PIT 0 - Counter 1 provides baud rate for port 4",1);
	AddConstEx(id,"PIT0_COUNTER_2",	0x22,	0xffffffff);
	SetConstCmt(GetConst(id,0x22,0xffffffff),"PIT 0 - Counter 2 provides baud rate for port 1",1);
	AddConstEx(id,"PIT0_CONTROL",	0x23,	0xffffffff);
	SetConstCmt(GetConst(id,0x23,0xffffffff),"PIT 0 - Control byte for PIT 0",1);
	AddConstEx(id,"PIT1_COUNTER_0",	0x24,	0xffffffff);
	SetConstCmt(GetConst(id,0x24,0xffffffff),"PIT 1 - Counter 0 provides baud rate for port 2",1);
	AddConstEx(id,"PIT1_COUNTER_1",	0x25,	0xffffffff);
	SetConstCmt(GetConst(id,0x25,0xffffffff),"PIT 1 - Counter 1 provides baud rate for port 5",1);
	AddConstEx(id,"PIT1_COUNTER_2",	0x26,	0xffffffff);
	SetConstCmt(GetConst(id,0x26,0xffffffff),"PIT 1 - Counter 2 timer interrupt",1);
	AddConstEx(id,"PIT1_CONTROL",	0x27,	0xffffffff);
	SetConstCmt(GetConst(id,0x27,0xffffffff),"PIT 1 - Control byte for PIT 1",1);
	AddConstEx(id,"SIO0_CHAN_A_DATA",	0x28,	0xffffffff);
	SetConstCmt(GetConst(id,0x28,0xffffffff),"SIO 0 - Channel A data for serial port 3",1);
	AddConstEx(id,"SIO0_CHAN_A_CONTROL",	0x29,	0xffffffff);
	SetConstCmt(GetConst(id,0x29,0xffffffff),"SIO 0 - Channel A control for serial port 3",1);
	AddConstEx(id,"SIO0_CHAN_B_DATA",	0x2a,	0xffffffff);
	SetConstCmt(GetConst(id,0x2a,0xffffffff),"SIO 0 - Channel B data for serial port 4",1);
	AddConstEx(id,"SIO0_CHAN_B_CONTROL",	0x2b,	0xffffffff);
	SetConstCmt(GetConst(id,0x2b,0xffffffff),"SIO 0 - Channel B control for serial port 4",1);
	AddConstEx(id,"SIO1_CHAN_A_DATA",	0x2c,	0xffffffff);
	SetConstCmt(GetConst(id,0x2c,0xffffffff),"SIO 1 - Channel A data for serial port 1",1);
	AddConstEx(id,"SIO1_CHAN_A_CONTROL",	0x2d,	0xffffffff);
	SetConstCmt(GetConst(id,0x2d,0xffffffff),"SIO 1 - Channel A control for serial port 1",1);
	AddConstEx(id,"SIO1_CHAN_B_DATA",	0x2e,	0xffffffff);
	SetConstCmt(GetConst(id,0x2e,0xffffffff),"SIO 1 - Channel B data for serial port 2",1);
	AddConstEx(id,"SIO1_CHAN_B_CONTROL",	0x2f,	0xffffffff);
	SetConstCmt(GetConst(id,0x2f,0xffffffff),"SIO 1 - Channel B control for serial port 2",1);
	AddConstEx(id,"SIO2_CHAN_A_DATA",	0x30,	0xffffffff);
	SetConstCmt(GetConst(id,0x30,0xffffffff),"SIO 2 - Channel A data for serial port 5",1);
	AddConstEx(id,"SIO2_CHAN_A_CONTROL",	0x31,	0xffffffff);
	SetConstCmt(GetConst(id,0x31,0xffffffff),"SIO 2 - Channel A control for serial port 5",1);
	AddConstEx(id,"SIO2_CHAN_B_DATA",	0x32,	0xffffffff);
	SetConstCmt(GetConst(id,0x32,0xffffffff),"SIO 2 - Channel B data for serial port 6",1);
	AddConstEx(id,"SIO2_CHAN_B_CONTROL",	0x33,	0xffffffff);
	SetConstCmt(GetConst(id,0x33,0xffffffff),"SIO 2 - Channel B control for serial port 6",1);
	AddConstEx(id,"PIO_DATA_A",	0x34,	0xffffffff);
	SetConstCmt(GetConst(id,0x34,0xffffffff),"PIO - Data port A",1);
	AddConstEx(id,"PIO_COMMAND_A",	0x35,	0xffffffff);
	SetConstCmt(GetConst(id,0x35,0xffffffff),"PIO - Command port A",1);
	AddConstEx(id,"PIO_DATA_B",	0x36,	0xffffffff);
	SetConstCmt(GetConst(id,0x36,0xffffffff),"PIO - Data port B",1);
	AddConstEx(id,"PIO_COMMAND_B",	0x37,	0xffffffff);
	SetConstCmt(GetConst(id,0x37,0xffffffff),"PIO - Command port B",1);
	AddConstEx(id,"FDC_CMD_STAT",	0x38,	0xffffffff);
	SetConstCmt(GetConst(id,0x38,0xffffffff),"FDC - Write command, Read status",1);
	AddConstEx(id,"FDC_TRACK",	0x39,	0xffffffff);
	SetConstCmt(GetConst(id,0x39,0xffffffff),"FDC - Track number",1);
	AddConstEx(id,"FDC_SECTOR",	0x3a,	0xffffffff);
	SetConstCmt(GetConst(id,0x3a,0xffffffff),"FDC - Sector number",1);
	AddConstEx(id,"FDC_DATA",	0x3b,	0xffffffff);
	SetConstCmt(GetConst(id,0x3b,0xffffffff),"FDC - Read/Write data",1);
	AddConstEx(id,"DMA_ALL",	0x3c,	0xffffffff);
	SetConstCmt(GetConst(id,0x3c,0xffffffff),"DMA - All read and write registers",1);
	AddConstEx(id,"DMA_CLEAR",	0x40,	0xffffffff);
	SetConstCmt(GetConst(id,0x40,0xffffffff),"DMA - Clear carrier sense and parity error bit",1);
	AddConstEx(id,"RTC_MSEC",	0x80,	0xffffffff);
	SetConstCmt(GetConst(id,0x80,0xffffffff),"RTC - Counter - thousandths of seconds",1);
	AddConstEx(id,"RTC_DCSEC",	0x81,	0xffffffff);
	SetConstCmt(GetConst(id,0x81,0xffffffff),"RTC - Counter - hundredths and tenths of seconds",1);
	AddConstEx(id,"RTC_SECONDS",	0x82,	0xffffffff);
	SetConstCmt(GetConst(id,0x82,0xffffffff),"RTC - Counter - seconds",1);
	AddConstEx(id,"RTC_MINUTES",	0x83,	0xffffffff);
	SetConstCmt(GetConst(id,0x83,0xffffffff),"RTC - Counter - minutes",1);
	AddConstEx(id,"RTC_HOURS",	0x84,	0xffffffff);
	SetConstCmt(GetConst(id,0x84,0xffffffff),"RTC - Counter - hours",1);
	AddConstEx(id,"RTC_DAY_OF_WEEK",	0x85,	0xffffffff);
	SetConstCmt(GetConst(id,0x85,0xffffffff),"RTC - Counter - Day of Week",1);
	AddConstEx(id,"RTC_DAY_OF_MONTH",	0x86,	0xffffffff);
	SetConstCmt(GetConst(id,0x86,0xffffffff),"RTC - Counter - Day of Month",1);
	AddConstEx(id,"RTC_MONTHS",	0x87,	0xffffffff);
	SetConstCmt(GetConst(id,0x87,0xffffffff),"RTC - Counter - Months",1);
	AddConstEx(id,"RTC_LATCH_MSEC",	0x88,	0xffffffff);
	SetConstCmt(GetConst(id,0x88,0xffffffff),"RTC - Latches - Thousandths of seconds",1);
	AddConstEx(id,"RTC_LATCH_DCSEC",	0x89,	0xffffffff);
	SetConstCmt(GetConst(id,0x89,0xffffffff),"RTC - Latches - Hundredths and tenths of seconds",1);
	AddConstEx(id,"RTC_LATCH_SECONDS",	0x8a,	0xffffffff);
	SetConstCmt(GetConst(id,0x8a,0xffffffff),"RTC - Latches - Seconds",1);
	AddConstEx(id,"RTC_LATCH_MINUTES",	0x8b,	0xffffffff);
	SetConstCmt(GetConst(id,0x8b,0xffffffff),"RTC - Latches - Minutes",1);
	AddConstEx(id,"RTC_LATCH_HOURS",	0x8c,	0xffffffff);
	SetConstCmt(GetConst(id,0x8c,0xffffffff),"RTC - Latches - Hours",1);
	AddConstEx(id,"RTC_LATCH_DAY_OF_WEEK",	0x8d,	0xffffffff);
	SetConstCmt(GetConst(id,0x8d,0xffffffff),"RTC - Latches - Day of the Week",1);
	AddConstEx(id,"RTC_LATCH_DAY_OF_MONTH",	0x8e,	0xffffffff);
	SetConstCmt(GetConst(id,0x8e,0xffffffff),"RTC - Latches - Day of the Month",1);
	AddConstEx(id,"RTC_LATCH_MONTHS",	0x8f,	0xffffffff);
	SetConstCmt(GetConst(id,0x8f,0xffffffff),"RTC - Latches - Months",1);
	AddConstEx(id,"RTC_INT_STATUS",	0x90,	0xffffffff);
	SetConstCmt(GetConst(id,0x90,0xffffffff),"RTC - Interrupt Status Register",1);
	AddConstEx(id,"RTC_INT_CONTROL",	0x91,	0xffffffff);
	SetConstCmt(GetConst(id,0x91,0xffffffff),"RTC - Interrupt Control Register",1);
	AddConstEx(id,"RTC_COUNTER_RESET",	0x92,	0xffffffff);
	SetConstCmt(GetConst(id,0x92,0xffffffff),"RTC - Counter Reset",1);
	AddConstEx(id,"RTC_LATCH_RESET",	0x93,	0xffffffff);
	SetConstCmt(GetConst(id,0x93,0xffffffff),"RTC - Latch Reset",1);
	AddConstEx(id,"RTC_STATUS",	0x94,	0xffffffff);
	SetConstCmt(GetConst(id,0x94,0xffffffff),"RTC - Status Bit",1);
	AddConstEx(id,"RTC_GO_CMD",	0x95,	0xffffffff);
	SetConstCmt(GetConst(id,0x95,0xffffffff),"RTC - \"GO\" Command",1);
	AddConstEx(id,"RTC_STANDBY_INT",	0x96,	0xffffffff);
	SetConstCmt(GetConst(id,0x96,0xffffffff),"RTC - Standby Interrupt",1);
	AddConstEx(id,"RTC_TEST",	0x9f,	0xffffffff);
	SetConstCmt(GetConst(id,0x9f,0xffffffff),"RTC - Test Mode",1);
	id = AddEnum(-1,"SYS_REGS",0x1100000);
	AddConstEx(id,"SYS_FW_VER",	0,	0xffffffff);
	SetConstCmt(GetConst(id,0,0xffffffff),"SYS - Firmware Version Register",1);
	AddConstEx(id,"SYS_SYS_CMD",	0x1,	0xffffffff);
	SetConstCmt(GetConst(id,0x1,0xffffffff),"SYS - System Command Register",1);
	AddConstEx(id,"SYS_SYS_STAT",	0x2,	0xffffffff);
	SetConstCmt(GetConst(id,0x2,0xffffffff),"SYS - System Status Register",1);
	AddConstEx(id,"SYS_INT_VEC",	0x3,	0xffffffff);
	SetConstCmt(GetConst(id,0x3,0xffffffff),"SYS - Interrupt Vector Register",1);
	AddConstEx(id,"SYS_NEW_CMD",	0x5,	0xffffffff);
	SetConstCmt(GetConst(id,0x5,0xffffffff),"SYS - New Command Register",1);
	AddConstEx(id,"CH0_CHAN_PARM",	0x6,	0xffffffff);
	SetConstCmt(GetConst(id,0x6,0xffffffff),"CH 0 - Channel Parameter Register",1);
	AddConstEx(id,"CH0_CHAN_STAT",	0x8,	0xffffffff);
	SetConstCmt(GetConst(id,0x8,0xffffffff),"CH 0 - Channel Status Register",1);
	AddConstEx(id,"CH0_CHAN_CMD",	0xa,	0xffffffff);
	SetConstCmt(GetConst(id,0xa,0xffffffff),"CH 0 - Channel Command Register",1);
	AddConstEx(id,"CH0_XMIT_BUF_ADDR",	0xb,	0xffffffff);
	SetConstCmt(GetConst(id,0xb,0xffffffff),"CH 0 - Transmit Data Buffer Address Register",1);
	AddConstEx(id,"CH0_XMIT_BUF_LEN",	0xe,	0xffffffff);
	SetConstCmt(GetConst(id,0xe,0xffffffff),"CH 0 - Transmit Data Buffer Length Register",1);
	AddConstEx(id,"CH0_RECV_BUF_ADDR",	0x10,	0xffffffff);
	SetConstCmt(GetConst(id,0x10,0xffffffff),"CH 0 - Receive Data Buffer Address Register",1);
	AddConstEx(id,"CH0_RECV_BUF_LEN",	0x13,	0xffffffff);
	SetConstCmt(GetConst(id,0x13,0xffffffff),"CH 0 - Receive Data Buffer Length Register",1);
	AddConstEx(id,"CH0_RECV_BUF_IN_PTR",	0x15,	0xffffffff);
	SetConstCmt(GetConst(id,0x15,0xffffffff),"CH 0 - Receive Buffer Input Pointer Register",1);
	AddConstEx(id,"CH0_RECV_BUF_OUT_PTR",	0x17,	0xffffffff);
	SetConstCmt(GetConst(id,0x17,0xffffffff),"CH 0 - Receive Buffer Output Pointer Register",1);
	AddConstEx(id,"CH0_TTY_RECV",	0x19,	0xffffffff);
	SetConstCmt(GetConst(id,0x19,0xffffffff),"CH 0 - TTY Receive Register",1);
	AddConstEx(id,"CH0_SEL_RATE",	0x1a,	0xffffffff);
	SetConstCmt(GetConst(id,0x1a,0xffffffff),"CH 0 - Selectable Rate Register",1);
	AddConstEx(id,"CH1_CHAN_PARM",	0x1c,	0xffffffff);
	SetConstCmt(GetConst(id,0x1c,0xffffffff),"CH 1 - Channel Parameter Register",1);
	AddConstEx(id,"CH1_CHAN_STAT",	0x1e,	0xffffffff);
	SetConstCmt(GetConst(id,0x1e,0xffffffff),"CH 1 - Channel Status Register",1);
	AddConstEx(id,"CH1_CHAN_CMD",	0x20,	0xffffffff);
	SetConstCmt(GetConst(id,0x20,0xffffffff),"CH 1 - Channel Command Register",1);
	AddConstEx(id,"CH1_XMIT_BUF_ADDR",	0x21,	0xffffffff);
	SetConstCmt(GetConst(id,0x21,0xffffffff),"CH 1 - Transmit Data Buffer Address Register",1);
	AddConstEx(id,"CH1_XMIT_BUF_LEN",	0x24,	0xffffffff);
	SetConstCmt(GetConst(id,0x24,0xffffffff),"CH 1 - Transmit Data Buffer Length Register",1);
	AddConstEx(id,"CH1_RECV_BUF_ADDR",	0x26,	0xffffffff);
	SetConstCmt(GetConst(id,0x26,0xffffffff),"CH 1 - Receive Data Buffer Address Register",1);
	AddConstEx(id,"CH1_RECV_BUF_LEN",	0x29,	0xffffffff);
	SetConstCmt(GetConst(id,0x29,0xffffffff),"CH 1 - Receive Data Buffer Length Register",1);
	AddConstEx(id,"CH1_RECV_BUF_IN_PTR",	0x2b,	0xffffffff);
	SetConstCmt(GetConst(id,0x2b,0xffffffff),"CH 1 - Receive Buffer Input Pointer Register",1);
	AddConstEx(id,"CH1_RECV_BUF_OUT_PTR",	0x2d,	0xffffffff);
	SetConstCmt(GetConst(id,0x2d,0xffffffff),"CH 1 - Receive Buffer Output Pointer Register",1);
	AddConstEx(id,"CH1_TTY_RECV",	0x2f,	0xffffffff);
	SetConstCmt(GetConst(id,0x2f,0xffffffff),"CH 1 - TTY Receive Register",1);
	AddConstEx(id,"CH1_SEL_RATE",	0x30,	0xffffffff);
	SetConstCmt(GetConst(id,0x30,0xffffffff),"CH 1 - Selectable Rate Register",1);
	AddConstEx(id,"CH2_CHAN_PARM",	0x32,	0xffffffff);
	SetConstCmt(GetConst(id,0x32,0xffffffff),"CH 2 - Channel Parameter Register",1);
	AddConstEx(id,"CH2_CHAN_STAT",	0x34,	0xffffffff);
	SetConstCmt(GetConst(id,0x34,0xffffffff),"CH 2 - Channel Status Register",1);
	AddConstEx(id,"CH2_CHAN_CMD",	0x36,	0xffffffff);
	SetConstCmt(GetConst(id,0x36,0xffffffff),"CH 2 - Channel Command Register",1);
	AddConstEx(id,"CH2_XMIT_BUF_ADDR",	0x37,	0xffffffff);
	SetConstCmt(GetConst(id,0x37,0xffffffff),"CH 2 - Transmit Data Buffer Address Register",1);
	AddConstEx(id,"CH2_XMIT_BUF_LEN",	0x3a,	0xffffffff);
	SetConstCmt(GetConst(id,0x3a,0xffffffff),"CH 2 - Transmit Data Buffer Length Register",1);
	AddConstEx(id,"CH2_RECV_BUF_ADDR",	0x3c,	0xffffffff);
	SetConstCmt(GetConst(id,0x3c,0xffffffff),"CH 2 - Receive Data Buffer Address Register",1);
	AddConstEx(id,"CH2_RECV_BUF_LEN",	0x3f,	0xffffffff);
	SetConstCmt(GetConst(id,0x3f,0xffffffff),"CH 2 - Receive Data Buffer Length Register",1);
	AddConstEx(id,"CH2_RECV_BUF_IN_PTR",	0x41,	0xffffffff);
	SetConstCmt(GetConst(id,0x41,0xffffffff),"CH 2 - Receive Buffer Input Pointer Register",1);
	AddConstEx(id,"CH2_RECV_BUF_OUT_PTR",	0x43,	0xffffffff);
	SetConstCmt(GetConst(id,0x43,0xffffffff),"CH 2 - Receive Buffer Output Pointer Register",1);
	AddConstEx(id,"CH2_TTY_RECV",	0x45,	0xffffffff);
	SetConstCmt(GetConst(id,0x45,0xffffffff),"CH 2 - TTY Receive Register",1);
	AddConstEx(id,"CH2_SEL_RATE",	0x46,	0xffffffff);
	SetConstCmt(GetConst(id,0x46,0xffffffff),"CH 2 - Selectable Rate Register",1);
	AddConstEx(id,"CH3_CHAN_PARM",	0x48,	0xffffffff);
	SetConstCmt(GetConst(id,0x48,0xffffffff),"CH 3 - Channel Parameter Register",1);
	AddConstEx(id,"CH3_CHAN_STAT",	0x4a,	0xffffffff);
	SetConstCmt(GetConst(id,0x4a,0xffffffff),"CH 3 - Channel Status Register",1);
	AddConstEx(id,"CH3_CHAN_CMD",	0x4c,	0xffffffff);
	SetConstCmt(GetConst(id,0x4c,0xffffffff),"CH 3 - Channel Command Register",1);
	AddConstEx(id,"CH3_XMIT_BUF_ADDR",	0x4d,	0xffffffff);
	SetConstCmt(GetConst(id,0x4d,0xffffffff),"CH 3 - Transmit Data Buffer Address Register",1);
	AddConstEx(id,"CH3_XMIT_BUF_LEN",	0x50,	0xffffffff);
	SetConstCmt(GetConst(id,0x50,0xffffffff),"CH 3 - Transmit Data Buffer Length Register",1);
	AddConstEx(id,"CH3_RECV_BUF_ADDR",	0x52,	0xffffffff);
	SetConstCmt(GetConst(id,0x52,0xffffffff),"CH 3 - Receive Data Buffer Address Register",1);
	AddConstEx(id,"CH3_RECV_BUF_LEN",	0x55,	0xffffffff);
	SetConstCmt(GetConst(id,0x55,0xffffffff),"CH 3 - Receive Data Buffer Length Register",1);
	AddConstEx(id,"CH3_RECV_BUF_IN_PTR",	0x57,	0xffffffff);
	SetConstCmt(GetConst(id,0x57,0xffffffff),"CH 3 - Receive Buffer Input Pointer Register",1);
	AddConstEx(id,"CH3_RECV_BUF_OUT_PTR",	0x59,	0xffffffff);
	SetConstCmt(GetConst(id,0x59,0xffffffff),"CH 3 - Receive Buffer Output Pointer Register",1);
	AddConstEx(id,"CH3_TTY_RECV",	0x5b,	0xffffffff);
	SetConstCmt(GetConst(id,0x5b,0xffffffff),"CH 3 - TTY Receive Register",1);
	AddConstEx(id,"CH3_SEL_RATE",	0x5c,	0xffffffff);
	SetConstCmt(GetConst(id,0x5c,0xffffffff),"CH 3 - Selectable Rate Register",1);
	AddConstEx(id,"CH4_CHAN_PARM",	0x5e,	0xffffffff);
	SetConstCmt(GetConst(id,0x5e,0xffffffff),"CH 4 - Channel Parameter Register",1);
	AddConstEx(id,"CH4_CHAN_STAT",	0x60,	0xffffffff);
	SetConstCmt(GetConst(id,0x60,0xffffffff),"CH 4 - Channel Status Register",1);
	AddConstEx(id,"CH4_CHAN_CMD",	0x62,	0xffffffff);
	SetConstCmt(GetConst(id,0x62,0xffffffff),"CH 4 - Channel Command Register",1);
	AddConstEx(id,"CH4_XMIT_BUF_ADDR",	0x63,	0xffffffff);
	SetConstCmt(GetConst(id,0x63,0xffffffff),"CH 4 - Transmit Data Buffer Address Register",1);
	AddConstEx(id,"CH4_XMIT_BUF_LEN",	0x66,	0xffffffff);
	SetConstCmt(GetConst(id,0x66,0xffffffff),"CH 4 - Transmit Data Buffer Length Register",1);
	AddConstEx(id,"CH4_RECV_BUF_ADDR",	0x68,	0xffffffff);
	SetConstCmt(GetConst(id,0x68,0xffffffff),"CH 4 - Receive Data Buffer Address Register",1);
	AddConstEx(id,"CH4_RECV_BUF_LEN",	0x6b,	0xffffffff);
	SetConstCmt(GetConst(id,0x6b,0xffffffff),"CH 4 - Receive Data Buffer Length Register",1);
	AddConstEx(id,"CH4_RECV_BUF_IN_PTR",	0x6d,	0xffffffff);
	SetConstCmt(GetConst(id,0x6d,0xffffffff),"CH 4 - Receive Buffer Input Pointer Register",1);
	AddConstEx(id,"CH4_RECV_BUF_OUT_PTR",	0x6f,	0xffffffff);
	SetConstCmt(GetConst(id,0x6f,0xffffffff),"CH 4 - Receive Buffer Output Pointer Register",1);
	AddConstEx(id,"CH4_TTY_RECV",	0x71,	0xffffffff);
	SetConstCmt(GetConst(id,0x71,0xffffffff),"CH 4 - TTY Receive Register",1);
	AddConstEx(id,"CH4_SEL_RATE",	0x72,	0xffffffff);
	SetConstCmt(GetConst(id,0x72,0xffffffff),"CH 4 - Selectable Rate Register",1);
	AddConstEx(id,"CH5_CHAN_PARM",	0x74,	0xffffffff);
	SetConstCmt(GetConst(id,0x74,0xffffffff),"CH 5 - Channel Parameter Register",1);
	AddConstEx(id,"CH5_CHAN_STAT",	0x76,	0xffffffff);
	SetConstCmt(GetConst(id,0x76,0xffffffff),"CH 5 - Channel Status Register",1);
	AddConstEx(id,"CH5_CHAN_CMD",	0x78,	0xffffffff);
	SetConstCmt(GetConst(id,0x78,0xffffffff),"CH 5 - Channel Command Register",1);
	AddConstEx(id,"CH5_XMIT_BUF_ADDR",	0x79,	0xffffffff);
	SetConstCmt(GetConst(id,0x79,0xffffffff),"CH 5 - Transmit Data Buffer Address Register",1);
	AddConstEx(id,"CH5_XMIT_BUF_LEN",	0x7c,	0xffffffff);
	SetConstCmt(GetConst(id,0x7c,0xffffffff),"CH 5 - Transmit Data Buffer Length Register",1);
	AddConstEx(id,"CH5_RECV_BUF_ADDR",	0x7e,	0xffffffff);
	SetConstCmt(GetConst(id,0x7e,0xffffffff),"CH 5 - Receive Data Buffer Address Register",1);
	AddConstEx(id,"CH5_RECV_BUF_LEN",	0x81,	0xffffffff);
	SetConstCmt(GetConst(id,0x81,0xffffffff),"CH 5 - Receive Data Buffer Length Register",1);
	AddConstEx(id,"CH5_RECV_BUF_IN_PTR",	0x83,	0xffffffff);
	SetConstCmt(GetConst(id,0x83,0xffffffff),"CH 5 - Receive Buffer Input Pointer Register",1);
	AddConstEx(id,"CH5_RECV_BUF_OUT_PTR",	0x85,	0xffffffff);
	SetConstCmt(GetConst(id,0x85,0xffffffff),"CH 5 - Receive Buffer Output Pointer Register",1);
	AddConstEx(id,"CH5_TTY_RECV",	0x87,	0xffffffff);
	SetConstCmt(GetConst(id,0x87,0xffffffff),"CH 5 - TTY Receive Register",1);
	AddConstEx(id,"CH5_SEL_RATE",	0x88,	0xffffffff);
	SetConstCmt(GetConst(id,0x88,0xffffffff),"CH 5 - Selectable Rate Register",1);
	AddConstEx(id,"UNK_CMD_XXX",	0x8a,	0xffffffff);
	SetConstCmt(GetConst(id,0x8a,0xffffffff),"UNK - Command Register?",1);
	AddConstEx(id,"UNK_STAT_XXX",	0x8b,	0xffffffff);
	SetConstCmt(GetConst(id,0x8b,0xffffffff),"UNK - Status Register?",1);
	AddConstEx(id,"UNK_Some_BUF",	0x8c,	0xffffffff);
	SetConstCmt(GetConst(id,0x8c,0xffffffff),"UNK - Some Buffer?",1);
	AddConstEx(id,"UNK_Sector_size",	0x96,	0xffffffff);
	SetConstCmt(GetConst(id,0x96,0xffffffff),"UNK - Sector size?",1);
	AddConstEx(id,"UNKNOWN",	0xd4,	0xffffffff);
	SetConstCmt(GetConst(id,0xd4,0xffffffff),"UNKNOWN",1);
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;

	id = AddStrucEx(-1,"IY_STRUCT",0);
	id = AddStrucEx(-1,"IX_STRUCT",0);
	id = AddStrucEx(-1,"HOST_RAM_ADDR",0);
	id = AddStrucEx(-1,"FDC_COMMAND_S",0);
	id = AddStrucEx(-1,"FDC_IX_STRUCT",0);
	id = AddStrucEx(-1,"struc_26FF",0);
	id = AddStrucEx(-1,"FDC_IY_PARAMS",0);
	
	id = GetStrucIdByName("IY_STRUCT");
	AddStrucMember(id,"field_0",	0,	0x009400,	-1,	1);
	AddStrucMember(id,"field_1",	0x1,	0x000400,	-1,	1);
	AddStrucMember(id,"field_2",	0x2,	0x000400,	-1,	1);
	AddStrucMember(id,"field_3",	0x3,	0x000400,	-1,	1);
	AddStrucMember(id,"field_4",	0x4,	0x000400,	-1,	1);
	AddStrucMember(id,"field_5",	0x5,	0x000400,	-1,	1);
	AddStrucMember(id,"field_6",	0x6,	0x000400,	-1,	1);
	AddStrucMember(id,"field_7",	0x7,	0x000400,	-1,	1);
	AddStrucMember(id,"field_8",	0x8,	0x000400,	-1,	1);
	AddStrucMember(id,"field_9",	0x9,	0x000400,	-1,	1);
	AddStrucMember(id,"field_A",	0xa,	0x000400,	-1,	1);
	AddStrucMember(id,"field_B",	0xb,	0x000400,	-1,	1);
	AddStrucMember(id,"field_C",	0xc,	0x000400,	-1,	1);
	AddStrucMember(id,"field_D",	0xd,	0x000400,	-1,	1);
	AddStrucMember(id,"field_E",	0xe,	0x000400,	-1,	1);
	AddStrucMember(id,"field_F",	0xf,	0x000400,	-1,	1);
	AddStrucMember(id,"field_10",	0x10,	0x000400,	-1,	1);
	AddStrucMember(id,"field_11",	0x11,	0x000400,	-1,	1);
	AddStrucMember(id,"field_12",	0x12,	0x000400,	-1,	1);
	AddStrucMember(id,"field_13",	0x13,	0x000400,	-1,	1);
	AddStrucMember(id,"field_14",	0x14,	0x000400,	-1,	1);
	AddStrucMember(id,"field_15",	0x15,	0x000400,	-1,	1);
	AddStrucMember(id,"field_16",	0x16,	0x000400,	-1,	1);
	AddStrucMember(id,"field_17",	0x17,	0x000400,	-1,	1);
	AddStrucMember(id,"field_18",	0x18,	0x000400,	-1,	1);
	AddStrucMember(id,"field_19",	0x19,	0x000400,	-1,	1);
	AddStrucMember(id,"field_1A",	0x1a,	0x000400,	-1,	1);
	AddStrucMember(id,"field_1B",	0x1b,	0x000400,	-1,	1);
	AddStrucMember(id,"field_1C",	0x1c,	0x000400,	-1,	1);
	AddStrucMember(id,"field_1D",	0x1d,	0x000400,	-1,	1);
	AddStrucMember(id,"field_1E",	0x1e,	0x000400,	-1,	1);
	AddStrucMember(id,"field_1F",	0x1f,	0x000400,	-1,	1);
	AddStrucMember(id,"field_20",	0x20,	0x000400,	-1,	1);
	AddStrucMember(id,"field_21",	0x21,	0x000400,	-1,	1);
	AddStrucMember(id,"field_22",	0x22,	0x000400,	-1,	1);
	AddStrucMember(id,"field_23",	0x23,	0x000400,	-1,	1);
	AddStrucMember(id,"field_24",	0x24,	0x000400,	-1,	1);
	AddStrucMember(id,"field_25",	0x25,	0x000400,	-1,	1);
	AddStrucMember(id,"field_26",	0x26,	0x000400,	-1,	1);
	AddStrucMember(id,"field_27",	0x27,	0x000400,	-1,	1);
	AddStrucMember(id,"field_28",	0x28,	0x000400,	-1,	1);
	AddStrucMember(id,"field_29",	0x29,	0x000400,	-1,	1);
	AddStrucMember(id,"field_2A",	0x2a,	0x000400,	-1,	1);
	AddStrucMember(id,"field_2B",	0x2b,	0x000400,	-1,	1);
	AddStrucMember(id,"field_2C",	0x2c,	0x000400,	-1,	1);
	AddStrucMember(id,"LAST",	0x2d,	0x000400,	-1,	1);
	
	id = GetStrucIdByName("IX_STRUCT");
	AddStrucMember(id,"field_0",	0,	0x009400,	-1,	1);
	AddStrucMember(id,"field_1",	0x1,	0x000400,	-1,	1);
	AddStrucMember(id,"PORT_BASE_1",	0x2,	0x800400,	GetEnum("PORTS"),	1);
	AddStrucMember(id,"PORT_BASE_2",	0x3,	0x800400,	GetEnum("PORTS"),	1);
	AddStrucMember(id,"field_4",	0x4,	0x000400,	-1,	1);
	AddStrucMember(id,"field_5",	0x5,	0x000400,	-1,	1);
	AddStrucMember(id,"field_6",	0x6,	0x000400,	-1,	1);
	AddStrucMember(id,"field_7",	0x7,	0x000400,	-1,	1);
	AddStrucMember(id,"field_8",	0x8,	0x000400,	-1,	1);
	AddStrucMember(id,"field_9",	0x9,	0x000400,	-1,	1);
	AddStrucMember(id,"field_A",	0xa,	0x000400,	-1,	1);
	AddStrucMember(id,"field_B",	0xb,	0x000400,	-1,	1);
	AddStrucMember(id,"LAST",	0xc,	0x000400,	-1,	1);
	
	id = GetStrucIdByName("HOST_RAM_ADDR");
	AddStrucMember(id,"LO",	0,	0x000400,	-1,	1);
	AddStrucMember(id,"MID",	0x1,	0x000400,	-1,	1);
	AddStrucMember(id,"HI",	0x2,	0x000400,	-1,	1);
	
	id = GetStrucIdByName("FDC_COMMAND_S");
	AddStrucMember(id,"COMMAND",	0,	0x000400,	-1,	1);
	AddStrucMember(id,"STATUS",	0x1,	0x000400,	-1,	1);
	AddStrucMember(id,"field_2",	0x2,	0x000400,	-1,	1);
	AddStrucMember(id,"TRACK_NUMBER",	0x3,	0x000400,	-1,	1);
	AddStrucMember(id,"HEAD",	0x4,	0x000400,	-1,	1);
	AddStrucMember(id,"SECTOR",	0x5,	0x000400,	-1,	1);
	AddStrucMember(id,"BUFFER_ADDR_MID_LO",	0x6,	0x10000400,	-1,	2);
	AddStrucMember(id,"BUFFER_ADDR_HI",	0x8,	0x000400,	-1,	1);
	
	id = GetStrucIdByName("FDC_IX_STRUCT");
	AddStrucMember(id,"field_0",	0,	0x000400,	-1,	1);
	AddStrucMember(id,"field_1",	0x1,	0x000400,	-1,	1);
	AddStrucMember(id,"LEN_C_LO",	0x2,	0x000400,	-1,	1);
	AddStrucMember(id,"LEN_B_HI",	0x3,	0x000400,	-1,	1);
	AddStrucMember(id,"DOUBLE_STEP",	0x4,	0x000400,	-1,	1);
	AddStrucMember(id,"field_5",	0x5,	0x000400,	-1,	1);
	AddStrucMember(id,"field_6",	0x6,	0x000400,	-1,	1);
	AddStrucMember(id,"field_7",	0x7,	0x000400,	-1,	1);
	AddStrucMember(id,"field_8",	0x8,	0x000400,	-1,	1);
	AddStrucMember(id,"field_9",	0x9,	0x000400,	-1,	1);
	AddStrucMember(id,"field_A",	0xa,	0x000400,	-1,	1);
	
	id = GetStrucIdByName("struc_26FF");
	AddStrucMember(id,"ARR12",	0,	0x005400,	-1,	1);
	AddStrucMember(id,"HL_STH",	0x1,	0x005400,	-1,	1);
	AddStrucMember(id,"SIO_field_2",	0x2,	0x000400,	-1,	1);
	AddStrucMember(id,"field_3",	0x3,	0x000400,	-1,	1);
	AddStrucMember(id,"SIO_field_4",	0x4,	0x000400,	-1,	1);
	AddStrucMember(id,"field_5",	0x5,	0x000400,	-1,	1);
	AddStrucMember(id,"field_6",	0x6,	0x005400,	-1,	1);
	AddStrucMember(id,"field_7",	0x7,	0x005400,	-1,	1);
	AddStrucMember(id,"FDC_field_8",	0x8,	0x005400,	-1,	1);
	AddStrucMember(id,"field_9",	0x9,	0x005400,	-1,	1);
	AddStrucMember(id,"field_A",	0xa,	0x005400,	-1,	1);
	AddStrucMember(id,"HOST_RAM_PTR",	0xb,	0x005400,	-1,	1);
	
	id = GetStrucIdByName("FDC_IY_PARAMS");
	AddStrucMember(id,"field_0",	0,	0x005400,	-1,	1);
	AddStrucMember(id,"field_1",	0x1,	0x000400,	-1,	1);
	AddStrucMember(id,"field_2",	0x2,	0x000400,	-1,	1);
	AddStrucMember(id,"field_3",	0x3,	0x000400,	-1,	1);
	AddStrucMember(id,"field_4",	0x4,	0x000400,	-1,	1);
	AddStrucMember(id,"field_5",	0x5,	0x000400,	-1,	1);
	AddStrucMember(id,"field_6",	0x6,	0x000400,	-1,	1);
	AddStrucMember(id,"field_7",	0x7,	0x000400,	-1,	1);
	AddStrucMember(id,"field_8",	0x8,	0x000400,	-1,	1);
	AddStrucMember(id,"field_9",	0x9,	0x000400,	-1,	1);
	AddStrucMember(id,"field_A",	0xa,	0x000400,	-1,	1);
	AddStrucMember(id,"field_B",	0xb,	0x000400,	-1,	1);
	AddStrucMember(id,"field_C",	0xc,	0x000400,	-1,	1);
	AddStrucMember(id,"field_D",	0xd,	0x000400,	-1,	1);
	AddStrucMember(id,"field_E",	0xe,	0x000400,	-1,	1);
	AddStrucMember(id,"field_F",	0xf,	0x000400,	-1,	1);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;

	MakeName	(0,	"START");
	MakeCode	(x=0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0x3,	"How long a jump slot is");
	MakeComm	(0x6,	"How many jump slots");
	MakeCode	(x=0x9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0xc,	"RET_TO_SRAM");
	MakeComm	(0xc,	"Fill jump slots with 0C9h == RET");
	MakeRptCmt	(0x14,	"Length of rest of SRAM, after the jump slots");
	MakeName	(0x17,	"ERASE_SRAM");
	MakeRptCmt	(0x17,	"Fill rest of SRAM with zeroes");
	MakeRptCmt	(0x1f,	"Endless loop\nWaiting for interrupt");
	MakeByte	(0x21);
	MakeArray	(0x21,	23);
	MakeName	(0x38,	"INT_HANDLER");
	MakeCode	(0x38);
	MakeByte	(0x3b);
	MakeArray	(0x3b,	43);
	MakeName	(0x66,	"NMI_HANDLER");
	MakeCode	(0x66);
	MakeByte	(0x69);
	MakeArray	(0x69,	7);
	MakeCode	(0x70);
	MakeCode	(0x73);
	MakeCode	(0x76);
	MakeCode	(0x79);
	MakeCode	(0x7c);
	MakeCode	(0x7f);
	MakeCode	(0x82);
	MakeName	(0x85,	"DO_NMI_HANDLER");
	MakeComm	(0x85,	"Beginning of SRAM\nThere's a jump slot there");
	MakeCode	(0x85);
	MakeComm	(0x89,	"Start of the rest of SRAM");
	MakeCode	(x=0x89);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeRptCmt	(0x8c,	"Length of the rest of SRAM");
	MakeName	(0x8f,	"WIPE_SRAM");
	MakeComm	(0x8f,	"Zero out");
	MakeCode	(x=0x9c);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0xa2,	"Why twice?");
	MakeRptCmt	(0xaa,	"a=0");
	MakeCode	(x=0xb1);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0xb4);
	OpDecimal	(x,	1);
	MakeCode	(x=0xc5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0xc8,	"3 bytes: lo mid hi");
	MakeCode	(x=0xd1);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0xd4,	"CCB lo. (0x16)");
	MakeRptCmt	(0xd5,	"Even address");
	MakeRptCmt	(0xd8,	"CCB lo (0x16)");
	MakeRptCmt	(0xda,	"CCB mid (0x04)");
	MakeRptCmt	(0xdd,	"CCB hi (0x00)");
	MakeCode	(x=0xe3);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeRptCmt	(0xe6,	"This reads 0x416, 0x417 -- firmware version and cmd reg");
	MakeCode	(x=0xe9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0xf7);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0xfd);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeRptCmt	(0x103,	"Interrupt mode 1");
	MakeCode	(x=0x105);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x12a,	"CHANNEL_VECTOR");
	MakeByte	(0x12a);
	MakeWord	(x=0x12b);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0x12d);
	MakeWord	(x=0x12e);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0x130);
	MakeWord	(x=0x131);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0x133);
	MakeWord	(x=0x134);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0x136);
	MakeWord	(x=0x137);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0x139);
	MakeWord	(x=0x13a);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0x13c);
	MakeWord	(x=0x13d);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0x13f);
	MakeWord	(x=0x140);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0x142);
	MakeWord	(x=0x143);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0x145);
	MakeWord	(x=0x146);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0x148);
	MakeName	(0x149,	"SERIAL_SOMETHINGS");
	MakeWord	(x=0x149);
	MakeArray	(x,	12);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0x161,	"ADD_WORD16");
	MakeCode	(0x161);
	MakeName	(0x166,	"MEMSET");
	MakeCode	(0x166);
	MakeCode	(0x16d);
	MakeCode	(x=0x172);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x175);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x184);
	OpStroff	(x,	0,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(0x18a);
	MakeCode	(x=0x18f);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x195);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x1a0);
	OpStroff	(x,	0,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(0x1a6);
	MakeCode	(x=0x1ab);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x1b1);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(0x1b7);
	MakeCode	(x=0x1bf);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x1c2);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(0x1c8);
	MakeCode	(x=0x1c9);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeName	(0x1cf,	"BUS_READ8");
	MakeCode	(0x1cf);
	MakeCode	(x=0x1d6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x1e1,	"BUS_WRITE8");
	MakeCode	(0x1e1);
	MakeCode	(x=0x1e8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x1f3,	"BUS_READ16");
	MakeCode	(0x1f3);
	MakeName	(0x1f8,	"BUS_WRITE16");
	MakeCode	(0x1f8);
	MakeName	(0x1fd,	"READ_BUS_MEMORY");
	MakeCode	(0x1fd);
	MakeComm	(0x1ff,	"Interupts off");
	MakeName	(0x203,	"READ_BYTE");
	MakeRptCmt	(0x203,	"hl=0x8xxx host mem address");
	MakeCode	(x=0x20a);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeRptCmt	(0x20e,	"Reset the latch");
	MakeComm	(0x212,	"Interrupts on");
	MakeName	(0x215,	"WRITE_BUS_MEMORY");
	MakeCode	(0x215);
	MakeCode	(x=0x222);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x22d,	"HOST_MEM_WINDOW");
	MakeCode	(x=0x22d);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeRptCmt	(0x231,	"0xfc");
	MakeCode	(x=0x231);
	OpStroff	(x,	0,	GetStrucIdByName("HOST_RAM_ADDR"));
	MakeRptCmt	(0x234,	"0xff");
	MakeCode	(x=0x234);
	OpStroff	(x,	0,	GetStrucIdByName("HOST_RAM_ADDR"));
	MakeComm	(0x237,	"0x01");
	MakeCode	(x=0x237);
	OpStroff	(x,	0,	GetStrucIdByName("HOST_RAM_ADDR"));
	MakeName	(0x23c,	"NEXT_BUS_BYTE");
	MakeCode	(x=0x23c);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x240);
	OpStroff	(x,	1,	GetStrucIdByName("HOST_RAM_ADDR"));
	MakeCode	(x=0x249);
	OpStroff	(x,	0,	GetStrucIdByName("HOST_RAM_ADDR"));
	MakeCode	(x=0x24f);
	OpStroff	(x,	0,	GetStrucIdByName("HOST_RAM_ADDR"));
	MakeCode	(x=0x255);
	OpStroff	(x,	0,	GetStrucIdByName("HOST_RAM_ADDR"));
	MakeRptCmt	(0x25e,	"Is zero?");
	MakeName	(0x260,	"SET_BUS_ADDRESS_LATCH");
	MakeCode	(x=0x260);
	OpStroff	(x,	1,	GetStrucIdByName("HOST_RAM_ADDR"));
	MakeCode	(x=0x265);
	OpStroff	(x,	1,	GetStrucIdByName("HOST_RAM_ADDR"));
	MakeCode	(x=0x26f);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0x271);
	OpStroff	(x,	1,	GetStrucIdByName("HOST_RAM_ADDR"));
	MakeRptCmt	(0x274,	"Host addresses are at 0x80..");
	MakeRptCmt	(0x276,	"Top part: 0x80...");
	MakeCode	(x=0x277);
	OpStroff	(x,	1,	GetStrucIdByName("HOST_RAM_ADDR"));
	MakeCode	(0x280);
	MakeCode	(0x286);
	MakeName	(0x28c,	"ZERO_SAVED_TASK_sub_028C");
	MakeCode	(0x28c);
	MakeCode	(0x292);
	MakeCode	(x=0x298);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x29d,	"CHECK_STUFF");
	MakeCode	(0x29d);
	MakeName	(0x2b4,	"TAIL_sub_02B4");
	MakeCode	(x=0x2b4);
	OpDecimal	(x,	1);
	MakeCode	(x=0x2c9);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0x2db);
	MakeCode	(x=0x2de);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0x2e9);
	MakeCode	(x=0x2f0);
	OpDecimal	(x,	1);
	MakeCode	(x=0x2f8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x305);
	OpDecimal	(x,	1);
	MakeName	(0x30d,	"PICK_CALLBACK");
	MakeComm	(0x30d,	"a=0, 1, 2...");
	MakeCode	(0x30d);
	MakeRptCmt	(0x30f,	"OR with itself. S flag = bit 7 on");
	MakeRptCmt	(0x310,	"S flag means we've reached a -1 = 0xff");
	MakeComm	(0x311,	"e=handler addr lo");
	MakeComm	(0x313,	" e=handler addr hi\nde=handler addr");
	MakeName	(0x31d,	"INIT_PIO");
	MakeCode	(x=0x31d);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0x320,	"PIO - Command port A");
	MakeCode	(x=0x325);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0x328,	"PIO - Command port B");
	MakeName	(0x32e,	"PIO_COMMAND_A_INIT");
	MakeComm	(0x32e,	"1. 1100 1111   Mode control\n2.  1101 1111    IIOI IIII (5 = output)\n3. 0000 0000   Interrupt vector 0\n4. 0011 0111   Interrupt control\n5. 1111 1111     Disable all");
	MakeByte	(x=0x32e);
	MakeArray	(x,	5);
	OpBinary	(x,	0);
	MakeName	(0x333,	"PIO_COMMAND_B_INIT");
	MakeComm	(0x333,	"1. 1100 1111   Mode control\n2.  1000 0100    IOOO OIOO\n3. 0000 0000   Interrupt vector 0\n4. 0011 0111   Interrupt control\n5. 1111 1111     Disable all");
	MakeByte	(x=0x333);
	MakeArray	(x,	5);
	OpBinary	(x,	0);
	MakeName	(0x338,	"PIO_A_NEG_LOW_4_BITS");
	MakeCode	(x=0x338);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeComm	(0x33a,	"complement ~");
	MakeName	(0x33e,	"PIO_A_GET_BIT6");
	MakeCode	(x=0x33e);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeName	(0x343,	"PIO_A_GET_BIT7_FDC_INTRQ");
	MakeCode	(x=0x343);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeName	(0x348,	"orphan_PIO_B_GET_BIT2_AUX_FDC");
	MakeCode	(x=0x348);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeName	(0x34d,	"orphan_PIO_B_GET_BIT7_PIT_OUT2");
	MakeCode	(x=0x34d);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeName	(0x352,	"PIO_A_BIT5_ON");
	MakeCode	(x=0x352);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x356);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeName	(0x359,	"PIO_A_BIT5_OFF");
	MakeCode	(x=0x359);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x35d);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeName	(0x360,	"FDC_sub_0360");
	MakeCode	(0x360);
	MakeCode	(x=0x361);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0x374);
	MakeCode	(x=0x376);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0x389);
	MakeCode	(x=0x39e);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeRptCmt	(0x3a0,	"BIT1 off");
	MakeComm	(0x3a2,	"BIT0 on");
	MakeCode	(x=0x3a3);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeName	(0x3a6,	"SIO_sub_03A6");
	MakeCode	(x=0x3a6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x3ac,	"ZERO_TO_SOME_VAR_sub_03AC");
	MakeCode	(x=0x3ac);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x3b2,	"FDC_SELECT_DRIVE");
	MakeCode	(0x3b2);
	MakeName	(0x3b6,	"FDC_NEVIEM_sub_03B6");
	MakeCode	(0x3b6);
	MakeName	(0x3c2,	"FDC_SET_DRIVE_SELECT");
	MakeCode	(x=0x3cd);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeRptCmt	(0x3cf,	"BIT3 BIT4 off DS0/DS1");
	MakeRptCmt	(0x3d1,	"BIT0 on");
	MakeCode	(x=0x3d4);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeName	(0x3d7,	"FDC_SET_SIDE");
	MakeCode	(0x3d7);
	MakeCode	(x=0x3e1);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeRptCmt	(0x3e3,	"BIT5 off (SIDE 0)");
	MakeComm	(0x3e5,	"BIT0 in");
	MakeCode	(x=0x3e6);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeName	(0x3e9,	"FDC_DMA_WHAT");
	MakeCode	(0x3e9);
	MakeCode	(x=0x3f3);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeComm	(0x3f5,	"what");
	MakeComm	(0x3f7,	"what");
	MakeCode	(x=0x3f8);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeName	(0x3fb,	"SHIFT_OR_WHAT");
	MakeCode	(0x3fb);
	MakeName	(0x400,	"DO_CHECK_STUFF");
	MakeCode	(x=0x400);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x40d);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x411);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x418);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x41e);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x421);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x429);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x42d);
	OpEnum		(x,	1,	GetEnum("SYS_REGS"));
	MakeCode	(x=0x438);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x43d);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeName	(0x445,	"TAIL_EI");
	MakeCode	(0x445);
	MakeCode	(0x44f);
	MakeCode	(0x458);
	MakeCode	(0x460);
	MakeCode	(x=0x46f);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x478,	"FDC_CHECK_sub_0478");
	MakeCode	(0x478);
	MakeCode	(x=0x47e);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x4aa,	"FDC_sub_04AA_FALLTHRU");
	MakeCode	(0x4aa);
	MakeComm	(0x4b5,	"FALL_THROUGH");
	MakeName	(0x4b6,	"FDC_SET_A_TO_6_MAKE_CCB_FALLTHRU");
	MakeComm	(0x4b6,	"FALL_THROUGH");
	MakeName	(0x4b8,	"MAKE_CCB_ADDR_FALLTHRU");
	MakeCode	(x=0x4b8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0x4c2,	"FALL_THROUGH");
	MakeName	(0x4c3,	"MAKE_CCB_ADDRESS");
	MakeComm	(0x4c3,	"e=offset (0x05)");
	MakeCode	(x=0x4c4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x4cc);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeRptCmt	(0x4cf,	"add CCB offset to there");
	MakeRptCmt	(0x4d0,	"bottom byte 0x1b");
	MakeRptCmt	(0x4d4,	"top byte. 0x04");
	MakeRptCmt	(0x4d8,	"hl=host address");
	MakeName	(0x4db,	"XXX_ADD_WITH_CARRY");
	MakeCode	(0x4db);
	MakeName	(0x4e0,	"UNKNOWN_SYS_REG_ADDR");
	MakeCode	(x=0x4e0);
	OpEnum		(x,	1,	GetEnum("SYS_REGS"));
	MakeCode	(0x4e6);
	MakeCode	(x=0x4e7);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(0x4f2);
	MakeCode	(x=0x4f4);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(0x4ff);
	MakeCode	(x=0x502);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeName	(0x508,	"DI_sub_0508");
	MakeCode	(0x508);
	MakeCode	(x=0x50a);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeName	(0x50d,	"SOME_TAIL");
	MakeCode	(x=0x50d);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeName	(0x514,	"BUS_READ8_STH");
	MakeCode	(0x514);
	MakeName	(0x51a,	"BUS_WRITE8_STH");
	MakeCode	(0x51a);
	MakeName	(0x520,	"CALCULATE_BUS_IO_STH");
	MakeCode	(0x520);
	MakeName	(0x52d,	"CLOSE_BUS_WINDOW");
	MakeCode	(0x52d);
	MakeName	(0x533,	"OPEN_BUS_WINDOW");
	MakeCode	(x=0x546);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0x550);
	MakeCode	(0x567);
	MakeCode	(0x57e);
	MakeComm	(0x581,	"FALLTHROUGH");
	MakeComm	(0x585,	"FALLTHROUGH");
	MakeCode	(0x58e);
	MakeComm	(0x595,	"FALLTHROUGH");
	MakeCode	(x=0x59d);
	OpStroff	(x,	0,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x5a1);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x5a4);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeName	(0x5ac,	"orphan_sub_5AC");
	MakeCode	(0x5ac);
	MakeCode	(x=0x5b2);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x5b5);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x5b8);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x5bb);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x5be);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x5c8);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x5cb);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x5cf);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x5d2);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x5d7);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x5da);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x5de);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x5e4);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x5ed);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x5f2);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeName	(0x5f7,	"INIT_PIT1");
	MakeCode	(0x5f7);
	MakeCode	(x=0x5f9);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeCode	(x=0x5fd);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeCode	(x=0x601);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeCode	(x=0x604);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x607);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x619);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x61f);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x622);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x625);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x62d);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(0x638);
	MakeCode	(x=0x63a);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0x641);
	MakeName	(0x65f,	"SIO_L1H_sub_065F");
	MakeCode	(x=0x65f);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x666);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x674);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x67f);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x68c);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeWord	(x=0x69d);
	MakeArray	(x,	8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0x6ad);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x6b1);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x6bf);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x6c8);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x6db);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x6e3);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x6ee);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeName	(0x6f3,	"SIO0_sub_06F3");
	MakeCode	(0x6f3);
	MakeCode	(x=0x702);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x706);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeName	(0x70b,	"SIO0_sub_070B");
	MakeCode	(0x70b);
	MakeCode	(x=0x70e);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x725);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x746);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeRptCmt	(0x74d,	"SIO 0 - Channel A control for serial port 3");
	MakeCode	(x=0x750);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x754);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x758);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x76a);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(0x771);
	MakeCode	(x=0x780);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x787);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeRptCmt	(0x78a,	"SIO 0 - Channel A control for serial port 3");
	MakeCode	(x=0x796);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeCode	(x=0x7a0);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x7a8);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x7b3);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(0x7bc);
	MakeCode	(x=0x7be);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeCode	(x=0x7c0);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x7c6);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x7d3);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeName	(0x7e6,	"SIO0_sub_07E6");
	MakeCode	(0x7e6);
	MakeCode	(0x7f0);
	MakeCode	(x=0x7f3);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x7ff);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeName	(0x806,	"nullsub_5");
	MakeCode	(0x806);
	MakeName	(0x807,	"SIO_sub_0807");
	MakeCode	(0x807);
	MakeCode	(x=0x808);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x80c);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x816);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x81a);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x81e);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x82b);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x83d);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x84e);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x85e);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeName	(0x86b,	"XINTH_sub_086B");
	MakeCode	(0x86b);
	MakeCode	(x=0x86c);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x875);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeCode	(x=0x877);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x881);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x88d);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x893);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x89a);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x89c);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x89f);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeName	(0x8a9,	"INTH_sub_08A9");
	MakeCode	(0x8a9);
	MakeCode	(x=0x8aa);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeRptCmt	(0x8ad,	"DMA - All read and write registers");
	MakeCode	(x=0x8be);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x8d1);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x8d9);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x8e0);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x8e4);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x8e8);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x8f1);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(0x8fa);
	MakeCode	(x=0x903);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x90a);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x913);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeName	(0x918,	"SIO0_sub_0918");
	MakeCode	(x=0x918);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x920);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x925);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x92d,	"DMA_sub_092D");
	MakeCode	(0x92d);
	MakeCode	(x=0x92e);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeRptCmt	(0x931,	"DMA - All read and write registers");
	MakeName	(0x947,	"ARR_5_DMA_ALL");
	MakeByte	(0x947);
	MakeArray	(0x947,	5);
	MakeName	(0x94c,	"ARR_3_OR_5_VAL");
	MakeByte	(0x94c);
	MakeArray	(0x94c,	5);
	MakeName	(0x951,	"DMA_ALL_3");
	MakeByte	(0x951);
	MakeArray	(0x951,	3);
	MakeName	(0x954,	"ARR_7_VAL_29");
	MakeByte	(0x954);
	MakeArray	(0x954,	7);
	MakeName	(0x95b,	"SIO0_CHAN_A_CONTROL_VALS");
	MakeByte	(0x95b);
	MakeArray	(0x95b,	8);
	MakeName	(0x963,	"ARR_6_VAL");
	MakeByte	(0x963);
	MakeArray	(0x963,	6);
	MakeCode	(x=0x969);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x970);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x97e);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x982);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(0x987);
	MakeCode	(x=0x996);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x9aa);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x9ae);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x9b2);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(0x9b7);
	MakeCode	(x=0x9cb);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x9d2);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x9d5);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x9de);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x9e1);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x9ed);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x9f9);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeName	(0xa08,	"orphan_sub_A08");
	MakeCode	(x=0xa08);
	OpDecimal	(x,	1);
	MakeCode	(x=0xa0b);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeName	(0xa16,	"SIO0_CHANA_CTL_STH");
	MakeCode	(0xa16);
	MakeCode	(x=0xa18);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeName	(0xa1b,	"DMA_ALL_STH");
	MakeCode	(0xa1b);
	MakeCode	(x=0xa1d);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeName	(0xa20,	"DELAY_A_BIT");
	MakeCode	(0xa20);
	MakeName	(0xa26,	"HANDLER02_SIO_sub_0A26");
	MakeCode	(x=0xa26);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0xa2a);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0xa30,	"HANDLER03_SIO_sub_0A30");
	MakeCode	(x=0xa30);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0xa34);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0xa3a,	"HANDLER04_SIO_sub_0A3A");
	MakeCode	(x=0xa3a);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0xa3e);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0xa44,	"HANDLER05_SIO_sub_0A44");
	MakeCode	(x=0xa44);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0xa48);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0xa4e,	"HANDLER06_SIO_sub_0A4E");
	MakeCode	(x=0xa4e);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0xa52);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0xa58,	"HANDLER07_SIO_sub_0A58");
	MakeCode	(x=0xa58);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0xa5c);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0xa60,	"HANDLER_SIO_L0_COMMON");
	MakeCode	(x=0xa60);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xa72);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0xa82);
	MakeCode	(x=0xa95);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0xa99);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0xa9c);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0xaa9);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xab7);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0xabb);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0xac8);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0xad6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0xae1);
	MakeCode	(x=0xae2);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xae5);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xaef);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0xaf8);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xafe);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xb04);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeName	(0xb20,	"V_SIO_L0_off_0B20");
	MakeWord	(x=0xb20);
	MakeArray	(x,	16);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0xb40,	"SIO_sub_0B40");
	MakeCode	(x=0xb40);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xb47);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xb4a);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xb51);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0xb59);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xb5d);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0xb62);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0xb65);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeWord	(x=0xb72);
	MakeArray	(x,	8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0xb82);
	MakeArray	(x,	16);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0xba2,	"XH_sub_0BA2");
	MakeCode	(0xba2);
	MakeCode	(x=0xba4);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(0xbd0);
	MakeCode	(x=0xbe1);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xbe9);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0xbf6);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(0xc05);
	MakeCode	(0xc0b);
	MakeName	(0xc26,	"XH_sub_0C26");
	MakeCode	(0xc26);
	MakeCode	(x=0xc35);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeComm	(0xc48,	"recurse");
	MakeName	(0xc4a,	"SIO_sub_0C4A");
	MakeCode	(x=0xc4c);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeName	(0xc72,	"XH_sub_0C72");
	MakeCode	(x=0xc72);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xc88);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xc8b);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeName	(0xc96,	"SIO_L1H_sub_0C96");
	MakeCode	(0xc96);
	MakeCode	(x=0xcbe);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xcc2);
	OpStroff	(x,	0,	GetStrucIdByName("IX_STRUCT"));
	MakeName	(0xcea,	"SIO_L1H_nullsub_2");
	MakeCode	(0xcea);
	MakeName	(0xceb,	"SIO_L1H_sub_0CEB");
	MakeCode	(0xceb);
	MakeName	(0xcee,	"SIO_L1H_sub_0CEE");
	MakeCode	(0xcee);
	MakeCode	(x=0xcf0);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeName	(0xd0c,	"SIO_L1H_sub_0D0C");
	MakeCode	(0xd0c);
	MakeCode	(x=0xd0f);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xd12);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeName	(0xd28,	"SIO_L1H_sub_0D28");
	MakeCode	(x=0xd28);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(0xd3e);
	MakeName	(0xd46,	"SIO_L1_sub_0D46");
	MakeCode	(0xd46);
	MakeName	(0xd4c,	"SIO_L1H_sub_0D4C");
	MakeCode	(x=0xd4c);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0xd57);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0xd6f);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0xd76);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xd7f);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xd8a);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0xda7);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xdb1);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xdb7);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xdba);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeName	(0xdd6,	"SIO_L1_sub_0DD6");
	MakeName	(0xddc,	"SIO_L1H_sub_0DDC");
	MakeCode	(0xddc);
	MakeName	(0xde3,	"SIO_L1H_sub_0DE3");
	MakeCode	(0xde3);
	MakeCode	(x=0xde5);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeName	(0xdec,	"SIO_L1H_sub_0DEC");
	MakeCode	(x=0xdec);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0xdf1);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xdf8);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeName	(0xe27,	"SIO_sub_0E27");
	MakeCode	(0xe27);
	MakeCode	(x=0xe29);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0xe2f);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xe32);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xe35);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeName	(0xe3d,	"SIO_L1_sub_0E3D");
	MakeCode	(0xe3d);
	MakeCode	(x=0xe3f);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(0xe5b);
	MakeCode	(x=0xe5d);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0xe7c);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(0xe87);
	MakeCode	(x=0xe8d);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0xe96);
	OpDecimal	(x,	1);
	MakeCode	(x=0xe9c);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0xea5);
	OpDecimal	(x,	1);
	MakeCode	(x=0xeab);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0xeb4);
	OpDecimal	(x,	1);
	MakeCode	(x=0xeba);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeName	(0xec3,	"SIO_L1H_sub_0EC3");
	MakeCode	(x=0xec3);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0xeca);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xedd);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0xeeb);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xef0);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeName	(0xf22,	"SIO_L1H_sub_0F22");
	MakeCode	(x=0xf22);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeName	(0xf2e,	"SIO_L1H_sub_0F2E");
	MakeCode	(0xf2e);
	MakeName	(0xf32,	"SIO_L1H_sub_0F32");
	MakeCode	(0xf32);
	MakeCode	(x=0xf34);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeName	(0xf51,	"YH_nullsub_3");
	MakeCode	(0xf51);
	MakeName	(0xf52,	"YH_sub_0F52");
	MakeCode	(0xf52);
	MakeCode	(x=0xf5a);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xf65);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeName	(0xf85,	"YH_sub_0F85");
	MakeCode	(0xf85);
	MakeCode	(0xfa0);
	MakeCode	(x=0xfac);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xfb4);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0xfc1);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(0xfd0);
	MakeName	(0xfd6,	"YH_sub_0FD6");
	MakeCode	(0xfd6);
	MakeCode	(x=0xfdb);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xfe3);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0xff2);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeName	(0x100b,	"YH_sub_100B");
	MakeCode	(0x100b);
	MakeName	(0x1014,	"YH_sub_1014");
	MakeCode	(x=0x1014);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x1017);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(0x1023);
	MakeCode	(x=0x1031);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(0x1046);
	MakeCode	(0x105e);
	MakeCode	(x=0x1068);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeName	(0x106f,	"JUST_RETURN_SH");
	MakeCode	(0x106f);
	MakeName	(0x1070,	"JINTH_sub_1070");
	MakeCode	(x=0x1070);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x107d);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x1084);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeWord	(x=0x108f);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0x1091);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0x1093);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0x1095);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0x1097,	"FH_JUMP_SLOT5_sub_1097");
	MakeCode	(x=0x1097);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x109e);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x10a4);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x10aa);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x10ae);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(0x10b3);
	MakeCode	(x=0x10bf);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x10c3);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x10c6);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x10cc);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x10d0);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x10eb);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeName	(0x10f3,	"FH_JUMP_SLOT3_sub_10F3");
	MakeCode	(x=0x10f3);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x1105);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x1121);
	OpStroff	(x,	0,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x1125);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeName	(0x1133,	"FH_JUMP_SLOT4_sub_1133");
	MakeCode	(0x1133);
	MakeCode	(x=0x1144);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x1149);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(x=0x1165);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeName	(0x116e,	"FH_JUMP_SLOT2_sub_116E");
	MakeCode	(x=0x116e);
	OpStroff	(x,	1,	GetStrucIdByName("IY_STRUCT"));
	MakeCode	(0x1193);
	MakeCode	(x=0x1194);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeName	(0x11ac,	"MONITOR_SPACES");
	MakeStr		(0x11ac,	0x11b1);
	MakeName	(0x11b1,	"MONITOR_ARR_5_byte_11B1");
	MakeByte	(0x11b1);
	MakeArray	(0x11b1,	5);
	MakeName	(0x11b6,	"MONITOR_ARR_5_byte_11B6");
	MakeByte	(0x11b6);
	MakeArray	(0x11b6,	5);
	MakeName	(0x11bb,	"MONITOR_BANNER");
	MakeStr		(0x11bb,	0x11e1);
	MakeName	(0x11e1,	"MONITOR_Z80");
	MakeStr		(0x11e1,	0x11e7);
	MakeName	(0x11e7,	"MONITOR_CONT");
	MakeStr		(0x11e7,	0x11ed);
	MakeName	(0x11ed,	"MONITOR_ENTRY");
	MakeCode	(x=0x11ed);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x11f1);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x1202);
	OpEnum		(x,	1,	GetEnum("SYS_REGS"));
	MakeCode	(x=0x1210);
	OpBinary	(x,	0);
	MakeCode	(x=0x1213);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x121b);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x122b);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x1245);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x1253,	"MONITOR_PROMPT");
	MakeCode	(x=0x1253);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x1259);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0x1288);
	MakeName	(0x12a7,	"MONITOR_sub_12A7");
	MakeCode	(0x12a7);
	MakeName	(0x12d8,	"MONITOR_PUTCHAR");
	MakeCode	(0x12d8);
	MakeCode	(x=0x12dc);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x12ee);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeCode	(x=0x12f6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x12ff);
	OpEnum		(x,	1,	GetEnum("SYS_REGS"));
	MakeName	(0x1310,	"MONITOR_sub_1310");
	MakeCode	(0x1310);
	MakeCode	(x=0x1314);
	OpStroff	(x,	1,	GetStrucIdByName("IX_STRUCT"));
	MakeName	(0x1322,	"MONITOR_sub_1322");
	MakeCode	(0x1322);
	MakeName	(0x1354,	"MONITOR_PUTS");
	MakeCode	(0x1354);
	MakeName	(0x135f,	"MONITOR_sub_135F");
	MakeCode	(x=0x135f);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0x137a);
	MakeCode	(0x13c2);
	MakeCode	(0x13dd);
	MakeName	(0x13ec,	"MONITOR_sub_13EC");
	MakeCode	(0x13ec);
	MakeName	(0x1408,	"MONITOR_sub_1408");
	MakeCode	(0x1408);
	MakeName	(0x140f,	"MONITOR_ILLEGAL_INPUT");
	MakeCode	(x=0x140f);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x1416,	"MONITOR_ILLEGAL_MESSAGE");
	MakeStr		(0x1416,	0x1429);
	MakeCode	(0x1429);
	MakeName	(0x1433,	"MONITOR_sub_1433");
	MakeCode	(0x1433);
	MakeName	(0x143c,	"MONITOR_sub_143C");
	MakeCode	(0x143c);
	MakeName	(0x1445,	"MONITOR_PRINT_STH");
	MakeCode	(x=0x1445);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x1451);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x1477);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x147e,	"MONITOR_HEX_NUMBER");
	MakeCode	(0x147e);
	MakeName	(0x148d,	"MONITOR_sub_148D");
	MakeCode	(0x148d);
	MakeCode	(0x1499);
	MakeName	(0x14a1,	"MONITOR_sub_14A1");
	MakeCode	(0x14a1);
	MakeName	(0x14b5,	"MONITOR_TOP_DIGIT");
	MakeCode	(0x14b5);
	MakeName	(0x14b9,	"MONITOR_HEX_DIGIT");
	MakeCode	(x=0x14bb);
	OpChr		(x,	1);
	MakeCode	(x=0x14bd);
	OpChr		(x,	1);
	MakeCode	(x=0x14c0);
	OpDecimal	(x,	1);
	MakeName	(0x14c3,	"MONITOR_sub_14C3");
	MakeCode	(0x14c3);
	MakeCode	(x=0x14cf);
	OpChr		(x,	1);
	MakeCode	(x=0x14d2);
	OpChr		(x,	1);
	MakeCode	(x=0x14d5);
	OpChr		(x,	1);
	MakeCode	(x=0x14d8);
	OpChr		(x,	1);
	MakeName	(0x14ec,	"MONITOR_sub_14EC");
	MakeCode	(x=0x14ec);
	OpChr		(x,	1);
	MakeCode	(x=0x14f0);
	OpChr		(x,	1);
	MakeCode	(x=0x14f3);
	OpChr		(x,	1);
	MakeCode	(x=0x14f7);
	OpChr		(x,	1);
	MakeName	(0x14fc,	"MONITOR_sub_14FC");
	MakeCode	(0x14fc);
	MakeCode	(x=0x1502);
	OpChr		(x,	1);
	MakeCode	(x=0x1506);
	OpChr		(x,	1);
	MakeCode	(x=0x150a);
	OpChr		(x,	1);
	MakeCode	(x=0x150e);
	OpChr		(x,	1);
	MakeName	(0x1518,	"orphan_sub_1518");
	MakeCode	(0x1518);
	MakeCode	(x=0x1537);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x1547,	"HANDLER08_FDC_sub_1547");
	MakeCode	(x=0x1547);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x1557);
	OpHex		(x,	1);
	MakeCode	(x=0x1568);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x156a);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeComm	(0x156c,	"Seek");
	MakeCode	(0x157d);
	MakeCode	(x=0x15a0);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x15a2);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeComm	(0x15a4,	"Seek");
	MakeComm	(0x15e4,	"---- 0x01 ----");
	MakeComm	(0x15e8,	"---- 0x02 ---- <========");
	MakeRptCmt	(0x15ec,	"---- 0x04 ----");
	MakeCode	(0x15f2);
	MakeCode	(x=0x1608);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x1613);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeRptCmt	(0x161c,	"<==== |= 0x02");
	MakeCode	(0x162d);
	MakeCode	(x=0x1632);
	OpDecimal	(x,	1);
	MakeCode	(x=0x1638);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x1643);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x1649);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x164c);
	OpDecimal	(x,	1);
	MakeCode	(x=0x1651);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x1654);
	OpDecimal	(x,	1);
	MakeCode	(x=0x165c);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x166c);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x1683);
	OpStroff	(x,	1,	GetStrucIdByName("FDC_IY_PARAMS"));
	MakeCode	(x=0x1687);
	OpStroff	(x,	1,	GetStrucIdByName("FDC_IY_PARAMS"));
	MakeCode	(x=0x168d);
	OpStroff	(x,	0,	GetStrucIdByName("FDC_IY_PARAMS"));
	MakeName	(0x169b,	"GO_OUT");
	MakeCode	(x=0x169b);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x16a6,	"FDC_PICK_HANDLER_FROM_VECTOR");
	MakeCode	(0x16a6);
	MakeCode	(x=0x16ab);
	OpBinary	(x,	1);
	MakeCode	(x=0x16af);
	OpBinary	(x,	1);
	MakeName	(0x16b1,	"A_IS_VALID_COMMAND");
	MakeCode	(x=0x16bc);
	OpBinary	(x,	1);
	MakeCode	(x=0x16be);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0x16c8,	"FALLTHRU");
	MakeName	(0x16cb,	"FDC_HANDLER_TAIL");
	MakeCode	(x=0x16cc);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x16d6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x16dc,	"CALL_FDC_HANDLER");
	MakeCode	(0x16dc);
	MakeComm	(0x16e0,	"Call the handler");
	MakeName	(0x16e1,	"FDC_SUBHANDLER_VECTOR");
	MakeWord	(x=0x16e1);
	MakeArray	(x,	8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0x16f1,	"FDC_SUBHANDLER00_07_NOTHING");
	MakeCode	(0x16f1);
	MakeName	(0x16f8,	"FDC_SUBHANDLER01_SEEK");
	MakeCode	(0x16f8);
	MakeName	(0x1705,	"FDC_SUBHANDLER02_READ_SECTOR");
	MakeCode	(0x1705);
	MakeCode	(x=0x1711);
	OpDecimal	(x,	1);
	MakeName	(0x1725,	"FDC_SUBHANDLER03_WRITE_SECTOR");
	MakeCode	(0x1725);
	MakeCode	(x=0x1731);
	OpDecimal	(x,	1);
	MakeName	(0x1745,	"FDC_SUBHANDLER04_CHECK_IS_ZERO");
	MakeCode	(0x1745);
	MakeName	(0x1747,	"FDC_SUBHANDLER05_READ_TRACK");
	MakeCode	(0x1747);
	MakeCode	(x=0x1753);
	OpDecimal	(x,	1);
	MakeName	(0x1764,	"FDC_SUBHANDLER06_WRITE_TRACK");
	MakeCode	(0x1764);
	MakeCode	(x=0x1770);
	OpDecimal	(x,	1);
	MakeName	(0x1781,	"FDC_ERROR_COMMON_sub_1781");
	MakeCode	(0x1781);
	MakeName	(0x178c,	"FDC_COMMON_HANDLER");
	MakeCode	(0x178c);
	MakeCode	(x=0x1795);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x17a0);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x17a2);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeComm	(0x17a4,	"Seek with head load");
	MakeName	(0x17ab,	"LOOP_AROUND_FOR_A_WHILE");
	MakeCode	(x=0x17df);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x17e1);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeComm	(0x17e3,	"Seek with head load");
	MakeRptCmt	(0x17f3,	"de=FDC_IX_STRUCT");
	MakeComm	(0x17f4,	"ix=FDC_IX_STRUCT");
	MakeCode	(x=0x17fa);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0x1802,	"Restore (seek zero) with head load");
	MakeCode	(x=0x180a);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x1813,	"FDC_SEEK_AND_LOAD_HEAD");
	MakeCode	(0x1813);
	MakeCode	(x=0x1816);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x1820);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeCode	(x=0x182a);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeComm	(0x182c,	"Seek with head load");
	MakeCode	(x=0x1832);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeName	(0x1836,	"FDC_ADJUST_TRACK_NUM");
	MakeCode	(x=0x1836);
	OpStroff	(x,	1,	GetStrucIdByName("FDC_IX_STRUCT"));
	MakeRptCmt	(0x183b,	"Double spacing?");
	MakeName	(0x183d,	"FDC_READ_SECTOR_DMA_sub_183D");
	MakeCode	(0x183d);
	MakeCode	(x=0x1840);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x1845);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x1857);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeComm	(0x1859,	"Read sector, sector size = 512");
	MakeComm	(0x185e,	"1001 1100 -- error bits");
	MakeCode	(x=0x185e);
	OpBinary	(x,	1);
	MakeName	(0x1864,	"FDC_WRITE_SECTOR_DMA_sub_1864");
	MakeCode	(0x1864);
	MakeCode	(x=0x1867);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x186c);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x187e);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeComm	(0x1880,	"Write sector, sector size = 512");
	MakeComm	(0x1885,	"error bits");
	MakeCode	(x=0x1885);
	OpBinary	(x,	1);
	MakeName	(0x188b,	"FDC_WRITE_BUS");
	MakeCode	(0x188b);
	MakeName	(0x1893,	"FDC_READ_BUS");
	MakeCode	(0x1893);
	MakeName	(0x189b,	"FDC_READ_LEN_AND_STH_FROM_BUF_sub_189B");
	MakeCode	(x=0x189b);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x18a4);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x18a7);
	OpStroff	(x,	1,	GetStrucIdByName("FDC_IX_STRUCT"));
	MakeCode	(x=0x18aa);
	OpStroff	(x,	1,	GetStrucIdByName("FDC_IX_STRUCT"));
	MakeName	(0x18ae,	"FDC_READ_TRACK");
	MakeCode	(0x18ae);
	MakeRptCmt	(0x18b2,	"Read track");
	MakeCode	(x=0x18b4);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeName	(0x18b6,	"WAIT_FOR_INTRQ");
	MakeCode	(x=0x18c2);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeComm	(0x18c4,	"Error bits");
	MakeName	(0x18c9,	"FDC_WRITE_TRACK");
	MakeCode	(0x18c9);
	MakeRptCmt	(0x18cd,	"Write track");
	MakeCode	(x=0x18cf);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeCode	(x=0x18dd);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeComm	(0x18df,	"Error bits");
	MakeName	(0x18e4,	"orphan_sub_18E4");
	MakeCode	(0x18e4);
	MakeCode	(x=0x18eb);
	OpStroff	(x,	1,	GetStrucIdByName("FDC_IX_STRUCT"));
	MakeCode	(x=0x18ee);
	OpStroff	(x,	1,	GetStrucIdByName("FDC_IX_STRUCT"));
	MakeRptCmt	(0x18f1,	"FALLTHROUGH");
	MakeName	(0x18f2,	"orphan_sub_18F2");
	MakeCode	(x=0x18f2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x190d,	"FDC_RUN_CMD_WITH_BITS");
	MakeCode	(0x190d);
	MakeCode	(x=0x190e);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeRptCmt	(0x1912,	"FALL_THROUGH");
	MakeName	(0x1913,	"FDC_RUN_CMD");
	MakeCode	(x=0x1913);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeCode	(x=0x1920);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeName	(0x1923,	"FDC_SECTOR_IO_ERROR");
	MakeCode	(0x1923);
	MakeCode	(x=0x1928);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x1930,	"FDC_sub_1930");
	MakeCode	(0x1930);
	MakeName	(0x193b,	"orphan_sub_193B");
	MakeCode	(0x193b);
	MakeName	(0x1946,	"orphan_sub_1946");
	MakeCode	(0x1946);
	MakeName	(0x1957,	"FDC_sub_1957");
	MakeCode	(0x1957);
	MakeName	(0x1969,	"FDC_sub_1969");
	MakeCode	(0x1969);
	MakeName	(0x1971,	"FDC_sub_1971");
	MakeCode	(0x1971);
	MakeName	(0x1978,	"FDC_sub_1978");
	MakeCode	(0x1978);
	MakeCode	(x=0x1983);
	OpStroff	(x,	1,	GetStrucIdByName("FDC_IY_PARAMS"));
	MakeCode	(x=0x1986);
	OpStroff	(x,	1,	GetStrucIdByName("FDC_IY_PARAMS"));
	MakeCode	(x=0x198d);
	OpStroff	(x,	1,	GetStrucIdByName("FDC_IY_PARAMS"));
	MakeCode	(x=0x1993);
	OpStroff	(x,	1,	GetStrucIdByName("FDC_IY_PARAMS"));
	MakeCode	(x=0x1999);
	OpStroff	(x,	1,	GetStrucIdByName("FDC_IY_PARAMS"));
	MakeCode	(x=0x199c);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x19a5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x19ae);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x19b5,	"FDC_COMMON_SETUP_SECTOR_DMA");
	MakeCode	(x=0x19b5);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x19ba);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x19be);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x19c1);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x19c7);
	OpStroff	(x,	1,	GetStrucIdByName("FDC_IX_STRUCT"));
	MakeCode	(x=0x19ca);
	OpStroff	(x,	1,	GetStrucIdByName("FDC_IX_STRUCT"));
	MakeCode	(x=0x19d2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x19d7);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeName	(0x19dc,	"FDC_DMA_READ_TRACK");
	MakeCode	(x=0x19dc);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x19e1);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeRptCmt	(0x19f1,	"The destination buffer");
	MakeRptCmt	(0x19f2,	"In the 0x8000 range -- host memory");
	MakeRptCmt	(0x19f4,	"Set DMA address");
	MakeRptCmt	(0x19fa,	"Set DMA length -- always 0xffff");
	MakeCode	(x=0x19fe);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x1a03);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeName	(0x1a08,	"FDC_DMA_WRITE_TRACK");
	MakeCode	(x=0x1a08);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x1a0d);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeRptCmt	(0x1a22,	"DMA length = 0xffff");
	MakeCode	(x=0x1a28);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x1a2d);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeName	(0x1a32,	"DMA_BEGIN_SETUP");
	MakeRptCmt	(0x1a32,	"0xc3 Group 6 DMA Reset\n0x14 Group 1 Port A: Memory, Incrementing\n0x28 Group 2 Port B: I/O, Fixed\n0x92 Group 5 DMA Parameters\n0x79 Group 0 Port B -> Port A");
	MakeByte	(0x1a32);
	MakeArray	(0x1a32,	5);
	MakeName	(0x1a37,	"DMA_FLOPPY_ADDRESS");
	MakeRptCmt	(0x1a37,	"0x85 Group 4 DMA Port B Address:\n0x3b           FDC Data Register\n0xcf Group 6 Load Addresses, Reset Count");
	MakeByte	(0x1a37);
	MakeArray	(0x1a37,	3);
	MakeName	(0x1a3a,	"DMA_FROM_MEMORY");
	MakeRptCmt	(0x1a3a,	"0x05 Group 5 Port A -> Port B transfer\n0xcf Group 6 Load Addresses, Reset Count");
	MakeByte	(0x1a3a);
	MakeArray	(0x1a3a,	2);
	MakeName	(0x1a3c,	"DMA_ENABLE");
	MakeRptCmt	(0x1a3c,	"0x87 Group 6 DMA Enable");
	MakeByte	(0x1a3c);
	MakeName	(0x1a3d,	"HANDLER00_sub_1A3D");
	MakeCode	(0x1a3d);
	MakeCode	(x=0x1a40);
	OpEnum		(x,	1,	GetEnum("SYS_REGS"));
	MakeCode	(x=0x1a48);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeRptCmt	(0x1a4d,	"Wait for next command");
	MakeRptCmt	(0x1a4f,	"New command found!\nTake a note of this command.");
	MakeCode	(x=0x1a50);
	OpEnum		(x,	1,	GetEnum("SYS_REGS"));
	MakeCode	(x=0x1a62);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0x1a89);
	MakeByte	(0x1aa9);
	MakeArray	(0x1aa9,	12);
	MakeWord	(0x1ab5);
	MakeWord	(x=0x1ab7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0x1ab9,	"orphan_sub_1AB9");
	MakeCode	(0x1ab9);
	MakeCode	(x=0x1ac6);
	OpEnum		(x,	1,	GetEnum("SYS_REGS"));
	MakeName	(0x1ad2,	"DO_PIO_A_GET_BIT6");
	MakeCode	(0x1ad2);
	MakeName	(0x1ad7,	"HANDLER09_RTC_sub_1AD7");
	MakeCode	(0x1ad7);
	MakeCode	(x=0x1ada);
	OpEnum		(x,	1,	GetEnum("SYS_REGS"));
	MakeCode	(x=0x1adf);
	OpDecimal	(x,	1);
	MakeCode	(x=0x1aff);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeCode	(x=0x1b03);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeCode	(x=0x1b07);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeCode	(x=0x1b0b);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeCode	(x=0x1b0f);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeCode	(x=0x1b13);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeCode	(x=0x1b17);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeCode	(x=0x1b1b);
	OpEnum		(x,	0,	GetEnum("PORTS"));
	OpHex		(x,	1);
	MakeCode	(x=0x1b21);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x1b2b);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x1b2e);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x1b38);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x1b3b);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x1b45);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x1b48);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x1b52);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x1b55);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x1b5f);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x1b62);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x1b6c);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x1b6f);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x1b79);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeCode	(x=0x1b7c);
	OpHex		(x,	0);
	OpEnum		(x,	1,	GetEnum("PORTS"));
	MakeName	(0x1b9e,	"HANDLER01_SYS_COMMAND");
	MakeCode	(0x1b9e);
	MakeCode	(x=0x1ba1);
	OpEnum		(x,	1,	GetEnum("SYS_REGS"));
	MakeCode	(x=0x1bb0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x1bbc);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0x1bc7);
	MakeCode	(x=0x1bcc);
	OpEnum		(x,	1,	GetEnum("SYS_REGS"));
	MakeCode	(x=0x1bd7);
	OpEnum		(x,	1,	GetEnum("SYS_REGS"));
	MakeName	(0x1bf0,	"HANDLER01_unk_1BF0");
	MakeCode	(0x1bf0);
	MakeName	(0x1bfe,	"IX_stru_1BFE");
	MakeCode	(0x1bfe);
	MakeName	(0x1c0b,	"IX_stru_1C0B");
	MakeName	(0x1c18,	"IX_stru_1C18");
	MakeName	(0x1c25,	"IX_stru_1C25");
	MakeName	(0x1c32,	"IX_stru_1C32");
	MakeName	(0x1c3f,	"IX_stru_1C3F");
	MakeCode	(x=0x1c44);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0x1c45);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0x1c46);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0x1c4c,	"STH_INT_RELATED_PERHAPS");
	MakeCode	(x=0x1c4c);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0x1c59);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x1c72,	"DO_INT_HANDLER");
	MakeCode	(0x1c72);
	MakeCode	(x=0x1c7d);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x1c9a,	"INT_sub_1C9A");
	MakeCode	(0x1c9a);
	MakeCode	(x=0x1cae);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeName	(0x1cb4,	"INT_RET_sub_1CB4");
	MakeCode	(0x1cb4);
	MakeWord	(x=0x1cb7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0x1cb9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0x1cbb);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0x1cbd);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0x1cbf);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0x1cc1);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0x1cc3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0x1cc5);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0x1cc7);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0x1cc9);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0x1ccb);
	MakeByte	(0x1ccd);
	MakeByte	(0x1cce);
	MakeArray	(0x1cce,	4);
	MakeByte	(0x1cd2);
	MakeArray	(0x1cd2,	7);
	MakeByte	(0x1cd9);
	MakeArray	(0x1cd9,	807);
	MakeName	(0x2000,	"SRAM_JUMP_SLOT1");
	MakeName	(0x2003,	"SRAM_JUMP_SLOT2");
	MakeName	(0x2006,	"SRAM_JUMP_SLOT3");
	MakeName	(0x2009,	"SRAM_JUMP_SLOT4");
	MakeName	(0x200c,	"SRAM_JUMP_SLOT5");
	MakeName	(0x200f,	"CCB_PTR");
	MakeByte	(0x200f);
	MakeArray	(0x200f,	3);
	MakeName	(0x201c,	"DATA_BUFFER");
	MakeRptCmt	(0x201c,	"Used as FDC sector buffer, perhaps elsewhere");
	MakeByte	(0x201c);
	MakeArray	(0x201c,	512);
	MakeName	(0x2260,	"XXX_word_2260");
	MakeWord	(0x2260);
	MakeName	(0x2262,	"_00_FROM_BEGINNING");
	MakeByte	(0x2262);
	MakeName	(0x2263,	"_00_FROM_BEGINNING_1");
	MakeWord	(0x2263);
	MakeWord	(0x2266);
	MakeName	(0x22ea,	"FLOPPY_PARAMS_0");
	MakeName	(0x2324,	"FDC_ARR_16_byte_2324");
	MakeName	(0x2550,	"FF_FROM_BEGINNING");
	MakeRptCmt	(0x2550,	"NMI handler puts FF here first");
	MakeByte	(0x2550);
	MakeByte	(0x2551);
	MakeWord	(0x2554);
	MakeName	(0x2568,	"IY_CH0_stru_2568");
	MakeName	(0x2596,	"IY_CH1_stru_2596");
	MakeName	(0x25c4,	"IY_CH2_stru_25C4");
	MakeName	(0x25f2,	"IY_CH3_stru_25F2");
	MakeName	(0x2620,	"IY_CH4_stru_2620");
	MakeName	(0x264e,	"IY_CH5_stru_264E");
	MakeName	(0x267c,	"FDC_COMMAND_BITS_ALSO");
	MakeByte	(0x267c);
	MakeName	(0x267d,	"FDC_DRIVE_OR_WHAT");
	MakeByte	(0x267d);
	MakeName	(0x2680,	"FDC_HANDLER_ADDRESS");
	MakeRptCmt	(0x2680,	"Handler address");
	MakeWord	(0x2680);
	MakeName	(0x2682,	"FDC_SUBCOMMAND");
	MakeByte	(0x2682);
	MakeName	(0x2683,	"FDC_ZERO");
	MakeByte	(0x2683);
	MakeName	(0x2684,	"FDC_SOME_BUS_BUF3");
	MakeByte	(0x2684);
	MakeArray	(0x2684,	3);
	MakeName	(0x2687,	"FDC_byte_2687");
	MakeRptCmt	(0x2687,	"Written on error");
	MakeByte	(0x2687);
	MakeName	(0x2688,	"FDC_COMMAND_BITS");
	MakeRptCmt	(0x2688,	"Some bits to OR with command. (Seen 0x2 = r1)");
	MakeByte	(0x2688);
	MakeName	(0x2689,	"FDC_07D0_word_2689");
	MakeWord	(0x2689);
	MakeName	(0x268b,	"FDC_byte_268B");
	MakeByte	(0x268b);
	MakeName	(0x268c,	"FDC_SUB_COMMAND_RETRY");
	ExtLinA		(0x268c,	0,	"--------------------------------------");
	ExtLinA		(0x268c,	1,	"Floppy subcommand buffer (queue entry)");
	MakeByte	(0x268c);
	MakeName	(0x268d,	"FDC_SUBC_STATUS");
	MakeByte	(0x268d);
	MakeName	(0x268e,	"FDC_SUBC_DRIVE_NUM");
	MakeByte	(0x268e);
	MakeName	(0x268f,	"FDC_SUBC_TRACK");
	MakeByte	(0x268f);
	MakeName	(0x2690,	"FDC_SUBC_SIDE");
	MakeByte	(0x2690);
	MakeName	(0x2691,	"FDC_SUBC_SECTOR");
	MakeByte	(0x2691);
	MakeName	(0x2692,	"FDC_SUBC_BUF_LO");
	MakeWord	(0x2692);
	MakeName	(0x2694,	"FDC_SUBC_BUF_HI");
	ExtLinB		(0x2694,	0,	"--------------------------------------");
	ExtLinB		(0x2694,	1,	"");
	MakeByte	(0x2694);
	MakeName	(0x2696,	"ADDRESS_LATCH_SET_VALUE");
	MakeByte	(0x2696);
	MakeName	(0x2697,	"LAST_CMD_COUNTER");
	MakeByte	(0x2698);
	MakeWord	(0x26cf);
	MakeWord	(0x26d1);
	MakeWord	(0x26d3);
	MakeName	(0x26d5,	"_00_FROM_BEGINNING_0");
	MakeByte	(0x26d5);
	MakeByte	(0x26d6);
	MakeName	(0x26d7,	"BUS_ADDR");
	MakeWord	(0x26d7);
	MakeByte	(0x26d9);
	MakeName	(0x26da,	"MONITOR_unk_26DA");
	MakeWord	(0x26da);
	MakeByte	(0x26dc);
	MakeWord	(0x26de);
	MakeWord	(0x26e0);
	MakeWord	(0x26e2);
	MakeWord	(0x26e4);
	MakeWord	(0x26e6);
	MakeName	(0x26fa,	"SAVED_TASK_XXX");
	MakeWord	(0x26fa);
	MakeName	(0x26fc,	"SAVE_DE_ADDR");
	MakeWord	(0x26fc);
	MakeName	(0x26fe,	"HOST_MEM_byte_26FE");
	MakeByte	(0x26fe);
	MakeName	(0x26ff,	"ARR12");
	MakeWord	(0x270b);
	MakeName	(0x270d,	"SAVED_BUS_MID_LO");
	MakeName	(0x270e,	"SAVED_BUS_HI");
	MakeByte	(0x270e);
	MakeName	(0x270f,	"CH0_BUF");
	MakeByte	(x=0x270f);
	MakeArray	(x,	40);
	OpDecimal	(x,	0);
	MakeName	(0x2737,	"CH1_BUF");
	MakeByte	(x=0x2737);
	MakeArray	(x,	40);
	OpDecimal	(x,	0);
	MakeName	(0x275f,	"CH2_BUF");
	MakeByte	(x=0x275f);
	MakeArray	(x,	40);
	OpDecimal	(x,	0);
	MakeName	(0x2787,	"CH3_BUF");
	MakeByte	(x=0x2787);
	MakeArray	(x,	40);
	OpDecimal	(x,	0);
	MakeName	(0x27af,	"CH4_BUF");
	MakeByte	(x=0x27af);
	MakeArray	(x,	40);
	OpDecimal	(x,	0);
	MakeName	(0x27d7,	"CH5_BUF");
	MakeByte	(x=0x27d7);
	MakeArray	(x,	40);
	OpDecimal	(x,	0);
	MakeName	(0x27ff,	"STACK_TOP");
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	MakeFunction    (0,0x21);
	SetFunctionFlags(0,0x1090);
	MakeFunction    (0x38,0x3b);
	SetFunctionFlags(0x38,0x1090);
	MakeFunction    (0x66,0x69);
	SetFunctionFlags(0x66,0x1090);
	MakeFunction    (0x85,0x12a);
	SetFunctionFlags(0x85,0x1090);
	MakeFunction    (0x161,0x166);
	SetFunctionFlags(0x161,0x1090);
	MakeFunction    (0x166,0x16d);
	SetFunctionFlags(0x166,0x1090);
	MakeFunction    (0x16d,0x18a);
	SetFunctionFlags(0x16d,0x1090);
	MakeFunction    (0x18a,0x1a6);
	SetFunctionFlags(0x18a,0x1090);
	MakeFunction    (0x1a6,0x1b7);
	SetFunctionFlags(0x1a6,0x1090);
	MakeFunction    (0x1bf,0x1c8);
	SetFunctionFlags(0x1bf,0x1090);
	MakeFunction    (0x1c8,0x1cf);
	SetFunctionFlags(0x1c8,0x1090);
	MakeFunction    (0x1cf,0x1e1);
	SetFunctionFlags(0x1cf,0x1090);
	MakeFunction    (0x1e1,0x1f3);
	SetFunctionFlags(0x1e1,0x1090);
	MakeFunction    (0x1f3,0x1f8);
	SetFunctionFlags(0x1f3,0x1090);
	MakeFunction    (0x1f8,0x1fd);
	SetFunctionFlags(0x1f8,0x1090);
	MakeFunction    (0x1fd,0x215);
	SetFunctionFlags(0x1fd,0x1090);
	MakeFunction    (0x215,0x22d);
	SetFunctionFlags(0x215,0x1090);
	MakeFunction    (0x22d,0x23c);
	SetFunctionFlags(0x22d,0x1090);
	MakeFunction    (0x23c,0x260);
	SetFunctionFlags(0x23c,0x1090);
	MakeFunction    (0x260,0x280);
	SetFunctionFlags(0x260,0x1090);
	MakeFunction    (0x280,0x286);
	SetFunctionFlags(0x280,0x1090);
	MakeFunction    (0x286,0x28c);
	SetFunctionFlags(0x286,0x1090);
	MakeFunction    (0x28c,0x292);
	SetFunctionFlags(0x28c,0x1090);
	MakeFunction    (0x292,0x29d);
	SetFunctionFlags(0x292,0x1090);
	MakeFunction    (0x29d,0x2b4);
	SetFunctionFlags(0x29d,0x1090);
	MakeFunction    (0x2b4,0x2c9);
	SetFunctionFlags(0x2b4,0x1090);
	MakeFunction    (0x2c9,0x2db);
	SetFunctionFlags(0x2c9,0x1090);
	MakeFunction    (0x2db,0x2e9);
	SetFunctionFlags(0x2db,0x1090);
	MakeFunction    (0x2e9,0x30d);
	SetFunctionFlags(0x2e9,0x1090);
	MakeFunction    (0x30d,0x31d);
	SetFunctionFlags(0x30d,0x1090);
	MakeFunction    (0x31d,0x338);
	SetFunctionFlags(0x31d,0x1090);
	MakeFunction    (0x338,0x33e);
	SetFunctionFlags(0x338,0x1090);
	MakeFunction    (0x33e,0x343);
	SetFunctionFlags(0x33e,0x1090);
	MakeFunction    (0x343,0x348);
	SetFunctionFlags(0x343,0x1090);
	MakeFunction    (0x348,0x34d);
	SetFunctionFlags(0x348,0x1090);
	MakeFunction    (0x34d,0x352);
	SetFunctionFlags(0x34d,0x1090);
	MakeFunction    (0x352,0x359);
	SetFunctionFlags(0x352,0x1090);
	MakeFunction    (0x359,0x360);
	SetFunctionFlags(0x359,0x1090);
	MakeFunction    (0x360,0x3a6);
	SetFunctionFlags(0x360,0x1090);
	MakeFunction    (0x3a6,0x3ac);
	SetFunctionFlags(0x3a6,0x1090);
	MakeFunction    (0x3ac,0x3b2);
	SetFunctionFlags(0x3ac,0x1090);
	MakeFunction    (0x3b2,0x3b6);
	SetFunctionFlags(0x3b2,0x1090);
	MakeFunction    (0x3b6,0x3c2);
	SetFunctionFlags(0x3b6,0x1090);
	MakeFunction    (0x3c2,0x3d7);
	SetFunctionFlags(0x3c2,0x1090);
	MakeFunction    (0x3d7,0x3e9);
	SetFunctionFlags(0x3d7,0x1090);
	MakeFunction    (0x3e9,0x3fb);
	SetFunctionFlags(0x3e9,0x1090);
	MakeFunction    (0x3fb,0x400);
	SetFunctionFlags(0x3fb,0x1090);
	MakeFunction    (0x400,0x445);
	SetFunctionFlags(0x400,0x1090);
	MakeFunction    (0x445,0x44f);
	SetFunctionFlags(0x445,0x1090);
	MakeFunction    (0x44f,0x458);
	SetFunctionFlags(0x44f,0x1090);
	MakeFunction    (0x458,0x46f);
	SetFunctionFlags(0x458,0x1090);
	MakeFunction    (0x46f,0x478);
	SetFunctionFlags(0x46f,0x1090);
	MakeFunction    (0x478,0x4aa);
	SetFunctionFlags(0x478,0x1090);
	MakeFunction    (0x4aa,0x4b6);
	SetFunctionFlags(0x4aa,0x1090);
	MakeFunction    (0x4b6,0x4b8);
	SetFunctionFlags(0x4b6,0x1090);
	MakeFunction    (0x4b8,0x4c3);
	SetFunctionFlags(0x4b8,0x1090);
	MakeFunction    (0x4c3,0x4db);
	SetFunctionFlags(0x4c3,0x1090);
	MakeFunction    (0x4db,0x4e0);
	SetFunctionFlags(0x4db,0x1090);
	MakeFunction    (0x4e0,0x4e6);
	SetFunctionFlags(0x4e0,0x1090);
	MakeFunction    (0x4e6,0x4f2);
	SetFunctionFlags(0x4e6,0x1090);
	MakeFunction    (0x4f2,0x4ff);
	SetFunctionFlags(0x4f2,0x1090);
	MakeFunction    (0x4ff,0x508);
	SetFunctionFlags(0x4ff,0x1090);
	MakeFunction    (0x508,0x50d);
	SetFunctionFlags(0x508,0x1090);
	MakeFunction    (0x50d,0x514);
	SetFunctionFlags(0x50d,0x1090);
	MakeFunction    (0x514,0x51a);
	SetFunctionFlags(0x514,0x1090);
	MakeFunction    (0x51a,0x520);
	SetFunctionFlags(0x51a,0x1090);
	MakeFunction    (0x520,0x52d);
	SetFunctionFlags(0x520,0x1090);
	MakeFunction    (0x52d,0x533);
	SetFunctionFlags(0x52d,0x1090);
	MakeFunction    (0x533,0x550);
	SetFunctionFlags(0x533,0x1090);
	MakeFunction    (0x550,0x567);
	SetFunctionFlags(0x550,0x1090);
	MakeFunction    (0x567,0x57e);
	SetFunctionFlags(0x567,0x1090);
	MakeFunction    (0x57e,0x582);
	SetFunctionFlags(0x57e,0x1090);
	MakeFunction    (0x582,0x586);
	SetFunctionFlags(0x582,0x1090);
	MakeFunction    (0x586,0x58e);
	SetFunctionFlags(0x586,0x1090);
	MakeFunction    (0x58e,0x596);
	SetFunctionFlags(0x58e,0x1090);
	MakeFunction    (0x596,0x59d);
	SetFunctionFlags(0x596,0x1090);
	MakeFunction    (0x59d,0x5ac);
	SetFunctionFlags(0x59d,0x1090);
	MakeFunction    (0x5ac,0x5b1);
	SetFunctionFlags(0x5ac,0x1090);
	MakeFunction    (0x5b1,0x5cf);
	SetFunctionFlags(0x5b1,0x1090);
	MakeFunction    (0x5cf,0x5d7);
	SetFunctionFlags(0x5cf,0x1090);
	MakeFunction    (0x5d7,0x5f7);
	SetFunctionFlags(0x5d7,0x1090);
	MakeFunction    (0x5f7,0x604);
	SetFunctionFlags(0x5f7,0x1090);
	MakeFunction    (0x604,0x638);
	SetFunctionFlags(0x604,0x1090);
	MakeFunction    (0x638,0x641);
	SetFunctionFlags(0x638,0x1090);
	MakeFunction    (0x65f,0x69d);
	SetFunctionFlags(0x65f,0x1090);
	MakeFunction    (0x6ad,0x6f3);
	SetFunctionFlags(0x6ad,0x1090);
	MakeFunction    (0x6f3,0x70b);
	SetFunctionFlags(0x6f3,0x1090);
	MakeFunction    (0x70b,0x7e6);
	SetFunctionFlags(0x70b,0x1090);
	MakeFunction    (0x7e6,0x806);
	SetFunctionFlags(0x7e6,0x1090);
	MakeFunction    (0x806,0x807);
	SetFunctionFlags(0x806,0x1090);
	MakeFunction    (0x807,0x86b);
	SetFunctionFlags(0x807,0x1090);
	MakeFunction    (0x86b,0x8a9);
	SetFunctionFlags(0x86b,0x1090);
	MakeFunction    (0x8a9,0x8f1);
	SetFunctionFlags(0x8a9,0x1090);
	MakeFunction    (0x8f1,0x8fa);
	SetFunctionFlags(0x8f1,0x1090);
	MakeFunction    (0x8fa,0x918);
	SetFunctionFlags(0x8fa,0x1090);
	MakeFunction    (0x918,0x92d);
	SetFunctionFlags(0x918,0x1090);
	MakeFunction    (0x92d,0x947);
	SetFunctionFlags(0x92d,0x1090);
	MakeFunction    (0x969,0x987);
	SetFunctionFlags(0x969,0x1090);
	MakeFunction    (0x987,0x996);
	SetFunctionFlags(0x987,0x1090);
	MakeFunction    (0x996,0x9b7);
	SetFunctionFlags(0x996,0x1090);
	MakeFunction    (0x9b7,0x9cb);
	SetFunctionFlags(0x9b7,0x1090);
	MakeFunction    (0x9cb,0x9ce);
	SetFunctionFlags(0x9cb,0x1090);
	MakeFunction    (0x9ce,0x9de);
	SetFunctionFlags(0x9ce,0x1090);
	MakeFunction    (0x9de,0x9ed);
	SetFunctionFlags(0x9de,0x1090);
	MakeFunction    (0x9ed,0x9f9);
	SetFunctionFlags(0x9ed,0x1090);
	MakeFunction    (0x9f9,0xa08);
	SetFunctionFlags(0x9f9,0x1090);
	MakeFunction    (0xa08,0xa16);
	SetFunctionFlags(0xa08,0x1090);
	MakeFunction    (0xa16,0xa1b);
	SetFunctionFlags(0xa16,0x1090);
	MakeFunction    (0xa1b,0xa20);
	SetFunctionFlags(0xa1b,0x1090);
	MakeFunction    (0xa20,0xa26);
	SetFunctionFlags(0xa20,0x1090);
	MakeFunction    (0xa26,0xa30);
	SetFunctionFlags(0xa26,0x1090);
	MakeFunction    (0xa30,0xa3a);
	SetFunctionFlags(0xa30,0x1090);
	MakeFunction    (0xa3a,0xa44);
	SetFunctionFlags(0xa3a,0x1090);
	MakeFunction    (0xa44,0xa4e);
	SetFunctionFlags(0xa44,0x1090);
	MakeFunction    (0xa4e,0xa58);
	SetFunctionFlags(0xa4e,0x1090);
	MakeFunction    (0xa58,0xa60);
	SetFunctionFlags(0xa58,0x1090);
	MakeFunction    (0xa60,0xb40);
	SetFunctionFlags(0xa60,0x1090);
	MakeFunction    (0xb40,0xb72);
	SetFunctionFlags(0xb40,0x1090);
	MakeFunction    (0xba2,0xc26);
	SetFunctionFlags(0xba2,0x1090);
	MakeFunction    (0xc26,0xc4a);
	SetFunctionFlags(0xc26,0x1090);
	MakeFunction    (0xc4a,0xc72);
	SetFunctionFlags(0xc4a,0x1090);
	MakeFunction    (0xc72,0xc96);
	SetFunctionFlags(0xc72,0x1090);
	MakeFunction    (0xc96,0xcea);
	SetFunctionFlags(0xc96,0x1090);
	MakeFunction    (0xcea,0xceb);
	SetFunctionFlags(0xcea,0x1090);
	MakeFunction    (0xceb,0xcee);
	SetFunctionFlags(0xceb,0x1090);
	MakeFunction    (0xcee,0xd0c);
	SetFunctionFlags(0xcee,0x1090);
	MakeFunction    (0xd0c,0xd28);
	SetFunctionFlags(0xd0c,0x1090);
	MakeFunction    (0xd28,0xd46);
	SetFunctionFlags(0xd28,0x1090);
	MakeFunction    (0xd46,0xd4c);
	SetFunctionFlags(0xd46,0x1090);
	MakeFunction    (0xd4c,0xdd6);
	SetFunctionFlags(0xd4c,0x1090);
	MakeFunction    (0xdd6,0xddc);
	SetFunctionFlags(0xdd6,0x1090);
	MakeFunction    (0xddc,0xde3);
	SetFunctionFlags(0xddc,0x1090);
	MakeFunction    (0xde3,0xdec);
	SetFunctionFlags(0xde3,0x1090);
	MakeFunction    (0xdec,0xe27);
	SetFunctionFlags(0xdec,0x1090);
	MakeFunction    (0xe27,0xe3d);
	SetFunctionFlags(0xe27,0x1090);
	MakeFunction    (0xe3d,0xe5b);
	SetFunctionFlags(0xe3d,0x1090);
	MakeFunction    (0xe5b,0xe87);
	SetFunctionFlags(0xe5b,0x1090);
	MakeFunction    (0xe87,0xe96);
	SetFunctionFlags(0xe87,0x1090);
	MakeFunction    (0xe96,0xea5);
	SetFunctionFlags(0xe96,0x1090);
	MakeFunction    (0xea5,0xeb4);
	SetFunctionFlags(0xea5,0x1090);
	MakeFunction    (0xeb4,0xec3);
	SetFunctionFlags(0xeb4,0x1090);
	MakeFunction    (0xec3,0xf22);
	SetFunctionFlags(0xec3,0x1090);
	MakeFunction    (0xf22,0xf2e);
	SetFunctionFlags(0xf22,0x1090);
	MakeFunction    (0xf2e,0xf32);
	SetFunctionFlags(0xf2e,0x1090);
	MakeFunction    (0xf32,0xf51);
	SetFunctionFlags(0xf32,0x1090);
	MakeFunction    (0xf51,0xf52);
	SetFunctionFlags(0xf51,0x10d0);
	MakeFunction    (0xf52,0xf85);
	SetFunctionFlags(0xf52,0x1090);
	MakeFunction    (0xf85,0xfd6);
	SetFunctionFlags(0xf85,0x1090);
	MakeFunction    (0xfd6,0x100b);
	SetFunctionFlags(0xfd6,0x1090);
	MakeFunction    (0x100b,0x1014);
	SetFunctionFlags(0x100b,0x1090);
	MakeFunction    (0x1014,0x1023);
	SetFunctionFlags(0x1014,0x1090);
	MakeFunction    (0x1023,0x1046);
	SetFunctionFlags(0x1023,0x1090);
	MakeFunction    (0x1046,0x105e);
	SetFunctionFlags(0x1046,0x1090);
	MakeFunction    (0x105e,0x106f);
	SetFunctionFlags(0x105e,0x1090);
	MakeFunction    (0x106f,0x1070);
	SetFunctionFlags(0x106f,0x1090);
	MakeFunction    (0x1070,0x108f);
	SetFunctionFlags(0x1070,0x1090);
	MakeFunction    (0x1097,0x10f3);
	SetFunctionFlags(0x1097,0x1090);
	MakeFunction    (0x10f3,0x1133);
	SetFunctionFlags(0x10f3,0x1090);
	MakeFunction    (0x1133,0x116e);
	SetFunctionFlags(0x1133,0x1090);
	MakeFunction    (0x116e,0x1193);
	SetFunctionFlags(0x116e,0x1090);
	MakeFunction    (0x1193,0x11ac);
	SetFunctionFlags(0x1193,0x1090);
	MakeFunction    (0x11ed,0x1253);
	SetFunctionFlags(0x11ed,0x1090);
	MakeFunction    (0x1253,0x12a7);
	SetFunctionFlags(0x1253,0x1090);
	MakeFunction    (0x12a7,0x12d8);
	SetFunctionFlags(0x12a7,0x1090);
	MakeFunction    (0x12d8,0x1310);
	SetFunctionFlags(0x12d8,0x1090);
	MakeFunction    (0x1310,0x1322);
	SetFunctionFlags(0x1310,0x1090);
	MakeFunction    (0x1322,0x1354);
	SetFunctionFlags(0x1322,0x1090);
	MakeFunction    (0x1354,0x135f);
	SetFunctionFlags(0x1354,0x1090);
	MakeFunction    (0x135f,0x13ec);
	SetFunctionFlags(0x135f,0x1090);
	MakeFunction    (0x13ec,0x1408);
	SetFunctionFlags(0x13ec,0x1090);
	MakeFunction    (0x1408,0x140f);
	SetFunctionFlags(0x1408,0x1090);
	MakeFunction    (0x140f,0x1416);
	SetFunctionFlags(0x140f,0x1090);
	MakeFunction    (0x1429,0x1433);
	SetFunctionFlags(0x1429,0x1090);
	MakeFunction    (0x1433,0x143c);
	SetFunctionFlags(0x1433,0x1090);
	MakeFunction    (0x143c,0x1445);
	SetFunctionFlags(0x143c,0x1090);
	MakeFunction    (0x1445,0x147e);
	SetFunctionFlags(0x1445,0x1090);
	MakeFunction    (0x147e,0x148d);
	SetFunctionFlags(0x147e,0x1090);
	MakeFunction    (0x148d,0x14a1);
	SetFunctionFlags(0x148d,0x1090);
	MakeFunction    (0x14a1,0x14b5);
	SetFunctionFlags(0x14a1,0x1090);
	MakeFunction    (0x14b5,0x14b9);
	SetFunctionFlags(0x14b5,0x1090);
	MakeFunction    (0x14b9,0x14c3);
	SetFunctionFlags(0x14b9,0x1090);
	MakeFunction    (0x14c3,0x14ec);
	SetFunctionFlags(0x14c3,0x1090);
	MakeFunction    (0x14ec,0x14fc);
	SetFunctionFlags(0x14ec,0x1090);
	MakeFunction    (0x14fc,0x1518);
	SetFunctionFlags(0x14fc,0x1090);
	MakeFunction    (0x1518,0x1547);
	SetFunctionFlags(0x1518,0x1090);
	MakeFunction    (0x1547,0x16a6);
	SetFunctionFlags(0x1547,0x1090);
	MakeFunction    (0x16a6,0x16cb);
	SetFunctionFlags(0x16a6,0x1090);
	MakeFunction    (0x16cb,0x16e1);
	SetFunctionFlags(0x16cb,0x1090);
	MakeFunction    (0x16f1,0x16f8);
	SetFunctionFlags(0x16f1,0x1090);
	MakeFunction    (0x16f8,0x1705);
	SetFunctionFlags(0x16f8,0x1090);
	MakeFunction    (0x1705,0x1725);
	SetFunctionFlags(0x1705,0x1090);
	MakeFunction    (0x1725,0x1745);
	SetFunctionFlags(0x1725,0x1090);
	MakeFunction    (0x1745,0x1747);
	SetFunctionFlags(0x1745,0x1090);
	MakeFunction    (0x1747,0x1764);
	SetFunctionFlags(0x1747,0x1090);
	MakeFunction    (0x1764,0x1781);
	SetFunctionFlags(0x1764,0x1090);
	MakeFunction    (0x1781,0x178c);
	SetFunctionFlags(0x1781,0x1090);
	MakeFunction    (0x178c,0x1813);
	SetFunctionFlags(0x178c,0x1090);
	MakeFunction    (0x1813,0x1836);
	SetFunctionFlags(0x1813,0x1090);
	MakeFunction    (0x1836,0x183d);
	SetFunctionFlags(0x1836,0x1090);
	MakeFunction    (0x183d,0x1864);
	SetFunctionFlags(0x183d,0x1090);
	MakeFunction    (0x1864,0x188b);
	SetFunctionFlags(0x1864,0x1090);
	MakeFunction    (0x188b,0x1893);
	SetFunctionFlags(0x188b,0x1090);
	MakeFunction    (0x1893,0x189b);
	SetFunctionFlags(0x1893,0x1090);
	MakeFunction    (0x189b,0x18ae);
	SetFunctionFlags(0x189b,0x1090);
	MakeFunction    (0x18ae,0x18c9);
	SetFunctionFlags(0x18ae,0x1090);
	MakeFunction    (0x18c9,0x18e4);
	SetFunctionFlags(0x18c9,0x1090);
	MakeFunction    (0x18e4,0x18f2);
	SetFunctionFlags(0x18e4,0x1090);
	MakeFunction    (0x18f2,0x190d);
	SetFunctionFlags(0x18f2,0x1090);
	MakeFunction    (0x190d,0x1913);
	SetFunctionFlags(0x190d,0x1090);
	MakeFunction    (0x1913,0x1923);
	SetFunctionFlags(0x1913,0x1090);
	MakeFunction    (0x1923,0x1930);
	SetFunctionFlags(0x1923,0x1090);
	MakeFunction    (0x1930,0x193b);
	SetFunctionFlags(0x1930,0x1090);
	MakeFunction    (0x193b,0x1946);
	SetFunctionFlags(0x193b,0x1090);
	MakeFunction    (0x1946,0x1957);
	SetFunctionFlags(0x1946,0x1090);
	MakeFunction    (0x1957,0x1969);
	SetFunctionFlags(0x1957,0x1090);
	MakeFunction    (0x1969,0x1971);
	SetFunctionFlags(0x1969,0x1090);
	MakeFunction    (0x1971,0x1978);
	SetFunctionFlags(0x1971,0x1090);
	MakeFunction    (0x1978,0x19b5);
	SetFunctionFlags(0x1978,0x1090);
	MakeFunction    (0x19b5,0x19dc);
	SetFunctionFlags(0x19b5,0x1090);
	MakeFunction    (0x19dc,0x1a08);
	SetFunctionFlags(0x19dc,0x1090);
	MakeFunction    (0x1a08,0x1a32);
	SetFunctionFlags(0x1a08,0x1090);
	MakeFunction    (0x1a3d,0x1aa9);
	SetFunctionFlags(0x1a3d,0x1090);
	MakeFunction    (0x1ab9,0x1ad2);
	SetFunctionFlags(0x1ab9,0x1090);
	MakeFunction    (0x1ad2,0x1ad7);
	SetFunctionFlags(0x1ad2,0x1090);
	MakeFunction    (0x1ad7,0x1b9e);
	SetFunctionFlags(0x1ad7,0x1090);
	MakeFunction    (0x1b9e,0x1bf0);
	SetFunctionFlags(0x1b9e,0x1090);
	MakeFunction    (0x1c4c,0x1c72);
	SetFunctionFlags(0x1c4c,0x1090);
	MakeFunction    (0x1c72,0x1c9a);
	SetFunctionFlags(0x1c72,0x1090);
	MakeFunction    (0x1c9a,0x1cb4);
	SetFunctionFlags(0x1c9a,0x1090);
	MakeFunction    (0x1cb4,0x1cb7);
	SetFunctionFlags(0x1cb4,0x1090);
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
}

// End of file.
