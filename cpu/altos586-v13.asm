;
; ╔═════════════════════════════════════════════════════════════════════════╗
; ║	This file is generated by The Interactive Disassembler (IDA)	    ║
; ║	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    ║
; ║			 Licensed to: Freeware version			    ║
; ╚═════════════════════════════════════════════════════════════════════════╝
;
; Input	MD5   :	334B06466E9953EF6019F5106B316701


		.686p
		.mmx
		.model flat

; ═══════════════════════════════════════════════════════════════════════════

; Segment type:	Regular
zero		segment	byte public 'zero' use16
		assume cs:zero
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
INT0_OFF	dw ?			; DATA XREF: DO_RESET_ENTRY+CCw
					; DO_RESET_ENTRY:loc_FE0DAw ...
INT0_SEG	dw ?
word_4		dw ?
byte_6		db 7Eh dup(?)
INT33_TIMER_OFF	dw ?			; DATA XREF: POST_PIT+2Bw
INT33_TIMER_SEG	dw ?			; DATA XREF: POST_PIT+2Fw
byte_88		db 35Dh	dup(?)
		db 1Bh dup(?)
IOP1_PTR	IOP8089_CB <?>		; DATA XREF: IOP8086_DO_IO+19w
					; IOP8086_DO_IO+27w ...
IOP3_PTR	IOP8089_CB <?>
SCB		IOP8089_SCB <1,	0, 0, 40h> ; DATA XREF:	FINISH_POST+Do
					; HIGH:IOP8089_FLAGSo ...
FW_REG		db 0			; DATA XREF: FINISH_POST+3Fo
					; FINISH_POST+52w
					; SYS -	Firmware Version Register
SYS_CMD_REG	db 0			; DATA XREF: SYS_CMD_WHEN_READY:WAIT_READYr
					; SYS_CMD_WHEN_READY+Aw
					; SYS -	Firmware Version Register
SYS_STAT_REG	db 0			; SYS -	System Status Register
INT_VECTOR_REG	dw 0			; SYS -	Interrupt Vector Register
NEW_CMD_REG	db 0			; DATA XREF: FDC_SET_FLOPPY_PARAMS+2Dw
					; FDC_READ+D6w	...
					; SYS -	New Command Register
SIO_REGS_0	CHAN_REGS <0FEB4h, 0, 0, 0, 0, 0, 0, 3Ch, 9, 0,	0Ah, 0,	0, 0, 0>
					; DATA XREF: FINISH_POST+5Fo SIO_RX+Do ...
					; CH 0 - Channel Parameter Register
SIO_REGS_1	CHAN_REGS <0FEB4h, 0, 0, 0, 0, 0, 0, 46h, 9, 0,	546h, 0, 0, 0, 0> ; CH 1 - Channel Parameter Register
SIO_REGS_2	CHAN_REGS <0F7B4h, 0, 0, 0, 0, 0, 0, 8Ch, 0Eh, 0, 0Ah, 0, 0, 0,	0> ; CH	2 - Channel Parameter Register
		CHAN_REGS <0FAB4h, 0, 0, 0, 0, 0, 0, 96h, 0Eh, 0, 0Ah, 0, 0, 0,	0> ; CH	3 - Channel Parameter Register
		CHAN_REGS <0F796h, 0, 0, 0, 0, 0, 0, 0A0h, 0Eh,	0, 0Ah,	0, 0, 0, 0> ; CH 4 - Channel Parameter Register
		CHAN_REGS <0FEB4h, 0, 0, 0, 0, 0, 0, 0AAh, 0Eh,	0, 0Ah,	0, 0, 0, 0> ; CH 5 - Channel Parameter Register
FDC_REGS_0	db 0			; FDC_COMMAND ;	DATA XREF: FDC_SET_FLOPPY_PARAMS+28w
					; FDC_SET_FLOPPY_PARAMS:WAIT_FDC_BUSYr	...
		db 0			; FDC_STATUS ; UNK - Command Register?
		dw 0			; FDC_QUEUE_ADDR_LO
		dw 200h			; FDC_QUEUE_ADDR_HI
		db 0			; FDC_QUEUE_SIZE
		db 0			; FDC_QUEUE_PTR
		db 2 dup(0)
		db 0, 2, 0, 2, 6, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0; FDC_PARAMS_1
		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0; FDC_PARAMS_1
		db 0, 2, 0, 2, 6, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0; FDC_PARAMS_2
		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0; FDC_PARAMS_2
UNKNOWN		db 11h,	11h, 11h, 11h
		db 22h,	22h, 22h, 22h
		db 22h,	22h
dword_4F4	dd 1FFF000Ch		; DATA XREF: FINISH_POST:loc_FE2E7r
					; SYSCALL_0_MONITOR+18r
HEX_byte_4F8	db 1			; DATA XREF: M_HEX_DOWNLOAD+2Cr
					; M_HEX_DOWNLOAD+4Fr ...
STR_VERSION_BANNER db '                             ',0Ah
					; DATA XREF: AUTOBOOT_PROMPT:DO_SETUPo
		db 'Monitor Version V1.3',0
STR_POST_GOOD	db 0Ah			; DATA XREF: FINISH_POST+89o
		db 'PASSED POWER-UP TEST',0
STR_POST_FAILED	db 0Ah			; DATA XREF: FINISH_POST+A3o
		db 'FAILED POWER-UP TEST '
HEX_BUF_FOR_POST_NUMBER	db    0		; DATA XREF: FINISH_POST:loc_FE342o
		db    0
HEX_NUMS	db '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A'
					; DATA XREF: FMT_HEX+14r FMT_HEX+25r
		db 'B', 'C', 'D', 'E', 'F'
		db    0
		db    0
STR_BOOT_FAILED	db 0Ah			; DATA XREF: BOOT_FAILED_ERR+5o
		db 'Boot Failed, Status=',0
STR_ERR_BEEP	db '*',7,' ',0          ; DATA XREF: ERR_BEEP+5o
STR_BREAK	db 0Ah			; DATA XREF: INT3_sub_FEC38+8o
		db 'Break ....',0
REG_NAMES	db 'AX'                 ; DATA XREF: M_REGISTER+8Br
					; PRINT_REGS+4Ao ...
		db 'BX'
		db 'CX'
		db 'DX'
		db 'SI'
		db 'DI'
		db 'DS'
		db 'ES'
		db 'SS'
		db 'SP'
		db 'BP'
		db 'FL'
STR_BOOT_INTERRUPT db 0Ah		; DATA XREF: AUTOBOOT_PROMPT+1Bo
		db 'Press any key to interrupt boot',0Ah,0
STR_BOOT_HDD	db 0Ah			; DATA XREF: AUTOBOOT_PROMPT+69o
		db 'Booting from Hard Disk',0
STR_BOOT_PROMPT	db 0Ah			; DATA XREF: AUTOBOOT_PROMPT:BOOT_MENUo
		db 'Enter [1] to boot from Hard Disk',0Ah
		db 'Enter [2] to boot from Floppy Disk',0Ah
		db 'Enter [3] to enter Monitor',0Ah
		db 0Ah
		db 'Enter option: ',0
STR_MONITOR_PROMPT db 0Ah		; DATA XREF: AUTOBOOT_PROMPT:MONITOR_PROMPTo
		db '< A, B, D, G, I, K, L, M, O, R, S, X > ',0
		db    0
CHR_SPACE	db ' ',0                ; DATA XREF: sub_FF14A:loc_FF159o
CHR_DASH_0	db '-',0                ; DATA XREF: M_REGISTER+4Ao
CHR_COLON	db ':',0                ; DATA XREF: PRINT_REGS+1Co
CHR_DASH_1	db '-',0                ; DATA XREF: PRINT_FLAGS_REG:loc_FF52Co
STR_FLAG_NAMES	db '    ODITSZ A P C',0 ; DATA XREF: PRINT_FLAGS_REG+19r
					; PRINT_FLAGS_REG+27o
		db    0
STR_REG_CS_IP	db 0Ah			; DATA XREF: PRINT_REGS+8o
		db 'CS:IP ',0
STR_REG_FLAGS	db '  Flags  ',0        ; DATA XREF: PRINT_REGS+30o
REG_DISP_OFFSETS db 0, 2, 4, 6,	9, 0Bh,	0Dh, 0Fh, 12h, 14h, 16h, 18h, 1Bh
					; DATA XREF: M_DISPLAY_MEMORY+46r
					; M_DISPLAY_MEMORY+C6r
		db 1Dh,	1Fh, 21h
STR_READY	db ' Ready- ',0         ; DATA XREF: M_HEX_DOWNLOAD+37o
STR_DONE	db ' -Done',0           ; DATA XREF: M_HEX_DOWNLOAD:loc_FFA57o
DISK_DATA_BUF	db 51h,	30h, 0D0h, 0FFh, 0AAh, 0BBh, 4,	20h, 0Ah, 4Eh
					; DATA XREF: DISK_BOOT+59o
					; DISK_BOOT:BOOT_TYPE_2_loc_FE6EBo ...
		db 6, 80h, 2, 93h, 8, 2, 0CEh, 2, 0EAh,	0BAh, 6, 0FCh
		db 0Ah,	4Eh, 6,	20h, 13h, 4Fh, 14h, 2 dup(0), 0Ah, 0BEh
		db 6, 0FCh, 12h, 0BAh, 4, 0E2h,	0, 0Ah,	0CBh, 4, 0Fh, 12h
		db 0E7h, 4, 0B1h, 0, 2,	93h, 8,	2, 0CEh, 2, 0EAh, 0BAh
		db 6, 0FCh, 2, 93h, 14h, 0, 0CEh, 2, 93h, 15h, 0, 0CEh
		db 2, 93h, 6, 2, 0CEh, 4, 2, 93h, 7, 2,	0CEh, 4, 0Ah, 4Eh
		db 6, 10h, 3, 93h, 6, 3, 0CFh, 14h, 0Ah, 0BEh, 6, 0FCh
		db 2Ah,	0BAh, 4, 0FCh, 0Ah, 0E7h, 10h, 7Bh, 0Ah, 0BFh
		db 4, 0Eh, 3, 8Bh, 0Ch,	31h, 30h, 2 dup(0), 63h, 83h, 0Ah
		db 8Bh,	9Fh, 16h, 70h, 31h, 30h, 2 dup(0), 0F1h, 30h, 80h
		db 0FEh, 11h, 30h, 0D0h, 0FFh, 13h, 4Fh, 12h, 0, 2, 0Ah
		db 0BBh, 4, 12h, 0D1h, 30h, 28h, 8Ah, 0A0h, 0, 6Ah, 0BBh
		db 4, 17h, 13h,	4Fh, 12h, 5, 2,	88h, 20h, 0Fh, 0D1h, 30h
		db 28h,	56h, 0C0h, 0, 4Ah, 0BBh, 4, 5, 13h, 4Fh, 12h, 4
		db 0, 63h, 83h,	12h, 2,	93h, 9,	0, 0CEh, 60h, 0, 2, 93h
		db 4, 2, 0CEh, 6, 0Ah, 0B6h, 6,	33h, 2,	0EFh, 10h, 0Ah
		db 0E7h, 10h, 6, 2, 0EBh, 9, 88h, 20h, 0DFh, 0Ah, 0BBh
		db 4, 0Eh, 23h,	8Bh, 0Ch, 11h, 30h, 2 dup(0), 63h, 83h
		db 0Ah,	8Bh, 9Fh, 16h, 7, 0Ah, 4Fh, 5, 0, 88h, 20h, 26h
		db 0E0h, 0, 0D1h, 30h, 8, 0C2h,	60h, 3 dup(0), 83h, 8Fh
		db 16h,	2, 92h,	6, 2, 0CFh, 5, 0Ah, 0CBh, 5, 7Eh, 0E2h
		db 0F7h, 5, 0Ah, 4Eh, 6, 0, 88h, 20h, 5, 13h, 4Fh, 5, 81h
		db 0, 40h, 0, 20h, 48h,	11h dup(0), 0C8h, 1Eh, 0, 0FEh
		db 0Eh dup(0), 0CAh dup(?)
byte_8CA	db ?			; DATA XREF: sub_FEBD6+17r
					; INT3_sub_FEC38+21r ...
byte_8CB	db ?			; DATA XREF: sub_FEBD6+48w
					; INT3_sub_FEC38+4Fr
word_8CC	dw ?			; DATA XREF: sub_FEBD6+29r
					; INT3_sub_FEC38+33r ...
word_8CE	dw 17h dup(?)		; DATA XREF: sub_FEBD6+37r
					; INT3_sub_FEC38+41r ...
FDC_QUEUE	dw ?			; DATA XREF: FDC_SET_FLOPPY_PARAMS+22o
					; FDC_ENQUEUE_CMD+8o
		dw ?
SIO_BUFS_unk_900 db 5B4h dup(?)		; DATA XREF: SIO_TX+35o
HEX_word_EB4	dw ?			; DATA XREF: M_HEX_DOWNLOAD+5Aw
					; HEX_sub_FFB20+Cr ...
HEX_word_EB6	dw ?			; DATA XREF: M_HEX_DOWNLOAD+60w
					; M_HEX_DOWNLOAD:loc_FF987w ...
HEX_word_EB8	dw ?			; DATA XREF: M_HEX_DOWNLOAD+41w
					; M_HEX_DOWNLOAD+4Br ...
HEX_word_EBA	dw ?			; DATA XREF: M_HEX_DOWNLOAD+84w
					; M_HEX_DOWNLOAD+11Er ...
CHAR_BUF_byte_EBC db ?			; DATA XREF: M_DISK_IO+12w
					; M_DISK_IO+15r ...
SAVED_SS_word_EBD dw ?			; DATA XREF: DO_SYSCALL_ENTRY+Bw
					; DO_SYSCALL_RETURNr
SAVED_SP_word_EBF dw ?			; DATA XREF: DO_SYSCALL_ENTRY+Fw
					; DO_SYSCALL_RETURN+4r
SAVED_ES	dw ?			; DATA XREF: DO_SYSCALL_ENTRY+5w
					; DO_SYSCALL_RETURN+8r	...
					; Saved	on syscall entry
MEM_SIZE	dw ?			; DATA XREF: POST_START+3Dw
					; SYSCALL_10_GET_CONS_AND_MEMr
unk_EC5		db    ?	;		; DATA XREF: POST_START+39w
					; POST_START:loc_FE291r
WHATS_CB_SEG	db ?			; DATA XREF: FINISH_POST+26r
POST_RESULT_byte_EC7 db	?		; DATA XREF: POST_START+Aw
					; POST_START:POST_FF_loc_FE2A7w ...
BOOT_DISK_CODE	db ?			; DATA XREF: SYSCALL_11_GET_BOOT_DISKr
					; DISK_BOOT:HARD_DISKw
					; 1 = HDD, 2 = FDD
SAVED_CPU_REGS	CPU_REGS <?>		; DATA XREF: SYSCALL_0_MONITOR+Bo
					; SAVE_REGS_AND_BREAK+6o ...
ADDR_SEGMENT	dw ?			; DATA XREF: SYSCALL_8_DISK_IO+7w
					; PARSE_ADDR_sub_FE96E+Cw ...
ADDR_OFFSET	dw ?			; DATA XREF: SYSCALL_8_DISK_IO+3w
					; DISK_IO+18w ...
IOP_BLOCK	IOP8089_PB <?>		; DATA XREF: IOP8086_DO_IO+1o
					; HDD_READ+Cw ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
DISK_IOPB	IO_BLOCK <?>		; DATA XREF: DISK_IO+14w
					; DISK_BOOT:loc_FE5BFw	...
		db    ?	;
GETCHAR_ECHO_BUF dw ?			; DATA XREF: GETCHAR_ECHO+8w
					; GETCHAR_ECHO+Bo ...
PRINTHEX_unk_F1A db    ? ;		; DATA XREF: PRINTHEX8+9o
					; PRINTHEX8+18o
		db    ?	;
PRINTHEX_unk_F1C db    ? ;		; DATA XREF: PRINTHEX8+5o
					; PRINTHEX8+22o
		db 0E3h	dup(?)
zero		ends

; ═══════════════════════════════════════════════════════════════════════════

; Segment type:	Pure code
FE00		segment	byte public 'CODE' use16
		assume cs:FE00
		assume es:zero,	ss:zero, ds:zero, fs:zero, gs:zero

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: thunk

SYSCALL_ENTRY	proc far
		jmp	DO_SYSCALL_ENTRY
SYSCALL_ENTRY	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


DO_RESET_ENTRY	proc near		; CODE XREF: HIGH:loc_FFFF0J
		cli

loc_FE004:				; CMOS Memory
		in	ax, MMU_MEMV_CLEAR

loc_FE006:				; AT Keyboard controller 8042.
		in	ax, MMU_ERROR

loc_FE008:
		and	ax, 200h

loc_FE00B:
		mov	bh, ah
		shr	ax, 1

loc_FE00F:				; Control Bits Port - Write Only.
		out	CONTROL_BITS, ax

loc_FE011:
		cmp	bh, 2

loc_FE014:
		jnz	short loc_FE019
		jmp	loc_FE252
; ───────────────────────────────────────────────────────────────────────────

loc_FE019:				; CODE XREF: DO_RESET_ENTRY:loc_FE014j
		mov	ax, 0FE00h
		mov	ds, ax
		assume ds:nothing
		xor	bx, bx
		xor	al, al
		mov	cx, 2000h

loc_FE025:				; CODE XREF: DO_RESET_ENTRY+25j
		add	al, [bx]
		inc	bx
		loop	loc_FE025
		and	al, al
		jz	short loc_FE032
		mov	bl, 1
		jmp	short loc_FE052
; ───────────────────────────────────────────────────────────────────────────

loc_FE032:				; CODE XREF: DO_RESET_ENTRY+29j
		mov	cx, 11h
		xor	bx, bx
		mov	dx, MMU_BASE
		stc

loc_FE03B:				; CODE XREF: DO_RESET_ENTRY+49j
		mov	ax, bx
		out	dx, ax		; Game I/O port
		in	ax, dx		; Game I/O port
		and	ax, 0F8FFh
		and	bx, 0F8FFh
		cmp	ax, bx
		jnz	short loc_FE050
		rcl	bx, 1
		loop	loc_FE03B
		jmp	short loc_FE054
; ───────────────────────────────────────────────────────────────────────────

loc_FE050:				; CODE XREF: DO_RESET_ENTRY+45j
		mov	bl, 2

loc_FE052:				; CODE XREF: DO_RESET_ENTRY+2Dj
		jmp	short loc_FE093
; ───────────────────────────────────────────────────────────────────────────

loc_FE054:				; CODE XREF: DO_RESET_ENTRY+4Bj
		mov	cx, 9
		mov	dx, MMU_BASE
		xor	ax, ax
		mov	bx, 1

loc_FE05F:				; CODE XREF: DO_RESET_ENTRY+65j
		out	dx, ax		; Game I/O port
		rcl	bx, 1
		mov	dx, bx
		add	dx, MMU_BASE
		loop	loc_FE05F
		mov	cx, 9
		mov	dx, MMU_BASE
		mov	bx, 1

loc_FE073:				; CODE XREF: DO_RESET_ENTRY+8Aj
		in	ax, dx		; Game I/O port
		and	ax, 0F8FFh
		jnz	short loc_FE091
		not	ax
		out	dx, ax		; Game I/O port
		in	ax, dx		; Game I/O port
		and	ax, 0F8FFh
		cmp	ax, 0F8FFh
		jnz	short loc_FE091
		rcl	bx, 1

loc_FE087:
		mov	dx, bx
		add	dx, MMU_BASE
		loop	loc_FE073
		jmp	short loc_FE095
; ───────────────────────────────────────────────────────────────────────────

loc_FE091:				; CODE XREF: DO_RESET_ENTRY+74j
					; DO_RESET_ENTRY+80j
		mov	bl, 3

loc_FE093:				; CODE XREF: DO_RESET_ENTRY:loc_FE052j
		jmp	short loc_FE0C2
; ───────────────────────────────────────────────────────────────────────────

loc_FE095:				; CODE XREF: DO_RESET_ENTRY+8Cj
		mov	cx, 100h
		mov	dx, MMU_BASE
		xor	ax, ax

loc_FE09D:				; CODE XREF: DO_RESET_ENTRY+9Dj
		out	dx, ax		; Game I/O port
		inc	dx
		inc	dx
		loop	loc_FE09D
		mov	cx, 100h
		mov	dx, MMU_BASE

loc_FE0A8:				; CODE XREF: DO_RESET_ENTRY+B9j
		in	ax, dx		; Game I/O port
		and	ax, 0F8FFh
		jnz	short loc_FE0C0
		not	ax
		out	dx, ax		; Game I/O port
		in	ax, dx		; Game I/O port
		and	ax, 0F8FFh
		cmp	ax, 0F8FFh
		jnz	short loc_FE0C0
		inc	dx
		inc	dx
		loop	loc_FE0A8
		jmp	short loc_FE0C4
; ───────────────────────────────────────────────────────────────────────────

loc_FE0C0:				; CODE XREF: DO_RESET_ENTRY+A9j
					; DO_RESET_ENTRY+B5j
		mov	bl, 4

loc_FE0C2:				; CODE XREF: DO_RESET_ENTRY:loc_FE093j
		jmp	short loc_FE0E6
; ───────────────────────────────────────────────────────────────────────────

loc_FE0C4:				; CODE XREF: DO_RESET_ENTRY+BBj
		lea	di, loc_FE0CB
		jmp	MMU_sub_FE232
; ───────────────────────────────────────────────────────────────────────────

loc_FE0CB:				; DATA XREF: DO_RESET_ENTRY:loc_FE0C4o
		xor	ax, ax
		mov	ds, ax
		assume ds:zero
		mov	INT0_OFF, ax
		mov	cx, 11h
		mov	dx, ax
		mov	ax, 1

loc_FE0DA:				; CODE XREF: DO_RESET_ENTRY+E9j
		mov	INT0_OFF, dx
		cmp	INT0_OFF, dx
		jz	short loc_FE0E8
		mov	bl, 5

loc_FE0E6:				; CODE XREF: DO_RESET_ENTRY:loc_FE0C2j
		jmp	short TRMP
; ───────────────────────────────────────────────────────────────────────────

loc_FE0E8:				; CODE XREF: DO_RESET_ENTRY+DFj
		mov	dx, ax
		shl	ax, 1
		loop	loc_FE0DA

loc_FE0EE:
		mov	si, 4
		xor	ax, ax
		lea	di, loc_FE0F9

loc_FE0F7:				; CODE XREF: DO_RESET_ENTRY+FAj
		jmp	short POST_MEM_1_sub_FE112
; ───────────────────────────────────────────────────────────────────────────

loc_FE0F9:				; DATA XREF: DO_RESET_ENTRY+F0o
		add	ax, 1000h
		dec	si
		jnz	short loc_FE0F7

loc_FE0FF:
		mov	si, 4
		xor	ax, ax
		lea	di, sub_FE10A
DO_RESET_ENTRY	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


TRMP_0		proc near		; CODE XREF: sub_FE10A+4j
		jmp	short sub_FE12C
TRMP_0		endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


sub_FE10A	proc near		; DATA XREF: DO_RESET_ENTRY+101o
		add	ax, 1000h
		dec	si
		jnz	short TRMP_0
		jmp	short sub_FE156
sub_FE10A	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


POST_MEM_1_sub_FE112 proc near		; CODE XREF: DO_RESET_ENTRY:loc_FE0F7j
		stc
		mov	cx, 12h
		xor	bx, bx
		mov	ds, ax
		assume ds:nothing
		mov	dx, 5555h

loc_FE11D:				; CODE XREF: POST_MEM_1_sub_FE112:loc_FE128j
		mov	[bx], dx
		rcl	bx, 1
		jnb	short loc_FE128
		add	ax, 1000h
		mov	ds, ax
		assume ds:nothing

loc_FE128:				; CODE XREF: POST_MEM_1_sub_FE112+Fj
		loop	loc_FE11D
		jmp	di
POST_MEM_1_sub_FE112 endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


sub_FE12C	proc near		; CODE XREF: TRMP_0j
		stc
		mov	cx, 12h
		xor	bx, bx
		mov	ds, ax
		mov	dx, 5555h

loc_FE137:				; CODE XREF: sub_FE12C:loc_FE14Ej
		cmp	[bx], dx
		jnz	short EARLY_BEFORE_POST_sub_FE152
		not	dx
		mov	[bx], dx
		cmp	[bx], dx
		jnz	short EARLY_BEFORE_POST_sub_FE152
		rcl	bx, 1
		jnb	short loc_FE14E
		add	ax, 1000h
		mov	ds, ax
		assume ds:nothing
		not	dx

loc_FE14E:				; CODE XREF: sub_FE12C+19j
		loop	loc_FE137
		jmp	di
; ───────────────────────────────────────────────────────────────────────────

EARLY_BEFORE_POST_sub_FE152:		; CODE XREF: sub_FE12C+Dj
					; sub_FE12C+15j
		mov	bl, 6
sub_FE12C	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


TRMP		proc near		; CODE XREF: DO_RESET_ENTRY:loc_FE0E6j
		jmp	short TRMP_1
TRMP		endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


sub_FE156	proc near		; CODE XREF: sub_FE10A+6j
		cld
		mov	bx, 8
		xor	ax, ax

loc_FE15C:				; CODE XREF: POST_sub_FE163+Bj
		mov	es, ax
		mov	ax, 0FFFFh
		xor	di, di
sub_FE156	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


POST_sub_FE163	proc near
		mov	cx, 8000h
		rep stosw
		mov	ax, es
		add	ax, 1000h
		dec	bx
		jnz	short loc_FE15C
		mov	bx, 8
		xor	ax, ax
		mov	dx, 0FFFFh

loc_FE178:				; CODE XREF: POST_sub_FE163+34j
		mov	cx, 8000h
		mov	ds, ax
		assume ds:zero
		xor	di, di

loc_FE17F:				; CODE XREF: POST_sub_FE163+2Cj
		cmp	[di], dx
		jnz	short loc_FE19B
		not	dx
		mov	[di], dx
		cmp	[di], dx
		jnz	short loc_FE19B
		not	dx
		inc	di
		inc	di
		loop	loc_FE17F
		mov	ax, ds
		add	ax, 1000h
		dec	bx
		jnz	short loc_FE178
		jmp	short POST_PIT_1
; ───────────────────────────────────────────────────────────────────────────

loc_FE19B:				; CODE XREF: POST_sub_FE163+1Ej
					; POST_sub_FE163+26j
		mov	bl, 7
POST_sub_FE163	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


TRMP_1		proc near		; CODE XREF: TRMPj
		jmp	short TRMP_2
TRMP_1		endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


POST_PIT_1	proc near		; CODE XREF: POST_sub_FE163+36j
		mov	al, 70h	; 'p'
		mov	dx, PIT_CTRL	; PIT -	Control	Word Register -	Write Only
		out	dx, al
		mov	ax, 0AAh ; '¬'
		mov	dx, PIT_CNT_1	; PIT -	Counter	1
		out	dx, al
		out	dx, al
		mov	cx, ax

loc_FE1AF:				; CODE XREF: POST_PIT_1:loc_FE1AFj
		loop	loc_FE1AF
		in	al, dx
		mov	ah, al
		in	al, dx
		cmp	ax, 0AAAAh
		jnz	short POST_PIT
		mov	bl, 8
POST_PIT_1	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


TRMP_2		proc near		; CODE XREF: TRMP_1j
		jmp	short TRMP_3
TRMP_2		endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


POST_PIT	proc near		; CODE XREF: POST_PIT_1+19j
		mov	al, 70h	; 'p'
		mov	dx, PIT_CTRL	; PIT -	Control	Word Register -	Write Only
		out	dx, al
		mov	dx, PIT_CNT_1	; PIT -	Counter	1
		out	dx, al
		mov	ax, 1F00h
		mov	ss, ax
		assume ss:nothing
		mov	sp, 0FFh
		mov	cx, 100h
		lea	dx, DEFAULT_INT
		xor	bx, bx
		mov	ds, bx

loc_FE1DB:				; CODE XREF: POST_PIT+25j
		mov	[bx], dx
		inc	bx
		inc	bx
		mov	word ptr [bx], cs
		inc	bx
		inc	bx
		loop	loc_FE1DB
		lea	dx, TIMER_INT
		mov	INT33_TIMER_OFF, dx
		mov	INT33_TIMER_SEG, cs
		mov	al, 13h
		out	PIC_1, al	; DMA page register 74LS612:
					; Channel 3 (hard disk DMA) (address bits 16-23)
		mov	al, 20h	; ' '
		mov	dx, PIC_2	; PIC -	ICW2, ICW3, ICW4, or OCW1
		out	dx, al		; manufacture's diagnostic checkpoint
		mov	al, 3
		out	dx, al		; manufacture's diagnostic checkpoint
		mov	al, 0FDh ; '²'
		out	dx, al		; manufacture's diagnostic checkpoint
		sti
		mov	al, 56h	; 'V'
		mov	dx, PIT_CTRL	; PIT -	Control	Word Register -	Write Only
		out	dx, al
		mov	al, 90h	; 'É'
		out	dx, al
		mov	al, 50h	; 'P'
		mov	dx, PIT_CNT_1	; PIT -	Counter	1
		out	dx, al
		mov	dx, PIT_CNT_2	; PIT -	Counter	2
		out	dx, al
		mov	bh, 0FFh
		mov	cx, 1FFFh

loc_FE21A:				; CODE XREF: POST_PIT+5Ej
		mul	si
		loop	loc_FE21A
		cli
		cmp	bh, 21h	; '!'
		jz	short POST_PIT_BL
		mov	bl, 9
POST_PIT	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


TRMP_3		proc near		; CODE XREF: TRMP_2j
		jmp	short TRMP_4
TRMP_3		endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


POST_PIT_BL	proc near		; CODE XREF: POST_PIT+64j
		xor	bl, bl
POST_PIT_BL	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


TRMP_4		proc near		; CODE XREF: TRMP_3j
		jmp	short POST_START ; First part of self-test
TRMP_4		endp			; Tests	memory


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


TIMER_INT	proc near		; DATA XREF: POST_PIT+27o
		mov	bh, 21h	; '!'   ; FALLTHROUGH
TIMER_INT	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


DEFAULT_INT	proc far		; DATA XREF: POST_PIT+15o
		mov	cx, 1
		iret
DEFAULT_INT	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


MMU_sub_FE232	proc near		; CODE XREF: DO_RESET_ENTRY+C5j
					; POST_START+4j ...
		mov	dx, MMU_BASE
		mov	cl, 0

loc_FE237:				; CODE XREF: MMU_sub_FE232+Ej
		mov	ah, 0DCh ; '▄'
		mov	al, cl
		out	dx, ax		; Game I/O port
		inc	dx
		inc	dx
		inc	cl
		jnz	short loc_FE237
		jmp	di
MMU_sub_FE232	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; First	part of	self-test
; Tests	memory

POST_START	proc near		; CODE XREF: TRMP_4j
		lea	di, loc_FE24A
		jmp	short MMU_sub_FE232
; ───────────────────────────────────────────────────────────────────────────

loc_FE24A:				; DATA XREF: POST_STARTo
		xor	ax, ax
		mov	ds, ax
		mov	POST_RESULT_byte_EC7, bl

loc_FE252:				; CODE XREF: DO_RESET_ENTRY+13j
		lea	di, loc_FE259
		jmp	MMU_sub_FE232
; ───────────────────────────────────────────────────────────────────────────

loc_FE259:				; DATA XREF: POST_START:loc_FE252o
		xor	ax, ax
		mov	ds, ax
		mov	dx, 7E00h	; Start	the memory test	at 7E00:1FFF
		mov	bx, 1FFFh	; That is 7FFFF

loc_FE263:				; CODE XREF: POST_START+34j
		mov	es, dx
		assume es:nothing
		mov	al, es:[bx]
		not	byte ptr es:[bx]
		not	al
		cmp	al, es:[bx]
		not	byte ptr es:[bx]
		jnz	short loc_FE27A
		add	dh, 2
		jmp	short loc_FE263
; ───────────────────────────────────────────────────────────────────────────

loc_FE27A:				; CODE XREF: POST_START+2Fj
		sub	dh, 2
		mov	word ptr unk_EC5, dx
		mov	MEM_SIZE, bx
		in	ax, MMU_ERROR	; AT Keyboard controller 8042.
		and	ah, 2
		jnz	short POST_FF_loc_FE2A7
		mov	dx, 8000h
		xor	ax, ax

loc_FE291:				; CODE XREF: POST_START+5Fj
		cmp	dx, word ptr unk_EC5
		ja	short loc_FE2A5
		mov	es, dx
		assume es:nothing
		mov	di, ax
		mov	cx, 1000h
		rep stosw
		add	dh, 2
		jmp	short loc_FE291
; ───────────────────────────────────────────────────────────────────────────

loc_FE2A5:				; CODE XREF: POST_START+51j
		jmp	short FINISH_POST
; ───────────────────────────────────────────────────────────────────────────

POST_FF_loc_FE2A7:			; CODE XREF: POST_START+46j
		mov	POST_RESULT_byte_EC7, 0FFh ; FALLTHROUGH
POST_START	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


FINISH_POST	proc near		; CODE XREF: POST_START:loc_FE2A5j
					; DO_SYSCALL_ENTRY+29j
		mov	ax, 0FE00h
		mov	ds, ax
		assume ds:FE00
		xor	ax, ax
		mov	es, ax
		assume es:zero
		lea	si, ROM_DATA	; From FE00:1C00
		lea	di, SCB		; To   0000:0410
		mov	cx, 504		; 504 Words = 1008 Bytes
		repne movsw		; Copy .data to	DRAM
		mov	ax, 100h
		out	CONTROL_BITS, ax ; Control Bits	Port - Write Only.
		xor	ax, ax
		mov	ds, ax
		assume ds:zero
		in	ax, MMU_MEMV	; MMU -	Violation Port - Read Only.
		and	ah, 10h
		jnz	short loc_FE2E7
		cmp	WHATS_CB_SEG, 7Eh ; '~'
		jz	short loc_FE2E1
		mov	SCB.CB_SEG, 0FDFFh
		jmp	short loc_FE2E7
; ───────────────────────────────────────────────────────────────────────────

loc_FE2E1:				; CODE XREF: FINISH_POST+2Bj
		mov	SCB.CB_SEG, 7FFFh

loc_FE2E7:				; CODE XREF: FINISH_POST+24j
					; FINISH_POST+33j
		lds	di, dword_4F4
		mov	word ptr [di], offset FW_REG
		inc	di
		inc	di
		xor	ax, ax
		mov	[di], al
		mov	ds, ax
		mov	es, ax
		mov	ss, ax
		assume ss:zero
		mov	sp, 1000h
		mov	word ptr FW_REG, ax
		out	Z80_CHAN_ATTN, ax ; Z80A I/O Processor Chan att.
		mov	al, 81h	; 'ü'   ; Enable controller
		call	SYS_CMD_WHEN_READY
		mov	cx, 2
		lea	si, SIO_REGS_0
		mov	al, 81h	; 'ü'   ; Enable channel

loc_FE311:				; CODE XREF: FINISH_POST+6Cj
		call	SIO_COMMAND_WHEN_READY ; AL=command
		add	si, 16h		; sizeof(SIO_REGS_BLOCK)
		loop	loc_FE311
		mov	cx, 25		; 25 newlines
					; 99 luftbaloons

loc_FE31D:				; CODE XREF: FINISH_POST+76j
		push	cx
		call	PRINT_CRLF
		pop	cx
		loop	loc_FE31D
		cmp	POST_RESULT_byte_EC7, 10h
		ja	short loc_FE35A
		mov	bl, POST_RESULT_byte_EC7
		xor	ax, ax
		cmp	bl, al
		jnz	short loc_FE342
		lea	dx, STR_POST_GOOD ; "\nPASSED POWER-UP TEST"
		push	dx
		call	PUTS
		add	sp, 2
		jmp	short loc_FE35A
; ───────────────────────────────────────────────────────────────────────────

loc_FE342:				; CODE XREF: FINISH_POST+87j
		lea	dx, HEX_BUF_FOR_POST_NUMBER
		push	dx
		push	dx
		push	bx
		call	FMT_HEX
		add	sp, 6
		lea	dx, STR_POST_FAILED ; "\nFAILED	POWER-UP TEST "
		push	dx
		call	PUTS
		add	sp, 2

loc_FE35A:				; CODE XREF: FINISH_POST+7Dj
					; FINISH_POST+94j
		xor	ax, ax
		push	ax
		push	ax
		call	FDC_SET_FLOPPY_PARAMS ;	Init floppy
		add	sp, 4
		cmp	POST_RESULT_byte_EC7, 0FEh ; '■'
		jz	short near ptr DO_SYSCALL_RETURN
FINISH_POST	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


SYSCALL_0_MONITOR proc far		; CODE XREF: DO_SYSCALL_ENTRY+2Ep
					; DATA XREF: FE00:SYSCALL_HANDLERSo
		xor	ax, ax
		mov	ds, ax
		mov	es, ax
		mov	ss, ax
		mov	sp, 1000h
		lea	di, SAVED_CPU_REGS
		mov	cx, 0Eh
		rep stosw
		mov	SAVED_CPU_REGS.SAVE_SP,	sp
		push	word ptr dword_4F4
		call	AUTOBOOT_PROMPT	; FALLTHROUGH
SYSCALL_0_MONITOR endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


DO_SYSCALL_ENTRY proc near		; CODE XREF: SYSCALL_ENTRYj
		push	ds
		xor	ax, ax
		mov	ds, ax
		mov	SAVED_ES, es	; Saved	on syscall entry
		mov	es, ax
		mov	SAVED_SS_word_EBD, ss
		mov	SAVED_SP_word_EBF, sp
		mov	ss, ax
		mov	sp, 1000h
		cmp	bl, 0Fh
		jnz	short loc_FE3B6
		lea	di, loc_FE3AE
		jmp	MMU_sub_FE232
; ───────────────────────────────────────────────────────────────────────────

loc_FE3AE:				; DATA XREF: DO_SYSCALL_ENTRY+1Do
		mov	POST_RESULT_byte_EC7, 0FEh ; '■'
		jmp	FINISH_POST
; ───────────────────────────────────────────────────────────────────────────

loc_FE3B6:				; CODE XREF: DO_SYSCALL_ENTRY+1Bj
		shl	bx, 1
		call	cs:SYSCALL_HANDLERS[bx]	; FALLTHROUGH
DO_SYSCALL_ENTRY endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


DO_SYSCALL_RETURN proc far		; CODE XREF: FINISH_POST+BDj
		mov	ss, SAVED_SS_word_EBD
		mov	sp, SAVED_SP_word_EBF
		mov	es, SAVED_ES	; Saved	on syscall entry
		pop	ds
		retf
DO_SYSCALL_RETURN endp ; sp =  2

; ───────────────────────────────────────────────────────────────────────────
SYSCALL_HANDLERS dw offset SYSCALL_0_MONITOR; 0	; DATA XREF: DO_SYSCALL_ENTRY+2Er
		dw offset SYSCALL_1_5_SIO_GET_STAT_ATTR; 1
		dw offset SYSCALL_2_SIO_GETC; 2
		dw offset SYSCALL_3_SIO_PUTC; 3
		dw offset SYSCALL_4_SIO_SET_ATTRS; 4
		dw offset SYSCALL_1_5_SIO_GET_STAT_ATTR; 5
		dw offset SYSCALL_6_PRINT_CRLF;	6
		dw offset SYSCALL_7_PUTS; 7
		dw offset SYSCALL_8_DISK_IO; 8
		dw offset SYSCALL_8_DISK_IO; 9
		dw offset SYSCALL_10_GET_CONS_AND_MEM; 10
		dw offset SYSCALL_11_GET_BOOT_DISK; 11
		dw offset SYSCALL_12_DISK_BOOT;	12

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


SYSCALL_1_5_SIO_GET_STAT_ATTR proc near	; DATA XREF: FE00:SYSCALL_HANDLERSo
		push	bx
		push	cx
		mov	ax, 0FFFFh	; Just get the attributes
		push	ax
		push	cx
		call	SIO_RX
		add	sp, 6
		pop	bx
		cmp	bl, 2
		jz	short locret_FE3FA
		mov	ax, dx

locret_FE3FA:				; CODE XREF: SYSCALL_1_5_SIO_GET_STAT_ATTR+11j
		retn
SYSCALL_1_5_SIO_GET_STAT_ATTR endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


SYSCALL_2_SIO_GETC proc	near		; DATA XREF: FE00:SYSCALL_HANDLERSo
		push	cx
		call	SIO_GETC
		add	sp, 2
		retn
SYSCALL_2_SIO_GETC endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


SYSCALL_3_SIO_PUTC proc	near		; DATA XREF: FE00:SYSCALL_HANDLERSo
		mov	POST_RESULT_byte_EC7, dl
		lea	dx, POST_RESULT_byte_EC7
		push	dx
		push	cx		; Character
		call	DO_SYSCALL_3_PUTC
		add	sp, 4
		retn
SYSCALL_3_SIO_PUTC endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


SYSCALL_4_SIO_SET_ATTRS	proc near	; DATA XREF: FE00:SYSCALL_HANDLERSo
		push	dx		; Attributes
		mov	ax, 0FFFFh
		push	ax
		push	cx		; Channel No.
		call	SIO_TX
		add	sp, 6
		retn
SYSCALL_4_SIO_SET_ATTRS	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


SYSCALL_6_PRINT_CRLF proc near		; DATA XREF: FE00:SYSCALL_HANDLERSo
		push	cx		; Channel
		call	DO_PRINT_CRLF
		add	sp, 2
		retn
SYSCALL_6_PRINT_CRLF endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


SYSCALL_7_PUTS	proc near		; DATA XREF: FE00:SYSCALL_HANDLERSo
		mov	ax, SAVED_ES	; Saved	on syscall entry
		push	dx
		push	ax
		push	cx
		call	DO_PUTS
		add	sp, 6
		retn
SYSCALL_7_PUTS	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


SYSCALL_8_DISK_IO proc near		; DATA XREF: FE00:SYSCALL_HANDLERSo
		mov	ax, SAVED_ES	; Saved	on syscall entry
		mov	ADDR_OFFSET, cx
		mov	ADDR_SEGMENT, ax
		call	DISK_IO
		retn
SYSCALL_8_DISK_IO endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


SYSCALL_10_GET_CONS_AND_MEM proc near	; DATA XREF: FE00:SYSCALL_HANDLERSo
		les	dx, dword ptr MEM_SIZE
		mov	SAVED_ES, es	; Saved	on syscall entry
		xor	ax, ax		; Current console is always 0
		retn
SYSCALL_10_GET_CONS_AND_MEM endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


SYSCALL_11_GET_BOOT_DISK proc near	; DATA XREF: FE00:SYSCALL_HANDLERSo
		mov	al, BOOT_DISK_CODE ; 1 = HDD, 2	= FDD
		retn
SYSCALL_11_GET_BOOT_DISK endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


SYSCALL_12_DISK_BOOT proc near		; DATA XREF: FE00:SYSCALL_HANDLERSo
		push	cx
		call	DISK_BOOT
		add	sp, 2
		retn
SYSCALL_12_DISK_BOOT endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


SAVE_REGS_AND_BREAK proc near		; DATA XREF: RESTORE_REGS_AND_IRETo
		push	bx
		push	ds
		xor	bx, bx
		mov	ds, bx
		mov	bx, offset SAVED_CPU_REGS
		mov	[bx+CPU_REGS.SAVE_ES], es
		mov	[bx+CPU_REGS.SAVE_AX], ax
		mov	[bx+CPU_REGS.SAVE_CX], cx
		mov	[bx+CPU_REGS.SAVE_DX], dx
		mov	[bx+CPU_REGS.SAVE_SI], si
		mov	[bx+CPU_REGS.SAVE_DI], di
		mov	[bx+CPU_REGS.SAVE_BP], bp
		mov	[bx+CPU_REGS.SAVE_SS], ss
		pop	ax
		mov	[bx+CPU_REGS.SAVE_DS], ax
		pop	ax
		mov	[bx+CPU_REGS.SAVE_BX], ax
		pop	ax
		mov	[bx+CPU_REGS.SAVE_IP], ax
		pop	ax
		mov	[bx+CPU_REGS.SAVE_CS], ax
		pop	ax
		mov	[bx+CPU_REGS.SAVE_FLAGS], ax
		mov	[bx+CPU_REGS.SAVE_SP], sp
		xor	ax, ax
		mov	ds, ax
		mov	es, ax
		mov	ss, ax
		mov	sp, 1000h
		test	[bx+CPU_REGS.SAVE_FLAGS], 100h
		jz	short loc_FE4B3
		and	[bx+CPU_REGS.SAVE_FLAGS], 0FEFFh

loc_FE4AA:
		call	PRINT_REGS
		xor	ax, ax
		push	ax
		call	AUTOBOOT_PROMPT

loc_FE4B3:				; CODE XREF: SAVE_REGS_AND_BREAK+48j
		dec	[bx+CPU_REGS.SAVE_IP]
		call	INT3_sub_FEC38
SAVE_REGS_AND_BREAK endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


IOP8086_DO_IO	proc near		; CODE XREF: HDD_READ:loc_FED23p
					; AUTOBOOT_PROMPT:KEY_1_HD_BOOTp ...
		push	es
		lea	si, IOP_BLOCK
		mov	word ptr [si], 6CAh
		add	word ptr [si], 17F0h
		mov	word ptr [si+2], 0FE00h
		mov	ax, SCB.CB_SEG
		mov	es, ax
		assume es:nothing
		mov	al, 3
		mov	es:IOP8089_CB, al ; 40:0 -- 0:400
		mov	es:IOP8089_CB.PB_OFF, si ; 40:2	-- 0:402
		mov	word ptr es:IOP8089_CB.PB_SEG, ds ; 40:4 -- 0:404
		mov	byte ptr es:IOP8089_CB.BUSY, 1 ; 40:1 -- 0:401	 Busy?
		mov	dx, BUS_RSVD_0	; Reserved for system bus I/O.
		out	dx, al
		mov	cx, 6000

WAIT_IOP_NOT_BUSY:			; CODE XREF: IOP8086_DO_IO+46j
		cmp	byte ptr es:1, 0 ; 40:1	-- 0:401   Busy	no more?
		jz	short IOP_NOT_BUSY
		mov	ax, 1
		push	ax
		call	DELAY
		add	sp, 2
		loop	WAIT_IOP_NOT_BUSY

IOP_NOT_BUSY:				; CODE XREF: IOP8086_DO_IO+3Aj
		pop	es
		assume es:zero
		retn
IOP8086_DO_IO	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

SIO_GETC	proc near		; CODE XREF: SYSCALL_2_SIO_GETC+1p
					; HEX_sub_FFA68+Cp

CHARACTER	= word ptr -6
CHANNEL		= byte ptr  4

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 2
		lea	di, [bp+CHARACTER]
		push	di
		mov	di, 1		; Length
		push	di
		mov	al, [bp+CHANNEL]
		cbw
		push	ax
		call	SIO_RX
		add	sp, 6
		mov	byte ptr [bp+CHARACTER], al
		mov	al, byte ptr [bp+CHARACTER]
		cbw
		jmp	TAIL_loc_FFBE4
SIO_GETC	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

DO_SYSCALL_3_PUTC proc near		; CODE XREF: SYSCALL_3_SIO_PUTC+Ap

CHARACTER	= byte ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		push	di
		push	si
		push	[bp+arg_2]
		mov	di, 1		; Length
		push	di
		mov	al, [bp+CHARACTER]
		cbw
		push	ax
		call	PRINT_BUF
		add	sp, 6
		jmp	TAIL_loc_FFBE4
DO_SYSCALL_3_PUTC endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

FMT_HEX		proc near		; CODE XREF: FINISH_POST+9Dp
					; PRINTHEX8+12p

arg_0		= byte ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8

		push	bp
		mov	bp, sp
		push	di
		push	si
		push	[bp+arg_2]
		mov	bl, [bp+arg_0]
		and	bx, 0F0h
		mov	cx, 4
		sar	bx, cl
		mov	dl, HEX_NUMS[bx]
		pop	bx
		mov	[bx], dl
		push	[bp+arg_4]
		mov	bl, [bp+arg_0]
		and	bx, 0Fh
		mov	dl, HEX_NUMS[bx]
		pop	bx
		mov	[bx], dl
		jmp	TAIL_loc_FFBE4
FMT_HEX		endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


DELAY		proc near		; CODE XREF: IOP8086_DO_IO+40p
					; AUTOBOOT_PROMPT+2Ep
		push	bx
		mov	bx, sp
		push	cx
		mov	ax, [bx+4]
		or	ax, ax
		jz	short ZERO_WAIT

OUTER_LOOP:				; CODE XREF: DELAY+16j
		mov	bx, 10

INNER_LOOP:				; CODE XREF: DELAY+13j
		mov	cl, 120
		shr	cl, cl
		dec	bx
		jnz	short INNER_LOOP
		dec	ax
		jnz	short OUTER_LOOP

ZERO_WAIT:				; CODE XREF: DELAY+9j
		pop	cx
		pop	bx
		retn
DELAY		endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

DISK_BOOT	proc near		; CODE XREF: SYSCALL_12_DISK_BOOT+1p
					; AUTOBOOT_PROMPT+7Ap ...

LEN		= word ptr -0Eh
DEST		= word ptr -0Ch
var_A		= word ptr -0Ah
SRC		= word ptr -8
var_6		= word ptr -6
DISK_NUMBER	= byte ptr  4

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 0Ah
		cmp	word ptr [bp+DISK_NUMBER], 3
		jbe	short FLOPPY_DISK
		mov	dx, 1
		jmp	short HARD_DISK
; ───────────────────────────────────────────────────────────────────────────

FLOPPY_DISK:				; CODE XREF: DISK_BOOT+Cj
		mov	dx, 2

HARD_DISK:				; CODE XREF: DISK_BOOT+11j
		mov	BOOT_DISK_CODE,	dl ; 1 = HDD, 2	= FDD
		mov	dx, word ptr [bp+DISK_NUMBER]
		mov	DISK_IOPB.DISK_DRIVE_NUM, dl
		cmp	word ptr [bp+DISK_NUMBER], 3
		jbe	short loc_FE5BC
		mov	dx, 21h	; '!'
		jmp	short loc_FE5BF
; ───────────────────────────────────────────────────────────────────────────

loc_FE5BC:				; CODE XREF: DISK_BOOT+25j
		mov	dx, 20h	; ' '

loc_FE5BF:				; CODE XREF: DISK_BOOT+2Aj
		mov	DISK_IOPB.DISK_OPCODE, dl
		mov	DISK_IOPB.DISK_TRACK, 0
		mov	DISK_IOPB.DISK_HEAD, 0
		cmp	word ptr [bp+DISK_NUMBER], 3
		jbe	short loc_FE5D8
		sub	dx, dx
		jmp	short loc_FE5DB
; ───────────────────────────────────────────────────────────────────────────

loc_FE5D8:				; CODE XREF: DISK_BOOT+42j
		mov	dx, 1

loc_FE5DB:				; CODE XREF: DISK_BOOT+46j
		mov	DISK_IOPB.DISK_SECTOR, dl
		mov	DISK_IOPB.DISK_SECTOR_COUNT, 1
		mov	DISK_IOPB.DISK_RETRIES,	10
		mov	DISK_IOPB.DISK_DMA_OFFSET, offset DISK_DATA_BUF
		mov	DISK_IOPB.DISK_DMA_SEGMENT, 0
		mov	DISK_IOPB.DISK_SECTOR_LEN, 512
		call	DISK_READ
		cmp	DISK_IOPB.DISK_OP_STATUS, 0
		jz	short BOOT_GOOD

BOOT_FAILED:				; CODE XREF: DISK_BOOT+B6j
					; DISK_BOOT+194j
		call	BOOT_FAILED_ERR
		jmp	loc_FE730
; ───────────────────────────────────────────────────────────────────────────

BOOT_GOOD:				; CODE XREF: DISK_BOOT+73j
		mov	dl, DISK_DATA_BUF+3
		sub	dh, dh
		mov	al, DISK_DATA_BUF+4
		cbw
		mov	cx, 8
		shl	ax, cl
		add	dx, ax
		mov	[bp+var_A], dx
		mov	[bp+DEST], 0
		mov	SAVED_CPU_REGS.SAVE_CS,	dx
		mov	di, [bp+DEST]
		mov	SAVED_CPU_REGS.SAVE_IP,	di
		mov	[bp+var_6], 0
		mov	di, [bp+var_A]
		mov	DISK_IOPB.DISK_DMA_SEGMENT, di
		inc	DISK_IOPB.DISK_SECTOR
		mov	al, DISK_DATA_BUF+9
		cbw
		cmp	ax, 2
		ja	short BOOT_FAILED
		shl	ax, 1
		xchg	ax, bx
		jmp	cs:off_FE714[bx]

BOOT_TYPE_0_loc_FE650:			; DATA XREF: DISK_BOOT:off_FE714o
		mov	[bp+SRC], (offset DISK_DATA_BUF+80h)
		mov	di, 180h	; Length
		push	di
		lea	di, [bp+DEST]
		push	di
		lea	di, [bp+SRC]
		push	di
		call	MEMCPY
		add	sp, 6
		mov	di, [bp+DEST]
		add	di, 180h
		mov	DISK_IOPB.DISK_DMA_OFFSET, di
		cmp	word ptr [bp+DISK_NUMBER], 3
		ja	short loc_FE6E4
		mov	DISK_IOPB.DISK_SECTOR_COUNT, 8
		call	FDC_READ
		mov	al, DISK_IOPB.DISK_SECTOR_COUNT
		cbw
		mov	cx, 9
		shl	ax, cl
		add	DISK_IOPB.DISK_DMA_OFFSET, ax
		mov	DISK_IOPB.DISK_HEAD, 1
		mov	DISK_IOPB.DISK_SECTOR, 1
		mov	DISK_IOPB.DISK_SECTOR_COUNT, 9
		jmp	BOOT_TYPE_PARAMS_SET
; ───────────────────────────────────────────────────────────────────────────

BOOT_TYPE_1_loc_FE69F:			; CODE XREF: DISK_BOOT+BBj
					; DATA XREF: DISK_BOOT+186o
		mov	[bp+LEN], 502
		cmp	word ptr [bp+DISK_NUMBER], 3
		ja	short loc_FE6C4
		mov	di, 1
		push	di
		mov	al, DISK_IOPB.DISK_DRIVE_NUM
		cbw
		push	ax
		call	FDC_SET_FLOPPY_PARAMS
		add	sp, 4
		mov	DISK_IOPB.DISK_SECTOR_LEN, 256
		mov	[bp+LEN], 246

loc_FE6C4:				; CODE XREF: DISK_BOOT+118j
		mov	[bp+SRC], (offset DISK_DATA_BUF+0Ah)
		push	[bp+LEN]
		lea	di, [bp+DEST]
		push	di
		lea	di, [bp+SRC]
		push	di
		call	MEMCPY
		add	sp, 6
		mov	di, [bp+DEST]
		add	di, [bp+LEN]
		mov	DISK_IOPB.DISK_DMA_OFFSET, di

loc_FE6E4:				; CODE XREF: DISK_BOOT+E6j
		mov	DISK_IOPB.DISK_SECTOR_COUNT, 15
		jmp	short BOOT_TYPE_PARAMS_SET
; ───────────────────────────────────────────────────────────────────────────

BOOT_TYPE_2_loc_FE6EB:			; CODE XREF: DISK_BOOT+BBj
					; DATA XREF: DISK_BOOT+188o
		mov	[bp+SRC], offset DISK_DATA_BUF
		mov	di, 512
		push	di
		lea	di, [bp+DEST]
		push	di
		lea	di, [bp+SRC]
		push	di
		call	MEMCPY
		add	sp, 6
		mov	di, [bp+DEST]
		add	di, 512
		mov	DISK_IOPB.DISK_DMA_OFFSET, di
		mov	DISK_IOPB.DISK_SECTOR_COUNT, 2
		jmp	short BOOT_TYPE_PARAMS_SET
; ───────────────────────────────────────────────────────────────────────────
off_FE714	dw offset BOOT_TYPE_0_loc_FE650	; DATA XREF: DISK_BOOT+BBr
		dw offset BOOT_TYPE_1_loc_FE69F
		dw offset BOOT_TYPE_2_loc_FE6EB
; ───────────────────────────────────────────────────────────────────────────

BOOT_TYPE_PARAMS_SET:			; CODE XREF: DISK_BOOT+10Cj
					; DISK_BOOT+159j ...
		call	DISK_READ
		cmp	DISK_IOPB.DISK_OP_STATUS, 0
		jz	short BOOT_GOOD_
		jmp	BOOT_FAILED
; ───────────────────────────────────────────────────────────────────────────

BOOT_GOOD_:				; CODE XREF: DISK_BOOT+192j
		call	PRINT_CRLF
		call	sub_FEBD6
		call	near ptr RESTORE_REGS_AND_IRET

loc_FE730:				; CODE XREF: DISK_BOOT+78j
		jmp	TAIL_loc_FFBE4
DISK_BOOT	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

BOOT_FAILED_ERR	proc near		; CODE XREF: DISK_BOOT:BOOT_FAILEDp
		push	bp
		mov	bp, sp
		push	di
		push	si
		mov	di, offset STR_BOOT_FAILED ; "\nBoot Failed, Status="
		push	di
		call	PUTS
		add	sp, 2
		mov	al, DISK_IOPB.DISK_OP_STATUS
		cbw
		push	ax
		call	PRINTHEX8
		add	sp, 2
		jmp	TAIL_loc_FFBE4
BOOT_FAILED_ERR	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

M_DISK_IO	proc near		; CODE XREF: AUTOBOOT_PROMPT:MON_K_DISK_IOp
		push	bp
		mov	bp, sp
		push	di
		push	si
		mov	di, 1
		push	di
		call	sub_FF14A
		add	sp, 2
		call	GETCHAR_ECHO
		mov	CHAR_BUF_byte_EBC, al
		cmp	CHAR_BUF_byte_EBC, 0Dh
		jnz	short loc_FE774
		call	ERR_BEEP

loc_FE771:				; CODE XREF: M_DISK_IO+27j
					; M_DISK_IO+2Cj
		jmp	TAIL_loc_FFBE4
; ───────────────────────────────────────────────────────────────────────────

loc_FE774:				; CODE XREF: M_DISK_IO+1Aj
		call	PARSE_ADDR_sub_FE96E
		test	ax, ax
		jz	short loc_FE771
		call	DISK_IO
		jmp	short loc_FE771
M_DISK_IO	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

DISK_IO		proc near		; CODE XREF: SYSCALL_8_DISK_IO+Ap
					; M_DISK_IO+29p

COUNTER		= word ptr -6

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 2
		mov	[bp+COUNTER], 0

COPY_IOPB_BYTE:				; CODE XREF: DISK_IO+23j
		push	[bp+COUNTER]
		call	MEM_READ8
		pop	bx
		mov	byte ptr DISK_IOPB.MON_RSVD_1[bx], al
		inc	ADDR_OFFSET
		inc	[bp+COUNTER]
		cmp	[bp+COUNTER], 20 ; sizeof(IOPB)
		jb	short COPY_IOPB_BYTE
		sub	ADDR_OFFSET, 20
		call	DISK_READ
		add	ADDR_OFFSET, 11
		mov	al, DISK_IOPB.DISK_OP_STATUS
		cbw
		push	ax
		call	MEM_WRITE8
		add	sp, 2
		jmp	TAIL_loc_FFBE4
DISK_IO		endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

DISK_READ	proc near		; CODE XREF: DISK_BOOT+6Bp
					; DISK_BOOT:BOOT_TYPE_PARAMS_SETp ...
		push	bp
		mov	bp, sp
		push	di
		push	si
		cmp	DISK_IOPB.DISK_DRIVE_NUM, 3
		jle	short DO_FLOPPY
		call	HDD_READ

ALL_DONE:				; CODE XREF: DISK_READ+15j
		jmp	TAIL_loc_FFBE4
; ───────────────────────────────────────────────────────────────────────────

DO_FLOPPY:				; CODE XREF: DISK_READ+Aj
		call	FDC_READ
		jmp	short ALL_DONE
DISK_READ	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

ERR_BEEP	proc near		; CODE XREF: M_DISK_IO+1Cp
					; READ_MEM_ADDR_sub_FE9D8:loc_FEA8Cp ...
		push	bp
		mov	bp, sp
		push	di
		push	si
		mov	di, offset STR_ERR_BEEP	; "*\a "
		push	di
		mov	di, 3
		push	di
		sub	di, di
		push	di
		call	PRINT_BUF
		add	sp, 6
		jmp	TAIL_loc_FFBE4
ERR_BEEP	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

FDC_SET_FLOPPY_PARAMS proc near		; CODE XREF: FINISH_POST+B2p
					; DISK_BOOT+123p ...

arg_0		= byte ptr  4
SECTOR_SIZE	= byte ptr  6

		push	bp
		mov	bp, sp
		push	di
		push	si
		cmp	[bp+SECTOR_SIZE], 1
		jnz	short SECTOR_512
		mov	di, 256
		jmp	short SECTOR_256
; ───────────────────────────────────────────────────────────────────────────

SECTOR_512:				; CODE XREF: FDC_SET_FLOPPY_PARAMS+9j
		mov	di, 512

SECTOR_256:				; CODE XREF: FDC_SET_FLOPPY_PARAMS+Ej
		mov	al, [bp+arg_0]
		cbw
		mov	cx, 5
		shl	ax, cl
		mov	si, ax
		mov	word ptr (FDC_REGS_0.FDC_PARAMS_1+2)[si], di
		mov	FDC_REGS_0.FDC_QUEUE_ADDR_LO, offset FDC_QUEUE
		mov	FDC_REGS_0.FDC_COMMAND,	FDC_FLOPPY_PARAMS
		inc	NEW_CMD_REG

WAIT_FDC_BUSY:				; CODE XREF: FDC_SET_FLOPPY_PARAMS+3Dj
		mov	dl, FDC_REGS_0.FDC_COMMAND
		and	dx, FDC_BUSY
		cmp	dx, FDC_BUSY
		jz	short WAIT_FDC_BUSY
		jmp	TAIL_loc_FFBE4
FDC_SET_FLOPPY_PARAMS endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

FDC_READ	proc near		; CODE XREF: DISK_BOOT+EDp
					; DISK_READ:DO_FLOPPYp

DMA_SEGMENT	= word ptr -16h
DMA_OFFSET	= word ptr -14h
SECTORS_READ	= word ptr -12h
DMA_ADDRESS	= word ptr -10h
COMMAND		= byte ptr -0Eh
STATUS		= byte ptr -0Dh
DRIVE_NUM	= byte ptr -0Ch
TRACK		= byte ptr -0Bh
HEAD		= byte ptr -0Ah
SECTOR		= byte ptr -9
DATA_BUF_LO	= byte ptr -8
DATA_BUF_MID	= byte ptr -7
DATA_BUF_HI	= byte ptr -6

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 12h
		mov	dl, DISK_IOPB.DISK_OPCODE
		and	dx, 0F0h
		mov	di, dx
		mov	dl, DISK_IOPB.DISK_RETRIES
		and	dx, 0Fh
		add	di, dx
		mov	dx, di
		mov	[bp+COMMAND], dl
		mov	[bp+STATUS], 0
		mov	dl, DISK_IOPB.DISK_DRIVE_NUM
		mov	[bp+DRIVE_NUM],	dl
		mov	dx, DISK_IOPB.DISK_TRACK
		mov	[bp+TRACK], dl
		mov	dl, DISK_IOPB.DISK_HEAD
		mov	[bp+HEAD], dl
		mov	dl, DISK_IOPB.DISK_SECTOR
		mov	[bp+SECTOR], dl
		mov	al, [bp+DRIVE_NUM]
		cbw
		mov	cx, 5
		shl	ax, cl
		mov	bx, ax
		mov	ax, word ptr (FDC_REGS_0.FDC_PARAMS_1+2)[bx]
		cmp	ax, DISK_IOPB.DISK_SECTOR_LEN
		jz	short loc_FE8AB
		cmp	DISK_IOPB.DISK_SECTOR_LEN, 256
		jz	short SECTOR_256
		sub	di, di
		push	di
		mov	al, [bp+DRIVE_NUM]
		cbw
		push	ax
		jmp	short loc_FE8A5
; ───────────────────────────────────────────────────────────────────────────

SECTOR_256:				; CODE XREF: FDC_READ+5Cj
		mov	di, 1
		push	di
		mov	al, [bp+DRIVE_NUM]
		cbw
		push	ax

loc_FE8A5:				; CODE XREF: FDC_READ+66j
		call	FDC_SET_FLOPPY_PARAMS
		add	sp, 4

loc_FE8AB:				; CODE XREF: FDC_READ+54j
		mov	di, DISK_IOPB.DISK_DMA_OFFSET
		mov	[bp+DMA_OFFSET], di
		mov	di, DISK_IOPB.DISK_DMA_SEGMENT
		mov	[bp+DMA_SEGMENT], di
		mov	[bp+SECTORS_READ], 0
		jmp	loc_FE943
; ───────────────────────────────────────────────────────────────────────────

READ_SECTORS:				; CODE XREF: FDC_READ+118j
		mov	dx, [bp+DMA_SEGMENT]
		mov	[bp+DMA_ADDRESS], dx
		mov	cx, 0Ch
		shr	dx, cl
		mov	[bp+DATA_BUF_HI], dl
		mov	dx, [bp+DMA_ADDRESS]
		mov	cx, 4
		shl	dx, cl
		add	dx, [bp+DMA_OFFSET]
		mov	[bp+DMA_ADDRESS], dx
		sub	dh, dh
		mov	[bp+DATA_BUF_LO], dl
		mov	dx, [bp+DMA_ADDRESS]
		and	dx, 0FF00h
		mov	cx, 8
		shr	dx, cl
		mov	[bp+DATA_BUF_MID], dl
		lea	di, [bp+COMMAND]
		push	di
		call	FDC_ENQUEUE_CMD
		add	sp, 2
		mov	FDC_REGS_0.FDC_QUEUE_SIZE, 1
		mov	FDC_REGS_0.FDC_QUEUE_PTR, 0
		mov	FDC_REGS_0.FDC_COMMAND,	FDC_RUN_IO ; Submit commands
		inc	NEW_CMD_REG

WAIT_FDC_NOT_BUSY:			; CODE XREF: FDC_READ+E6j
		mov	dl, FDC_REGS_0.FDC_COMMAND
		and	dx, FDC_BUSY
		cmp	dx, FDC_BUSY
		jz	short WAIT_FDC_NOT_BUSY

WAIT_FOR_FDC_READY:			; CODE XREF: FDC_READ+F0j
		mov	dl, FDC_REGS_0.FDC_STATUS
		and	dx, 0Fh
		jnz	short WAIT_FOR_FDC_READY

WAIT_FOR_QUEUE_DRAIN:			; CODE XREF: FDC_READ+FAj
		mov	dl, FDC_REGS_0.FDC_QUEUE_SIZE
		cmp	FDC_REGS_0.FDC_QUEUE_PTR, dl
		jnz	short WAIT_FOR_QUEUE_DRAIN
		cmp	[bp+STATUS], 0
		jnz	short FDC_READ_FINISHED	; Error?
		mov	di, DISK_IOPB.DISK_SECTOR_LEN
		add	[bp+DMA_OFFSET], di
		inc	[bp+SECTOR]
		inc	[bp+SECTORS_READ]

loc_FE943:				; CODE XREF: FDC_READ+8Aj
		mov	al, DISK_IOPB.DISK_SECTOR_COUNT
		cbw
		cmp	ax, [bp+SECTORS_READ]
		jbe	short FDC_READ_FINISHED	; All done?
		jmp	READ_SECTORS
; ───────────────────────────────────────────────────────────────────────────

FDC_READ_FINISHED:			; CODE XREF: FDC_READ+100j
					; FDC_READ+116j
		mov	dl, [bp+STATUS]
		mov	DISK_IOPB.DISK_OP_STATUS, dl
		jmp	TAIL_loc_FFBE4
FDC_READ	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

FDC_ENQUEUE_CMD	proc near		; CODE XREF: FDC_READ+C1p

FDC_CMD		= word ptr  4

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	si, [bp+FDC_CMD]
		lea	di, FDC_QUEUE
		call	FDC_sub_FF6A2	; DI=FDC_QUEUE
		pop	di
		pop	si
		pop	bp
		retn
FDC_ENQUEUE_CMD	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

PARSE_ADDR_sub_FE96E proc near		; CODE XREF: M_DISK_IO:loc_FE774p
					; M_GOTO:loc_FEB6Ep ...

var_6		= byte ptr -6

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 2
		mov	[bp+var_6], 1
		mov	ADDR_SEGMENT, 0
		mov	di, offset ADDR_OFFSET
		push	di
		call	READ_MEM_ADDR_sub_FE9D8
		add	sp, 2
		test	ax, ax
		jz	short loc_FE9B1
		cmp	CHAR_BUF_byte_EBC, ':'
		jnz	short loc_FE9B5
		mov	di, ADDR_OFFSET
		mov	ADDR_SEGMENT, di
		call	GETCHAR_ECHO
		mov	CHAR_BUF_byte_EBC, al
		mov	di, offset ADDR_OFFSET
		push	di
		call	READ_MEM_ADDR_sub_FE9D8
		add	sp, 2
		test	ax, ax
		jnz	short loc_FE9B5

loc_FE9B1:				; CODE XREF: PARSE_ADDR_sub_FE96E+1Ej
		mov	[bp+var_6], 0

loc_FE9B5:				; CODE XREF: PARSE_ADDR_sub_FE96E+25j
					; PARSE_ADDR_sub_FE96E+41j
		mov	al, [bp+var_6]
		cbw
		jmp	TAIL_loc_FFBE4
PARSE_ADDR_sub_FE96E endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

GETCHAR_ECHO	proc near		; CODE XREF: M_DISK_IO+Fp
					; PARSE_ADDR_sub_FE96E+2Fp ...
		push	bp
		mov	bp, sp
		push	di
		push	si
		call	GETCHAR
		mov	GETCHAR_ECHO_BUF, ax
		mov	di, offset GETCHAR_ECHO_BUF
		push	di
		call	PUTCHAR
		add	sp, 2
		mov	ax, GETCHAR_ECHO_BUF
		jmp	TAIL_loc_FFBE4
GETCHAR_ECHO	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

READ_MEM_ADDR_sub_FE9D8	proc near	; CODE XREF: PARSE_ADDR_sub_FE96E+16p
					; PARSE_ADDR_sub_FE96E+39p ...

var_A		= word ptr -0Ah
var_8		= byte ptr -8
var_6		= word ptr -6
arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 6
		mov	[bp+var_8], '+'
		mov	[bp+var_A], 0
		mov	di, [bp+arg_0]
		mov	word ptr [di], 0
		jmp	short loc_FEA1A
; ───────────────────────────────────────────────────────────────────────────

loc_FE9F2:				; CODE XREF: READ_MEM_ADDR_sub_FE9D8+53j
		mov	di, [bp+var_A]
		mov	cx, 4
		shl	di, cl
		mov	al, byte ptr [bp+var_6]
		cbw
		add	di, ax
		mov	[bp+var_A], di
		call	GETCHAR
		mov	CHAR_BUF_byte_EBC, al
		cmp	CHAR_BUF_byte_EBC, 0Dh ; END_OF_LINE
		jz	short GOT_CRLF
		mov	di, offset CHAR_BUF_byte_EBC
		push	di
		call	PUTCHAR
		add	sp, 2

loc_FEA1A:				; CODE XREF: READ_MEM_ADDR_sub_FE9D8+18j
					; READ_MEM_ADDR_sub_FE9D8+B1j
		lea	di, [bp+var_6]
		push	di
		mov	al, CHAR_BUF_byte_EBC
		cbw
		push	ax
		call	PARSE_HEX_sub_FF6BA
		add	sp, 4
		test	ax, ax
		jnz	short loc_FE9F2

GOT_CRLF:				; CODE XREF: READ_MEM_ADDR_sub_FE9D8+36j
		cmp	[bp+var_8], '+'
		jnz	short loc_FEA3D
		mov	bx, [bp+arg_0]
		mov	di, [bp+var_A]
		add	[bx], di
		jmp	short loc_FEA45
; ───────────────────────────────────────────────────────────────────────────

loc_FEA3D:				; CODE XREF: READ_MEM_ADDR_sub_FE9D8+59j
		mov	bx, [bp+arg_0]
		mov	di, [bp+var_A]
		sub	[bx], di

loc_FEA45:				; CODE XREF: READ_MEM_ADDR_sub_FE9D8+63j
		cmp	CHAR_BUF_byte_EBC, 0Dh
		jz	short loc_FEA61
		cmp	CHAR_BUF_byte_EBC, ':'
		jz	short loc_FEA61
		cmp	CHAR_BUF_byte_EBC, ','
		jz	short loc_FEA61
		cmp	CHAR_BUF_byte_EBC, ' '
		jnz	short loc_FEA69

loc_FEA61:				; CODE XREF: READ_MEM_ADDR_sub_FE9D8+72j
					; READ_MEM_ADDR_sub_FE9D8+79j ...
		mov	di, 1

loc_FEA64:				; CODE XREF: READ_MEM_ADDR_sub_FE9D8+B9j
		mov	ax, di
		jmp	TAIL_loc_FFBE4
; ───────────────────────────────────────────────────────────────────────────

loc_FEA69:				; CODE XREF: READ_MEM_ADDR_sub_FE9D8+87j
		cmp	CHAR_BUF_byte_EBC, '+'
		jz	short loc_FEA77
		cmp	CHAR_BUF_byte_EBC, '-'
		jnz	short loc_FEA8C

loc_FEA77:				; CODE XREF: READ_MEM_ADDR_sub_FE9D8+96j
		mov	dl, CHAR_BUF_byte_EBC
		mov	[bp+var_8], dl
		mov	[bp+var_A], 0
		call	GETCHAR_ECHO
		mov	CHAR_BUF_byte_EBC, al
		jmp	loc_FEA1A
; ───────────────────────────────────────────────────────────────────────────

loc_FEA8C:				; CODE XREF: READ_MEM_ADDR_sub_FE9D8+9Dj
		call	ERR_BEEP
		sub	di, di
		jmp	short loc_FEA64
READ_MEM_ADDR_sub_FE9D8	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

sub_FEA94	proc near		; CODE XREF: M_ALTER_MEMORY+85p
					; sub_FF906+Ep

var_6		= word ptr -6
arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 2
		mov	bx, [bp+arg_0]
		mov	byte ptr [bx], 0
		jmp	short loc_FEAD0
; ───────────────────────────────────────────────────────────────────────────

loc_FEAA4:				; CODE XREF: sub_FEA94+4Dj
		mov	bx, [bp+arg_0]
		mov	al, [bx]
		cbw
		mov	cx, 4
		shl	ax, cl
		mov	dx, ax
		mov	al, byte ptr [bp+var_6]
		cbw
		add	dx, ax
		mov	[bx], dl
		call	GETCHAR
		mov	CHAR_BUF_byte_EBC, al
		cmp	CHAR_BUF_byte_EBC, 0Dh ; CRLF
		jz	short GOT_END_OF_LINE
		mov	di, offset CHAR_BUF_byte_EBC
		push	di
		call	PUTCHAR
		add	sp, 2

loc_FEAD0:				; CODE XREF: sub_FEA94+Ej
		lea	di, [bp+var_6]
		push	di
		mov	al, CHAR_BUF_byte_EBC
		cbw
		push	ax
		call	PARSE_HEX_sub_FF6BA
		add	sp, 4
		test	ax, ax
		jnz	short loc_FEAA4

GOT_END_OF_LINE:			; CODE XREF: sub_FEA94+30j
		cmp	CHAR_BUF_byte_EBC, 0Dh
		jz	short loc_FEB02
		cmp	CHAR_BUF_byte_EBC, ' '
		jz	short loc_FEB02
		cmp	CHAR_BUF_byte_EBC, ','
		jz	short loc_FEB02
		call	ERR_BEEP
		sub	di, di

loc_FEAFD:				; CODE XREF: sub_FEA94+71j
		mov	ax, di
		jmp	TAIL_loc_FFBE4
; ───────────────────────────────────────────────────────────────────────────

loc_FEB02:				; CODE XREF: sub_FEA94+54j
					; sub_FEA94+5Bj ...
		mov	di, 1
		jmp	short loc_FEAFD
sub_FEA94	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


RESTORE_REGS_AND_IRET proc far		; CODE XREF: DISK_BOOT+19Dp M_GOTO+1Fp ...
		mov	ax, offset SAVE_REGS_AND_BREAK
		mov	bx, 4
		mov	[bx], ax
		mov	[bx+CPU_REGS.SAVE_BX], cs
		mov	bx, 0Ch
		mov	[bx], ax
		mov	[bx+CPU_REGS.SAVE_BX], cs
		mov	bx, offset SAVED_CPU_REGS
		cli
		mov	di, [bx+CPU_REGS.SAVE_DI]
		mov	si, [bx+CPU_REGS.SAVE_SI]
		mov	dx, [bx+CPU_REGS.SAVE_DX]
		mov	cx, [bx+CPU_REGS.SAVE_CX]
		mov	ax, [bx+CPU_REGS.SAVE_AX]
		mov	es, [bx+CPU_REGS.SAVE_ES]
		mov	ss, [bx+CPU_REGS.SAVE_SS]
		mov	sp, [bx+CPU_REGS.SAVE_SP]
		mov	bp, [bx+CPU_REGS.SAVE_BP]
		push	[bx+CPU_REGS.SAVE_FLAGS]
		push	[bx+CPU_REGS.SAVE_CS]
		push	[bx+CPU_REGS.SAVE_IP]
		push	[bx+CPU_REGS.SAVE_DS]
		mov	bx, [bx+CPU_REGS.SAVE_BX]
		pop	ds
		iret
RESTORE_REGS_AND_IRET endp ; sp	= -6

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

M_GOTO		proc near		; CODE XREF: AUTOBOOT_PROMPT:MON_G_O_TOp
		push	bp
		mov	bp, sp
		push	di
		push	si
		mov	di, 1
		push	di
		call	sub_FF14A
		add	sp, 2
		call	GETCHAR_ECHO
		mov	CHAR_BUF_byte_EBC, al
		cmp	CHAR_BUF_byte_EBC, 0Dh
		jnz	short loc_FEB6E
		call	sub_FEBD6
		call	near ptr RESTORE_REGS_AND_IRET

loc_FEB6E:				; CODE XREF: M_GOTO+1Aj
		call	PARSE_ADDR_sub_FE96E
		test	ax, ax
		jz	short loc_FEB8B
		mov	di, ADDR_SEGMENT
		mov	SAVED_CPU_REGS.SAVE_CS,	di
		mov	di, ADDR_OFFSET
		mov	SAVED_CPU_REGS.SAVE_IP,	di
		call	sub_FEBD6
		call	near ptr RESTORE_REGS_AND_IRET

loc_FEB8B:				; CODE XREF: M_GOTO+27j
		jmp	TAIL_loc_FFBE4
M_GOTO		endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

M_SINGLE_STEP	proc near		; CODE XREF: AUTOBOOT_PROMPT:MON_S_INGLE_STEPp
		push	bp
		mov	bp, sp
		push	di
		push	si
		mov	di, 1
		push	di
		call	sub_FF14A
		add	sp, 2
		call	GETCHAR_ECHO
		mov	CHAR_BUF_byte_EBC, al
		cmp	CHAR_BUF_byte_EBC, 0Dh
		jnz	short loc_FEBB3
		or	SAVED_CPU_REGS.SAVE_FLAGS, 100h
		call	near ptr RESTORE_REGS_AND_IRET

loc_FEBB3:				; CODE XREF: M_SINGLE_STEP+1Aj
		call	PARSE_ADDR_sub_FE96E
		test	ax, ax
		jz	short loc_FEBD3
		mov	di, ADDR_SEGMENT
		mov	SAVED_CPU_REGS.SAVE_CS,	di
		mov	di, ADDR_OFFSET
		mov	SAVED_CPU_REGS.SAVE_IP,	di
		or	SAVED_CPU_REGS.SAVE_FLAGS, 100h
		call	near ptr RESTORE_REGS_AND_IRET

loc_FEBD3:				; CODE XREF: M_SINGLE_STEP+2Aj
		jmp	TAIL_loc_FFBE4
M_SINGLE_STEP	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

sub_FEBD6	proc near		; CODE XREF: DISK_BOOT+19Ap M_GOTO+1Cp ...

COUNTER		= word ptr -6

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 2
		mov	[bp+COUNTER], 0

loc_FEBE3:				; CODE XREF: sub_FEBD6+5Dj
		mov	ax, [bp+COUNTER]
		mov	cx, 6
		imul	cx
		mov	bx, ax
		mov	al, byte_8CA[bx]
		test	al, al
		jz	short loc_FEC2C
		mov	ax, [bp+COUNTER]
		mov	cx, 6
		imul	cx
		mov	bx, ax
		mov	ax, word_8CC[bx]
		mov	ADDR_SEGMENT, ax
		mov	ax, [bp+COUNTER]
		imul	cx
		mov	bx, ax
		mov	ax, word_8CE[bx]
		mov	ADDR_OFFSET, ax
		mov	ax, [bp+COUNTER]
		imul	cx
		push	ax
		call	MEM_READ8
		pop	bx
		mov	byte_8CB[bx], al
		mov	di, 0CCh ; '╠'
		push	di
		call	MEM_WRITE8
		add	sp, 2

loc_FEC2C:				; CODE XREF: sub_FEBD6+1Dj
		inc	[bp+COUNTER]
		cmp	[bp+COUNTER], 8
		jb	short loc_FEBE3
		jmp	TAIL_loc_FFBE4
sub_FEBD6	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

INT3_sub_FEC38	proc near		; CODE XREF: SAVE_REGS_AND_BREAK+5Bp

var_6		= word ptr -6

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 2
		mov	di, offset STR_BREAK ; "\nBreak	...."
		push	di
		call	PUTS
		add	sp, 2
		mov	[bp+var_6], 0

loc_FEC4F:				; CODE XREF: INT3_sub_FEC38+62j
		mov	ax, [bp+var_6]
		mov	cx, 6
		imul	cx
		mov	bx, ax
		mov	al, byte_8CA[bx]
		test	al, al
		jz	short loc_FEC93
		mov	ax, [bp+var_6]
		mov	cx, 6
		imul	cx
		mov	bx, ax
		mov	ax, word_8CC[bx]
		mov	ADDR_SEGMENT, ax
		mov	ax, [bp+var_6]
		imul	cx
		mov	bx, ax
		mov	ax, word_8CE[bx]
		mov	ADDR_OFFSET, ax
		mov	ax, [bp+var_6]
		imul	cx
		mov	di, ax
		mov	al, byte_8CB[di]
		cbw
		push	ax
		call	MEM_WRITE8
		add	sp, 2

loc_FEC93:				; CODE XREF: INT3_sub_FEC38+27j
		inc	[bp+var_6]
		cmp	[bp+var_6], 8
		jb	short loc_FEC4F
		or	SAVED_CPU_REGS.SAVE_FLAGS, 100h
		call	near ptr RESTORE_REGS_AND_IRET
		jmp	TAIL_loc_FFBE4
INT3_sub_FEC38	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

HDD_READ	proc near		; CODE XREF: DISK_READ+Cp

HDD_RETRIES	= byte ptr -0Ah
HDD_SECTORS_READ= word ptr -8
RETRIES_DONE	= word ptr -6

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 6
		mov	dl, DISK_IOPB.DISK_OPCODE
		mov	IOP_BLOCK.HDD_OPCODE, dl
		mov	IOP_BLOCK.HDD_STATUS, 0FFh
		mov	di, DISK_IOPB.DISK_TRACK
		mov	IOP_BLOCK.HDD_CYLINDER,	di
		mov	[bp+HDD_SECTORS_READ], 1
		mov	dx, [bp+HDD_SECTORS_READ]
		mov	al, DISK_IOPB.DISK_DRIVE_NUM
		cbw
		mov	cx, ax
		shl	dx, cl
		mov	al, DISK_IOPB.DISK_HEAD
		cbw
		add	dx, ax
		mov	IOP_BLOCK.HDD_DRIVE_AND_HEAD, dl
		mov	dl, DISK_IOPB.DISK_SECTOR
		mov	IOP_BLOCK.HDD_SECTOR, dl
		mov	di, DISK_IOPB.DISK_DMA_OFFSET
		mov	IOP_BLOCK.HDD_DMA_OFFSET, di
		mov	di, DISK_IOPB.DISK_DMA_SEGMENT
		mov	IOP_BLOCK.HDD_DMA_SEGMENT, di
		mov	di, DISK_IOPB.DISK_SECTOR_LEN
		mov	IOP_BLOCK.HDD_SECTOR_LEN, di
		mov	dl, DISK_IOPB.DISK_RETRIES
		mov	[bp+HDD_RETRIES], dl
		cmp	[bp+HDD_RETRIES], 0
		jg	short RETRIES_NOW_NONZERO
		mov	[bp+HDD_RETRIES], 1

RETRIES_NOW_NONZERO:			; CODE XREF: HDD_READ+62j
		mov	[bp+HDD_SECTORS_READ], 0
		jmp	short loc_FED48
; ───────────────────────────────────────────────────────────────────────────

HDD_READ_SECTORS:			; CODE XREF: HDD_READ+A7j
		mov	byte ptr IOP_BLOCK.RESVD_0, 1
		mov	[bp+RETRIES_DONE], 1
		jmp	short loc_FED30
; ───────────────────────────────────────────────────────────────────────────

loc_FED23:				; CODE XREF: HDD_READ+8Fj
		call	IOP8086_DO_IO
		cmp	IOP_BLOCK.HDD_STATUS, 0
		jz	short NO_LONGER_BUSY
		inc	[bp+RETRIES_DONE]

loc_FED30:				; CODE XREF: HDD_READ+79j
		mov	al, [bp+HDD_RETRIES]
		cbw
		cmp	ax, [bp+RETRIES_DONE]
		jnb	short loc_FED23

NO_LONGER_BUSY:				; CODE XREF: HDD_READ+83j
		mov	di, DISK_IOPB.DISK_SECTOR_LEN
		add	IOP_BLOCK.HDD_DMA_OFFSET, di
		inc	IOP_BLOCK.HDD_SECTOR
		inc	[bp+HDD_SECTORS_READ]

loc_FED48:				; CODE XREF: HDD_READ+6Dj
		mov	al, DISK_IOPB.DISK_SECTOR_COUNT
		cbw
		cmp	ax, [bp+HDD_SECTORS_READ]
		ja	short HDD_READ_SECTORS
		mov	dl, IOP_BLOCK.HDD_STATUS
		mov	DISK_IOPB.DISK_OP_STATUS, dl
		jmp	TAIL_loc_FFBE4
HDD_READ	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

AUTOBOOT_PROMPT	proc near		; CODE XREF: SYSCALL_0_MONITOR+1Cp
					; SAVE_REGS_AND_BREAK+55p

DO_AUTO_BOOT	= byte ptr -8
var_6		= word ptr -6
SKIP_SETUP	= byte ptr  4

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 4
		cmp	word ptr [bp+SKIP_SETUP], 0
		jnz	short DO_SETUP
		jmp	MONITOR_PROMPT
; ───────────────────────────────────────────────────────────────────────────

DO_SETUP:				; CODE XREF: AUTOBOOT_PROMPT+Cj
		mov	di, offset STR_VERSION_BANNER ;	"			      \nMonitor	V"...
		push	di
		call	PUTS
		add	sp, 2
		mov	di, offset STR_BOOT_INTERRUPT ;	"\nPress any key to interrupt boot\n"
		push	di
		call	PUTS
		add	sp, 2
		mov	[bp+var_6], 1

CHECK_KEY_INPUT:			; CODE XREF: AUTOBOOT_PROMPT+61j
		mov	di, 100
		push	di
		call	DELAY
		add	sp, 2
		mov	al, CHAR_BUF_byte_EBC
		cbw
		push	ax
		mov	di, 0FFFFh
		push	di
		sub	di, di
		push	di
		call	SIO_RX
		add	sp, 6
		test	ax, ax
		jnz	short loc_FEDAA
		sub	di, di
		jmp	short loc_FEDAD
; ───────────────────────────────────────────────────────────────────────────

loc_FEDAA:				; CODE XREF: AUTOBOOT_PROMPT+48j
		mov	di, 1

loc_FEDAD:				; CODE XREF: AUTOBOOT_PROMPT+4Cj
		mov	dx, di
		mov	[bp+DO_AUTO_BOOT], dl
		test	dl, dl
		jnz	short loc_FEDBF
		inc	[bp+var_6]
		cmp	[bp+var_6], 80
		jbe	short CHECK_KEY_INPUT

loc_FEDBF:				; CODE XREF: AUTOBOOT_PROMPT+58j
		cmp	[bp+DO_AUTO_BOOT], 0
		jnz	short NO_AUTO_BOOT
		mov	di, offset STR_BOOT_HDD	; "\nBooting from Hard Disk"
		push	di
		call	PUTS
		add	sp, 2

KEY_1_HD_BOOT:				; CODE XREF: AUTOBOOT_PROMPT+B1j
		call	IOP8086_DO_IO
		mov	di, 4
		push	di
		call	DISK_BOOT
		add	sp, 2
		jmp	short BOOT_ERR
; ───────────────────────────────────────────────────────────────────────────

NO_AUTO_BOOT:				; CODE XREF: AUTOBOOT_PROMPT+67j
		call	GETCHAR
		mov	CHAR_BUF_byte_EBC, al
		jmp	short BOOT_MENU
; ───────────────────────────────────────────────────────────────────────────

NOT_KEY_2_FD_BOOT:			; CODE XREF: AUTOBOOT_PROMPT+B6j
		cmp	ax, '3'
		jz	short loc_FEE2A
		cmp	ax, '?'
		jnz	short BOOT_ERR
		jmp	MONITOR_PROMPT
; ───────────────────────────────────────────────────────────────────────────

BOOT_ERR:				; CODE XREF: AUTOBOOT_PROMPT+80j
					; AUTOBOOT_PROMPT+92j
		call	ERR_BEEP

BOOT_MENU:				; CODE XREF: AUTOBOOT_PROMPT+88j
		mov	di, offset STR_BOOT_PROMPT ; "\nEnter [1] to boot from Hard Disk\nEnter"...
		push	di
		call	PUTS
		add	sp, 2
		call	GETCHAR_ECHO
		mov	CHAR_BUF_byte_EBC, al
		mov	al, CHAR_BUF_byte_EBC
		cbw
		cmp	ax, '1'
		jz	short KEY_1_HD_BOOT
		cmp	ax, '2'
		jnz	short NOT_KEY_2_FD_BOOT
		call	IOP8086_DO_IO

KEY_2_FD_BOOT:
		sub	di, di
		push	di		; 0 = FLOPPY
		call	DISK_BOOT	; FALLTHROUGH

MONITOR:				; CODE XREF: AUTOBOOT_PROMPT+EEj
		add	sp, 2
		jmp	short MONITOR_PROMPT
; ───────────────────────────────────────────────────────────────────────────

DISPATCH_COMMAND:			; CODE XREF: AUTOBOOT_PROMPT+12Bj
		shl	ax, 1
		xchg	ax, bx
		jmp	cs:MONITOR_COMMANDS[bx]
; ───────────────────────────────────────────────────────────────────────────

loc_FEE2A:				; CODE XREF: AUTOBOOT_PROMPT+8Dj
		call	IOP8086_DO_IO
		jmp	short MONITOR_PROMPT
; ───────────────────────────────────────────────────────────────────────────

MON_A_LTER_MEMORY:			; CODE XREF: AUTOBOOT_PROMPT+C9j
					; DATA XREF: AUTOBOOT_PROMPT:MONITOR_COMMANDSo
		call	M_ALTER_MEMORY
		jmp	short MONITOR_PROMPT
; ───────────────────────────────────────────────────────────────────────────

MON_B_REAKPOINT:			; DATA XREF: AUTOBOOT_PROMPT:MONITOR_COMMANDSo
		call	M_BREAKPOINT
		jmp	short MONITOR_PROMPT
; ───────────────────────────────────────────────────────────────────────────

MON_D_ISPLAY_MEMORY:			; DATA XREF: AUTOBOOT_PROMPT:MONITOR_COMMANDSo
		call	M_DISPLAY_MEMORY
		jmp	short MONITOR_PROMPT
; ───────────────────────────────────────────────────────────────────────────

MON_G_O_TO:				; DATA XREF: AUTOBOOT_PROMPT:MONITOR_COMMANDSo
		call	M_GOTO
		jmp	short MONITOR_PROMPT
; ───────────────────────────────────────────────────────────────────────────

MON_I_NPUT_FROM_PORT:			; DATA XREF: AUTOBOOT_PROMPT:MONITOR_COMMANDSo
		mov	di, 1
		push	di

DO_PORT_IO:				; CODE XREF: AUTOBOOT_PROMPT+102j
		call	M_PORT_IO
		jmp	short MONITOR
; ───────────────────────────────────────────────────────────────────────────

MON_K_DISK_IO:				; DATA XREF: AUTOBOOT_PROMPT:MONITOR_COMMANDSo
		call	M_DISK_IO
		jmp	short MONITOR_PROMPT
; ───────────────────────────────────────────────────────────────────────────

MON_L_OAD_BOOT:				; DATA XREF: AUTOBOOT_PROMPT:MONITOR_COMMANDSo
		call	M_LOAD_BOOT
		jmp	short MONITOR_PROMPT
; ───────────────────────────────────────────────────────────────────────────

MON_M_EMCPY:				; DATA XREF: AUTOBOOT_PROMPT:MONITOR_COMMANDSo
		call	M_MEMCPY
		jmp	short MONITOR_PROMPT
; ───────────────────────────────────────────────────────────────────────────

MON_O_UTPUT_TO_PORT:			; DATA XREF: AUTOBOOT_PROMPT:MONITOR_COMMANDSo
		sub	di, di
		push	di
		jmp	short DO_PORT_IO
; ───────────────────────────────────────────────────────────────────────────

MON_R_EGISTERS:				; DATA XREF: AUTOBOOT_PROMPT:MONITOR_COMMANDSo
		call	M_REGISTER
		jmp	short MONITOR_PROMPT
; ───────────────────────────────────────────────────────────────────────────

MON_S_INGLE_STEP:			; DATA XREF: AUTOBOOT_PROMPT:MONITOR_COMMANDSo
		call	M_SINGLE_STEP
		jmp	short MONITOR_PROMPT
; ───────────────────────────────────────────────────────────────────────────

MON_X_HEX_DOWNLOAD:			; DATA XREF: AUTOBOOT_PROMPT:MONITOR_COMMANDSo
		call	M_HEX_DOWNLOAD

MONITOR_PROMPT:				; CODE XREF: AUTOBOOT_PROMPT+Ej
					; AUTOBOOT_PROMPT+94j ...
		mov	di, offset STR_MONITOR_PROMPT ;	"\n< A,	B, D, G, I, K, L, M, O,	R, S, X	>"...
		push	di
		call	PUTS
		add	sp, 2
		call	GETCHAR_ECHO
		mov	CHAR_BUF_byte_EBC, al
		mov	al, CHAR_BUF_byte_EBC
		cbw
		sub	ax, 'A'
		cmp	ax, 23		; Num of letters of alphabet
		jbe	short DISPATCH_COMMAND

MON___NO_CMD:				; DATA XREF: AUTOBOOT_PROMPT:MONITOR_COMMANDSo
		call	ERR_BEEP
		jmp	short MONITOR_PROMPT ; Try to autoboot.
					; Allow	breaking into boot menu	and monitor.
; ───────────────────────────────────────────────────────────────────────────
MONITOR_COMMANDS dw offset MON_A_LTER_MEMORY; 0	; DATA XREF: AUTOBOOT_PROMPT+C9r
		dw offset MON_B_REAKPOINT; 1
		dw offset MON___NO_CMD	; 2
		dw offset MON_D_ISPLAY_MEMORY; 3
		dw offset MON___NO_CMD	; 4
		dw offset MON___NO_CMD	; 5
		dw offset MON_G_O_TO	; 6
		dw offset MON___NO_CMD	; 7
		dw offset MON_I_NPUT_FROM_PORT;	8
		dw offset MON___NO_CMD	; 9
		dw offset MON_K_DISK_IO	; 10
		dw offset MON_L_OAD_BOOT; 11
		dw offset MON_M_EMCPY	; 12
		dw offset MON___NO_CMD	; 13
		dw offset MON_O_UTPUT_TO_PORT; 14
		dw offset MON___NO_CMD	; 15
		dw offset MON___NO_CMD	; 16
		dw offset MON_R_EGISTERS; 17
		dw offset MON_S_INGLE_STEP; 18
		dw offset MON___NO_CMD	; 19
		dw offset MON___NO_CMD	; 20
		dw offset MON___NO_CMD	; 21
		dw offset MON___NO_CMD	; 22
		dw offset MON_X_HEX_DOWNLOAD; 23
; ───────────────────────────────────────────────────────────────────────────
		jmp	MONITOR_PROMPT
AUTOBOOT_PROMPT	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

M_MEMCPY	proc near		; CODE XREF: AUTOBOOT_PROMPT:MON_M_EMCPYp

var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6

		push	bp
		mov	bp, sp
		push	di
		push	si

loc_FEEC7:
		sub	sp, 0Ah
		mov	di, 1
		push	di
		call	sub_FF14A
		add	sp, 2
		call	sub_FF8DC
		test	ax, ax
		jz	short loc_FEF30
		cmp	CHAR_BUF_byte_EBC, 0Dh
		jnz	short loc_FEEE7

loc_FEEE2:				; CODE XREF: M_MEMCPY+3Fj
		call	ERR_BEEP
		jmp	short loc_FEF30
; ───────────────────────────────────────────────────────────────────────────

loc_FEEE7:				; CODE XREF: M_MEMCPY+1Ej
		mov	di, ADDR_OFFSET
		mov	[bp+var_8], di
		mov	di, ADDR_SEGMENT
		mov	[bp+var_6], di
		call	sub_FF8DC
		test	ax, ax
		jz	short loc_FEF30
		cmp	CHAR_BUF_byte_EBC, 0Dh
		jz	short loc_FEEE2

loc_FEF03:
		mov	di, ADDR_OFFSET
		mov	[bp+var_C], di
		mov	di, ADDR_SEGMENT
		mov	[bp+var_A], di
		lea	di, [bp+var_E]
		push	di
		call	sub_FF8EE
		add	sp, 2
		test	ax, ax
		jz	short loc_FEF30
		push	[bp+var_E]
		lea	di, [bp+var_C]
		push	di
		lea	di, [bp+var_8]
		push	di
		call	MEMCPY
		add	sp, 6

loc_FEF30:				; CODE XREF: M_MEMCPY+17j M_MEMCPY+23j ...
		jmp	TAIL_loc_FFBE4
M_MEMCPY	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

MEMCPY		proc near		; CODE XREF: DISK_BOOT+D1p
					; DISK_BOOT+144p ...

SRC		= word ptr  4
DEST		= word ptr  6
LEN		= byte ptr  8

		push	bp
		mov	bp, sp
		push	ds
		push	di
		push	si
		push	es
		mov	di, [bp+DEST]
		mov	es, word ptr [di+2]
		mov	di, [di]
		mov	bx, [bp+SRC]
		mov	si, [bx]
		mov	ds, word ptr [bx+2]
		mov	cx, word ptr [bp+LEN]
		cld
		rep movsb
		pop	es
		pop	si
		pop	di
		pop	ds
		pop	bp
		retn
MEMCPY		endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

M_PORT_IO	proc near		; CODE XREF: AUTOBOOT_PROMPT:DO_PORT_IOp

IO_VAL16	= word ptr -0Ah
IO_PORT		= word ptr -8
WIDTH		= byte ptr -6
DIRECTION_INPUT	= byte ptr  4

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 6
		mov	[bp+WIDTH], 1
		mov	di, 1
		push	di
		call	sub_FF14A
		add	sp, 2
		call	GETCHAR_ECHO
		mov	CHAR_BUF_byte_EBC, al
		cmp	CHAR_BUF_byte_EBC, 'B'
		jnz	short NOT_BYTE
		mov	[bp+WIDTH], 0

GOT_WIDTH:				; CODE XREF: M_PORT_IO+6Cj
		mov	di, 1
		push	di
		call	sub_FF14A
		add	sp, 2
		lea	di, [bp+IO_PORT]
		push	di
		call	sub_FF8EE
		add	sp, 2
		test	ax, ax
		jz	short loc_FEFC9
		mov	di, 1
		push	di
		call	sub_FF14A
		add	sp, 2
		cmp	[bp+DIRECTION_INPUT], 0
		jz	short loc_FEFDB
		cmp	[bp+WIDTH], 0
		jz	short loc_FEFCC
		push	[bp+IO_PORT]
		call	IN16
		add	sp, 2
		push	ax
		call	PRINTHEX16

loc_FEFBA:				; CODE XREF: M_PORT_IO+81j
		add	sp, 2
		jmp	short loc_FEFC9
; ───────────────────────────────────────────────────────────────────────────

NOT_BYTE:				; CODE XREF: M_PORT_IO+21j
		cmp	CHAR_BUF_byte_EBC, 'W'
		jz	short GOT_WIDTH
		call	ERR_BEEP

loc_FEFC9:				; CODE XREF: M_PORT_IO+3Dj
					; M_PORT_IO+65j ...
		jmp	TAIL_loc_FFBE4
; ───────────────────────────────────────────────────────────────────────────

loc_FEFCC:				; CODE XREF: M_PORT_IO+53j
		push	[bp+IO_PORT]
		call	IN8
		add	sp, 2
		push	ax
		call	PRINTHEX8
		jmp	short loc_FEFBA
; ───────────────────────────────────────────────────────────────────────────

loc_FEFDB:				; CODE XREF: M_PORT_IO+4Dj
		lea	di, [bp+IO_VAL16]
		push	di
		call	sub_FF8EE
		add	sp, 2
		test	ax, ax
		jz	short loc_FEFC9
		cmp	[bp+WIDTH], 0
		jz	short loc_FEFFD
		push	[bp+IO_VAL16]
		push	[bp+IO_PORT]
		call	OUT16

loc_FEFF8:				; CODE XREF: M_PORT_IO+AEj
		add	sp, 4
		jmp	short loc_FEFC9
; ───────────────────────────────────────────────────────────────────────────

loc_FEFFD:				; CODE XREF: M_PORT_IO+95j
		push	[bp+IO_VAL16]
		push	[bp+IO_PORT]
		call	OUT8
		jmp	short loc_FEFF8
M_PORT_IO	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

PUTS		proc near		; CODE XREF: FINISH_POST+8Ep
					; FINISH_POST+A8p ...

BUFFER		= word ptr  4

		push	bp
		mov	bp, sp
		push	di
		push	si
		push	[bp+BUFFER]
		sub	di, di
		push	di		; Attrs
		push	di		; Channel = 0
		call	DO_PUTS
		add	sp, 6
		jmp	TAIL_loc_FFBE4
PUTS		endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

DO_PUTS		proc near		; CODE XREF: SYSCALL_7_PUTS+6p	PUTS+Cp

var_8		= byte ptr -8
LENGTH		= word ptr -6
CHANNEL		= word ptr  4
ATTRS		= word ptr  6
BUFFER		= word ptr  8

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 4
		mov	[bp+LENGTH], 0
		mov	di, [bp+ATTRS]
		mov	ADDR_SEGMENT, di
		mov	di, [bp+BUFFER]
		mov	ADDR_OFFSET, di
		jmp	short loc_FF081
; ───────────────────────────────────────────────────────────────────────────

loc_FF03B:				; CODE XREF: DO_PUTS+54j DO_PUTS+5Aj
		push	[bp+BUFFER]
		push	[bp+ATTRS]
		push	[bp+LENGTH]
		push	[bp+CHANNEL]
		call	SIO_TX
		add	sp, 8
		cmp	[bp+var_8], 0Ah
		jnz	short loc_FF060
		push	[bp+CHANNEL]
		call	DO_PRINT_CRLF
		add	sp, 2
		inc	ADDR_OFFSET

loc_FF060:				; CODE XREF: DO_PUTS+33j
		mov	di, ADDR_OFFSET
		mov	[bp+BUFFER], di
		mov	[bp+LENGTH], 0
		jmp	short loc_FF081
; ───────────────────────────────────────────────────────────────────────────

loc_FF06E:				; CODE XREF: DO_PUTS+6Bj
		cmp	[bp+var_8], 0Ah
		jz	short loc_FF03B
		cmp	[bp+LENGTH], 0Ah
		jge	short loc_FF03B
		inc	[bp+LENGTH]
		inc	ADDR_OFFSET

loc_FF081:				; CODE XREF: DO_PUTS+1Bj DO_PUTS+4Ej
		call	MEM_READ8
		mov	[bp+var_8], al
		test	al, al
		jnz	short loc_FF06E
		push	[bp+BUFFER]
		push	[bp+ATTRS]
		push	[bp+LENGTH]
		push	[bp+CHANNEL]
		call	SIO_TX
		add	sp, 8
		jmp	TAIL_loc_FFBE4
DO_PUTS		endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

PRINT_CRLF	proc near		; CODE XREF: FINISH_POST+72p
					; DISK_BOOT:BOOT_GOOD_p ...
		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	di, di
		push	di
		call	DO_PRINT_CRLF
		add	sp, 2
		jmp	TAIL_loc_FFBE4
PRINT_CRLF	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

DO_PRINT_CRLF	proc near		; CODE XREF: SYSCALL_6_PRINT_CRLF+1p
					; DO_PUTS+38p ...

var_6		= byte ptr -6
var_5		= byte ptr -5
CHANNEL		= word ptr  4

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 2
		mov	[bp+var_6], 0Dh
		mov	[bp+var_5], 0Ah
		lea	di, [bp+var_6]
		push	di
		sub	di, di
		push	di
		mov	di, 2
		push	di
		push	[bp+CHANNEL]
		call	SIO_TX
		add	sp, 8
		jmp	TAIL_loc_FFBE4
DO_PRINT_CRLF	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

PRINTHEX16	proc near		; CODE XREF: M_PORT_IO+5Fp
					; M_REGISTER+44p ...

ARG16		= word ptr  4

		push	bp
		mov	bp, sp
		push	di
		push	si
		mov	di, [bp+ARG16]
		and	di, 0FF00h
		mov	cx, 8
		sar	di, cl
		push	di
		call	PRINTHEX8
		add	sp, 2
		mov	di, [bp+ARG16]
		and	di, 0FFh
		push	di
		call	PRINTHEX8
		add	sp, 2
		jmp	TAIL_loc_FFBE4
PRINTHEX16	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

PRINTHEX8	proc near		; CODE XREF: BOOT_FAILED_ERR+14p
					; M_PORT_IO+7Ep ...

ARG8		= byte ptr  4

		push	bp
		mov	bp, sp
		push	di
		push	si
		mov	di, offset PRINTHEX_unk_F1C
		push	di
		mov	di, offset PRINTHEX_unk_F1A
		push	di
		mov	al, [bp+ARG8]
		cbw
		push	ax
		call	FMT_HEX
		add	sp, 6
		mov	di, offset PRINTHEX_unk_F1A
		push	di
		call	PUTCHAR
		add	sp, 2
		mov	di, offset PRINTHEX_unk_F1C
		push	di
		call	PUTCHAR
		add	sp, 2
		jmp	TAIL_loc_FFBE4
PRINTHEX8	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

sub_FF134	proc near		; CODE XREF: M_BREAKPOINT+43p
					; M_BREAKPOINT:loc_FF3FAp ...
		push	bp
		mov	bp, sp
		push	di
		push	si
		call	PRINT_CRLF
		mov	di, 2
		push	di
		call	sub_FF14A
		add	sp, 2
		jmp	TAIL_loc_FFBE4
sub_FF134	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

sub_FF14A	proc near		; CODE XREF: M_DISK_IO+9p M_GOTO+9p ...

var_6		= word ptr -6
arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 2
		mov	[bp+var_6], 1
		jmp	short loc_FF166
; ───────────────────────────────────────────────────────────────────────────

loc_FF159:				; CODE XREF: sub_FF14A+22j
		mov	di, offset CHR_SPACE ; " "
		push	di
		call	PUTCHAR
		add	sp, 2
		inc	[bp+var_6]

loc_FF166:				; CODE XREF: sub_FF14A+Dj
		mov	di, [bp+arg_0]
		cmp	[bp+var_6], di
		jle	short loc_FF159
		jmp	TAIL_loc_FFBE4
sub_FF14A	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

SIO_RX		proc near		; CODE XREF: SYSCALL_1_5_SIO_GET_STAT_ATTR+7p
					; SIO_GETC+15p	...

CHANNEL		= byte ptr  4
LENGTH		= word ptr  6
BUFFER		= word ptr  8

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	bx, [bp+BUFFER]
		mov	al, 16h		; sizeof(SIO_CHAN_REGS)
		mul	[bp+CHANNEL]
		lea	si, SIO_REGS_0
		add	si, ax
		cmp	[bp+LENGTH], 0FFFFh ; Just the attributes?
		jz	short SET_ATTRS
		xor	cx, cx
		cmp	cx, [bp+LENGTH]
		jnb	short loc_FF1F1
		mov	dx, [si+CHAN_REGS.CHAN_RX_LEN] ; Receive Data Buffer Length Register
		mov	ax, [si+CHAN_REGS.CHAN_RX_OUT] ; Receive Buffer	Output Pointer Register
		mov	di, word ptr [si+CHAN_REGS.CHAN_RX_LO] ; Receive Data Buffer Address Register LO
		add	di, ax

WAIT_FOR_IO:				; CODE XREF: SIO_RX+34j SIO_RX+39j ...
		call	SIO_WAIT_READY
		mov	ax, [si+CHAN_REGS.CHAN_RX_IN] ;	Receive	Buffer Input Pointer Register
		test	ax, ax
		js	short WAIT_FOR_IO
		cmp	ax, [si+CHAN_REGS.CHAN_RX_OUT] ; Receive Buffer	Output Pointer Register
		jz	short WAIT_FOR_IO
		mov	ax, [si+CHAN_REGS.CHAN_STAT] ; Channel Status Register
		and	ax, 0F0h
		jz	short loc_FF1C0
		mov	[si+CHAN_REGS.CHAN_CMD], 89h ; 'ë' ; Channel Command Register
		call	NEW_COMMAND
		mov	al, 0
		jmp	short SIO_RX_DONE
; ───────────────────────────────────────────────────────────────────────────

loc_FF1C0:				; CODE XREF: SIO_RX+41j SIO_RX+74j
		mov	al, [di]
		inc	[si+CHAN_REGS.CHAN_RX_OUT] ; Receive Buffer Output Pointer Register
		inc	di
		cmp	[si+CHAN_REGS.CHAN_RX_OUT], dx ; Receive Buffer	Output Pointer Register
		jb	short loc_FF1D3
		mov	[si+CHAN_REGS.CHAN_RX_OUT], 0 ;	Receive	Buffer Output Pointer Register
		mov	di, word ptr [si+CHAN_REGS.CHAN_RX_LO] ; Receive Data Buffer Address Register LO

loc_FF1D3:				; CODE XREF: SIO_RX+57j
		mov	[bx], al
		inc	bx
		inc	cx
		cmp	cx, [bp+LENGTH]
		jnb	short loc_FF1F1

loc_FF1DC:				; CODE XREF: SIO_RX+6Fj
		mov	ax, [si+CHAN_REGS.CHAN_RX_IN] ;	Receive	Buffer Input Pointer Register
		test	ax, ax
		js	short loc_FF1DC
		cmp	ax, [si+CHAN_REGS.CHAN_RX_OUT] ; Receive Buffer	Output Pointer Register
		jnz	short loc_FF1C0
		mov	[si+CHAN_REGS.CHAN_CMD], 83h ; 'â' ; Channel Command Register
		call	NEW_COMMAND
		jmp	short WAIT_FOR_IO
; ───────────────────────────────────────────────────────────────────────────

loc_FF1F1:				; CODE XREF: SIO_RX+1Fj SIO_RX+68j
		mov	[si+CHAN_REGS.CHAN_CMD], 83h ; 'â' ; Channel Command Register
		call	NEW_COMMAND
		jmp	short SIO_RX_DONE
; ───────────────────────────────────────────────────────────────────────────

SET_ATTRS:				; CODE XREF: SIO_RX+18j
		mov	dx, [si+CHAN_REGS.CHAN_PARM] ; Channel Parameter Register
		mov	al, 0FFh

loc_FF1FF:				; CODE XREF: SIO_RX+92j
		mov	bx, [si+CHAN_REGS.CHAN_RX_IN] ;	Receive	Buffer Input Pointer Register
		test	bx, bx
		js	short loc_FF1FF
		cmp	bx, [si+CHAN_REGS.CHAN_RX_OUT] ; Receive Buffer	Output Pointer Register
		jnz	short SIO_RX_DONE
		xor	al, al

SIO_RX_DONE:				; CODE XREF: SIO_RX+4Cj SIO_RX+86j ...
		pop	di
		pop	si
		pop	bp
		retn
SIO_RX		endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

SIO_TX		proc near		; CODE XREF: SYSCALL_4_SIO_SET_ATTRS+6p
					; DO_PUTS+29p ...

CHANNEL		= byte ptr  4
LENGTH		= word ptr  6		; 0FFFFh = only	set attrs
OFFSET_OR_ATTRS	= word ptr  8
BUFFER		= word ptr  0Ah		; Not used if LENGTH=0FFFFh

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	al, 16h
		mul	[bp+CHANNEL]
		lea	si, SIO_REGS_0
		add	si, ax
		cmp	[bp+LENGTH], 0FFFFh
		jz	short JUST_SET_ATTR
		cmp	[bp+LENGTH], 0
		jle	short SIO_TX_DONE ; Zero length	write
		call	SIO_WAIT_READY

WAIT_CHAN_READY:			; CODE XREF: SIO_TX+2Cj
		mov	cx, [si+CHAN_REGS.CHAN_STAT] ; Channel Status Register
		and	cx, 1000h
		cmp	cx, 1000h
		jnz	short WAIT_CHAN_READY
		mov	al, 10
		mul	[bp+CHANNEL]
		mov	cl, 8
		lea	di, SIO_BUFS_unk_900
		add	di, ax
		mov	dx, di
		and	dx, 0FFh
		mov	[si+CHAN_REGS.CHAN_TX_LO], dl ;	Transmit Data Buffer Address Register LO
		mov	dx, di
		and	dx, 0FF00h
		shr	dx, cl
		mov	word ptr [si+CHAN_REGS.CHAN_TX_MID], dx	; Transmit Data	Buffer Address Register	MID
		mov	cx, [bp+LENGTH]
		cmp	cx, 10
		jbe	short LENGTH_NOW_LESS_THAN_10
		mov	cx, 10

LENGTH_NOW_LESS_THAN_10:		; CODE XREF: SIO_TX+56j
		mov	[si+CHAN_REGS.CHAN_TX_LEN], cx ; Transmit Data Buffer Length Register
		push	si
		mov	ds, [bp+OFFSET_OR_ATTRS]
		mov	si, [bp+BUFFER]
		rep movsb		; Copy data to TX buffer
		pop	si
		mov	ax, 0
		mov	ds, ax
		mov	[si+CHAN_REGS.CHAN_CMD], 82h ; 'é' ; Channel Command Register
		call	NEW_COMMAND
		jmp	short SIO_TX_DONE
; ───────────────────────────────────────────────────────────────────────────

JUST_SET_ATTR:				; CODE XREF: SIO_TX+15j
		mov	ax, [bp+OFFSET_OR_ATTRS]
		mov	[si+0],	ax
		mov	al, 81h	; 'ü'
		call	SIO_COMMAND_WHEN_READY ; AL=command

SIO_TX_DONE:				; CODE XREF: SIO_TX+1Cj SIO_TX+74j
		pop	di
		pop	si
		pop	bp
		retn
SIO_TX		endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

M_REGISTER	proc near		; CODE XREF: AUTOBOOT_PROMPT:MON_R_EGISTERSp

var_A		= byte ptr -0Ah
var_8		= byte ptr -8
var_6		= word ptr -6

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 6
		mov	di, 1
		push	di
		call	sub_FF14A
		add	sp, 2
		call	GETCHAR_ECHO
		mov	[bp+var_8], al
		cmp	[bp+var_8], 0Dh
		jnz	short loc_FF311
		call	PRINT_REGS
		jmp	short loc_FF30E
; ───────────────────────────────────────────────────────────────────────────

loc_FF2B9:				; CODE XREF: M_REGISTER+94j
		mov	bx, [bp+var_6]
		shl	bx, 1
		mov	dl, byte ptr (REG_NAMES+1)[bx]
		cmp	dl, [bp+var_A]
		jnz	short loc_FF32D
		mov	di, 2
		push	di
		call	sub_FF14A
		add	sp, 2
		mov	di, [bp+var_6]
		shl	di, 1
		push	word ptr SAVED_CPU_REGS.SAVE_AX[di]
		call	PRINTHEX16
		add	sp, 2
		mov	di, offset CHR_DASH_0 ;	"-"
		push	di
		call	PUTCHAR
		add	sp, 2
		call	GETCHAR_ECHO
		mov	CHAR_BUF_byte_EBC, al
		cmp	CHAR_BUF_byte_EBC, ' '
		jz	short loc_FF30E
		cmp	CHAR_BUF_byte_EBC, 0Dh
		jz	short loc_FF30E
		mov	di, [bp+var_6]
		shl	di, 1
		add	di, offset SAVED_CPU_REGS
		push	di
		call	READ_MEM_ADDR_sub_FE9D8
		add	sp, 2

loc_FF30E:				; CODE XREF: M_REGISTER+21j
					; M_REGISTER+5Fj ...
		jmp	TAIL_loc_FFBE4
; ───────────────────────────────────────────────────────────────────────────

loc_FF311:				; CODE XREF: M_REGISTER+1Cj
		call	GETCHAR_ECHO
		mov	[bp+var_A], al
		mov	[bp+var_6], 0

loc_FF31C:				; CODE XREF: M_REGISTER+9Ej
		mov	bx, [bp+var_6]
		shl	bx, 1
		mov	dl, byte ptr REG_NAMES[bx] ; "AX"
		cmp	dl, [bp+var_8]
		jnz	short loc_FF32D
		jmp	loc_FF2B9
; ───────────────────────────────────────────────────────────────────────────

loc_FF32D:				; CODE XREF: M_REGISTER+2Fj
					; M_REGISTER+92j
		inc	[bp+var_6]
		cmp	[bp+var_6], 0Bh
		jbe	short loc_FF31C
		call	ERR_BEEP
		jmp	short loc_FF30E
M_REGISTER	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

M_BREAKPOINT	proc near		; CODE XREF: AUTOBOOT_PROMPT:MON_B_REAKPOINTp

var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 6
		mov	byte ptr [bp+var_6], ':'
		mov	di, 1
		push	di
		call	sub_FF14A
		add	sp, 2
		call	GETCHAR_ECHO
		mov	CHAR_BUF_byte_EBC, al
		cmp	CHAR_BUF_byte_EBC, 0Dh
		jnz	short loc_FF3CC
		mov	[bp+var_A], 0

loc_FF364:				; CODE XREF: M_BREAKPOINT+8Ej
		cmp	[bp+var_A], 8
		jb	short loc_FF36D
		jmp	loc_FF3F7
; ───────────────────────────────────────────────────────────────────────────

loc_FF36D:				; CODE XREF: M_BREAKPOINT+2Cj
		mov	ax, [bp+var_A]
		mov	cx, 6
		imul	cx
		mov	bx, ax
		mov	al, byte_8CA[bx]
		test	al, al
		jz	short loc_FF3C7
		call	sub_FF134
		push	[bp+var_A]
		call	PRINTHEX8
		add	sp, 2
		mov	di, 2
		push	di
		call	sub_FF14A
		add	sp, 2
		mov	ax, [bp+var_A]
		mov	cx, 6
		imul	cx
		mov	bx, ax
		push	word_8CC[bx]
		call	PRINTHEX16
		add	sp, 2
		lea	di, [bp+var_6]
		push	di
		call	PUTCHAR
		add	sp, 2
		mov	ax, [bp+var_A]
		mov	cx, 6
		imul	cx
		mov	bx, ax
		push	word_8CE[bx]
		call	PRINTHEX16
		add	sp, 2

loc_FF3C7:				; CODE XREF: M_BREAKPOINT+41j
		inc	[bp+var_A]
		jmp	short loc_FF364
; ───────────────────────────────────────────────────────────────────────────

loc_FF3CC:				; CODE XREF: M_BREAKPOINT+21j
		cmp	CHAR_BUF_byte_EBC, '-'
		jnz	short loc_FF402
		lea	di, [bp+var_8]
		push	di
		call	sub_FF906
		add	sp, 2
		test	ax, ax
		jz	short loc_FF3FA
		cmp	byte ptr [bp+var_8], 8
		jge	short loc_FF3FA
		mov	al, byte ptr [bp+var_8]
		cbw
		mov	cx, 6
		imul	cx
		mov	di, ax
		mov	byte_8CA[di], 0

loc_FF3F7:				; CODE XREF: M_BREAKPOINT+2Ej
					; M_BREAKPOINT+C4j ...
		jmp	TAIL_loc_FFBE4
; ───────────────────────────────────────────────────────────────────────────

loc_FF3FA:				; CODE XREF: M_BREAKPOINT+A3j
					; M_BREAKPOINT+A9j
		call	sub_FF134

loc_FF3FD:				; CODE XREF: M_BREAKPOINT+E2j
					; M_BREAKPOINT+E9j ...
		call	ERR_BEEP
		jmp	short loc_FF3F7
; ───────────────────────────────────────────────────────────────────────────

loc_FF402:				; CODE XREF: M_BREAKPOINT+95j
		mov	[bp+var_A], 0

loc_FF407:				; CODE XREF: M_BREAKPOINT+121j
		mov	ax, [bp+var_A]
		mov	cx, 6
		imul	cx
		mov	bx, ax
		mov	al, byte_8CA[bx]
		test	al, al
		jnz	short loc_FF456
		call	PARSE_ADDR_sub_FE96E
		test	ax, ax
		jz	short loc_FF3FD
		cmp	CHAR_BUF_byte_EBC, 0Dh
		jnz	short loc_FF3FD
		mov	di, ADDR_SEGMENT
		mov	ax, [bp+var_A]
		mov	cx, 6
		imul	cx
		mov	si, ax
		mov	word_8CC[si], di
		mov	di, ADDR_OFFSET
		mov	ax, [bp+var_A]
		imul	cx
		mov	si, ax
		mov	word_8CE[si], di
		mov	ax, [bp+var_A]
		imul	cx
		mov	di, ax
		mov	byte_8CA[di], 1
		jmp	short loc_FF3F7
; ───────────────────────────────────────────────────────────────────────────

loc_FF456:				; CODE XREF: M_BREAKPOINT+DBj
		inc	[bp+var_A]
		cmp	[bp+var_A], 8
		jb	short loc_FF407
		jmp	short loc_FF3FD
M_BREAKPOINT	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

PRINT_REGS	proc near		; CODE XREF: SAVE_REGS_AND_BREAK:loc_FE4AAp
					; M_REGISTER+1Ep ...

var_6		= word ptr -6

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 2
		mov	di, offset STR_REG_CS_IP ; "\nCS:IP "
		push	di
		call	PUTS
		add	sp, 2
		push	SAVED_CPU_REGS.SAVE_CS
		call	PRINTHEX16
		add	sp, 2
		mov	di, offset CHR_COLON ; ":"
		push	di
		call	PUTCHAR
		add	sp, 2
		push	SAVED_CPU_REGS.SAVE_IP
		call	PRINTHEX16
		add	sp, 2
		mov	di, offset STR_REG_FLAGS ; "  Flags  "
		push	di
		call	PUTS
		add	sp, 2
		call	PRINT_FLAGS_REG
		call	sub_FF134
		mov	[bp+var_6], 0

loc_FF4A7:				; CODE XREF: PRINT_REGS+6Dj
		mov	di, [bp+var_6]
		shl	di, 1
		add	di, offset REG_NAMES ; "AX"
		push	di
		mov	di, 2
		push	di
		sub	di, di
		push	di
		call	PRINT_BUF
		add	sp, 6
		mov	di, 5
		push	di
		call	sub_FF14A
		add	sp, 2
		inc	[bp+var_6]
		cmp	[bp+var_6], 0Bh
		jb	short loc_FF4A7
		call	sub_FF134
		mov	[bp+var_6], 0

loc_FF4D9:				; CODE XREF: PRINT_REGS+97j
		mov	di, [bp+var_6]
		shl	di, 1
		push	word ptr SAVED_CPU_REGS.SAVE_AX[di]
		call	PRINTHEX16
		add	sp, 2
		mov	di, 3
		push	di
		call	sub_FF14A
		add	sp, 2
		inc	[bp+var_6]
		cmp	[bp+var_6], 0Bh
		jb	short loc_FF4D9
		jmp	TAIL_loc_FFBE4
PRINT_REGS	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

PRINT_FLAGS_REG	proc near		; CODE XREF: PRINT_REGS+3Ap

FLAG_NUMBER	= word ptr -8
var_6		= word ptr -6

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 4
		mov	di, SAVED_CPU_REGS.SAVE_FLAGS
		mov	[bp+var_6], di
		mov	[bp+FLAG_NUMBER], 0

PRINT_FLAG:				; CODE XREF: PRINT_FLAGS_REG+51j
		mov	dx, [bp+FLAG_NUMBER]
		mov	bx, dx
		cmp	byte ptr STR_FLAG_NAMES[bx], ' ' ; "    ODITSZ A P C"
		jz	short loc_FF540
		cmp	[bp+var_6], 8000h
		jb	short loc_FF52C
		add	dx, offset STR_FLAG_NAMES ; "	 ODITSZ	A P C"
		push	dx
		jmp	short loc_FF530
; ───────────────────────────────────────────────────────────────────────────

loc_FF52C:				; CODE XREF: PRINT_FLAGS_REG+25j
		mov	di, offset CHR_DASH_1 ;	"-"
		push	di

loc_FF530:				; CODE XREF: PRINT_FLAGS_REG+2Cj
		call	PUTCHAR
		add	sp, 2
		mov	di, 1
		push	di
		call	sub_FF14A
		add	sp, 2

loc_FF540:				; CODE XREF: PRINT_FLAGS_REG+1Ej
		mov	di, [bp+var_6]
		shl	di, 1
		mov	[bp+var_6], di
		inc	[bp+FLAG_NUMBER]
		cmp	[bp+FLAG_NUMBER], 10h
		jb	short PRINT_FLAG
		jmp	TAIL_loc_FFBE4
PRINT_FLAGS_REG	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; AL=command

SIO_COMMAND_WHEN_READY proc near	; CODE XREF: FINISH_POST:loc_FE311p
					; SIO_TX+7Ep
		call	SIO_WAIT_READY
		mov	[si+CHAN_REGS.CHAN_CMD], al ; Channel Command Register
		call	NEW_COMMAND
		retn
SIO_COMMAND_WHEN_READY endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


SYS_CMD_WHEN_READY proc	near		; CODE XREF: FINISH_POST+59p
		push	dx

WAIT_READY:				; CODE XREF: SYS_CMD_WHEN_READY+8j
		mov	dh, SYS_CMD_REG
		and	dh, 80h
		jnz	short WAIT_READY
		mov	SYS_CMD_REG, al
		call	NEW_COMMAND
		pop	dx
		retn
SYS_CMD_WHEN_READY endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

MEM_WRITE8	proc near		; CODE XREF: DISK_IO+37p sub_FEBD6+50p ...

DATA8		= byte ptr  4

		push	bp
		mov	bp, sp
		push	ds
		mov	bx, ADDR_OFFSET
		mov	ds, ADDR_SEGMENT
		mov	al, [bp+DATA8]
		mov	[bx], al
		pop	ds
		pop	bp
		retn
MEM_WRITE8	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


MEM_READ8	proc near		; CODE XREF: DISK_IO+10p sub_FEBD6+44p ...
		push	ds
		mov	bx, ADDR_OFFSET
		mov	ds, ADDR_SEGMENT
		mov	al, [bx]
		pop	ds
		retn
MEM_READ8	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


SIO_WAIT_READY	proc near		; CODE XREF: SIO_RX:WAIT_FOR_IOp
					; SIO_TX+1Ep ...
		push	dx

WAIT_READY:				; CODE XREF: SIO_WAIT_READY+7j
		mov	dh, [si+4]
		and	dh, 80h
		jnz	short WAIT_READY
		pop	dx
		retn
SIO_WAIT_READY	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

PRINT_BUF	proc near		; CODE XREF: DO_SYSCALL_3_PUTC+11p
					; ERR_BEEP+10p	...

AUTOLEN		= word ptr  4
LEN		= word ptr  6
BUF		= byte ptr  8

		push	bp
		mov	bp, sp
		push	di
		push	si
		push	word ptr [bp+BUF]
		sub	di, di
		push	di
		push	[bp+LEN]
		push	[bp+AUTOLEN]
		call	SIO_TX
		add	sp, 8
		jmp	TAIL_loc_FFBE4
PRINT_BUF	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

M_ALTER_MEMORY	proc near		; CODE XREF: AUTOBOOT_PROMPT:MON_A_LTER_MEMORYp

var_A		= byte ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 6
		mov	byte ptr [bp+var_8], '-'
		mov	[bp+var_A], 1
		mov	di, 1
		push	di
		call	sub_FF14A
		add	sp, 2
		call	sub_FF8DC
		test	ax, ax
		jz	short loc_FF5E3
		cmp	CHAR_BUF_byte_EBC, 0Dh
		jz	short loc_FF5EE
		call	ERR_BEEP

loc_FF5E3:				; CODE XREF: M_ALTER_MEMORY+1Fj
					; M_ALTER_MEMORY+3Aj
		jmp	TAIL_loc_FFBE4
; ───────────────────────────────────────────────────────────────────────────

loc_FF5E6:				; CODE XREF: M_ALTER_MEMORY+7Fj
					; M_ALTER_MEMORY+8Dj
		mov	[bp+var_A], 0

loc_FF5EA:				; CODE XREF: M_ALTER_MEMORY+65j
					; M_ALTER_MEMORY+6Cj ...
		inc	ADDR_OFFSET

loc_FF5EE:				; CODE XREF: M_ALTER_MEMORY+26j
		cmp	[bp+var_A], 0
		jz	short loc_FF5E3
		call	PRINT_MEM_ADDR_sub_FF8A2
		call	MEM_READ8
		mov	byte ptr [bp+var_6], al
		mov	al, byte ptr [bp+var_6]
		cbw
		push	ax
		call	PRINTHEX8
		add	sp, 2
		lea	di, [bp+var_8]
		push	di
		call	PUTCHAR
		add	sp, 2
		call	GETCHAR_ECHO
		mov	CHAR_BUF_byte_EBC, al
		cmp	CHAR_BUF_byte_EBC, ' '
		jz	short loc_FF5EA
		cmp	CHAR_BUF_byte_EBC, 0Dh
		jz	short loc_FF5EA
		lea	di, [bp+var_6]
		push	di
		mov	al, CHAR_BUF_byte_EBC
		cbw
		push	ax
		call	PARSE_HEX_sub_FF6BA
		add	sp, 4
		test	ax, ax
		jz	short loc_FF5E6
		lea	di, [bp+var_6]
		push	di
		call	sub_FEA94
		add	sp, 2
		test	ax, ax
		jz	short loc_FF5E6
		mov	al, byte ptr [bp+var_6]
		cbw
		push	ax
		call	MEM_WRITE8
		add	sp, 2
		call	MEM_READ8
		mov	di, ax
		mov	al, byte ptr [bp+var_6]
		cbw
		cmp	di, ax
		jz	short loc_FF5EA
		call	ERR_BEEP
		jmp	short loc_FF5EA
M_ALTER_MEMORY	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

M_LOAD_BOOT	proc near		; CODE XREF: AUTOBOOT_PROMPT:MON_L_OAD_BOOTp

var_6		= word ptr -6

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 2
		mov	di, 1
		push	di
		call	sub_FF14A
		add	sp, 2
		lea	di, [bp+var_6]
		push	di
		call	sub_FF906
		add	sp, 2
		test	ax, ax
		jz	short loc_FF69B
		cmp	byte ptr [bp+var_6], 0
		jl	short loc_FF69B
		cmp	byte ptr [bp+var_6], 5
		jg	short loc_FF69B
		mov	al, byte ptr [bp+var_6]
		cbw
		push	ax
		call	DISK_BOOT
		add	sp, 2

loc_FF69B:				; CODE XREF: M_LOAD_BOOT+1Ej
					; M_LOAD_BOOT+24j ...
		call	ERR_BEEP
		jmp	TAIL_loc_FFBE4
M_LOAD_BOOT	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; DI=FDC_QUEUE

FDC_sub_FF6A2	proc near		; CODE XREF: FDC_ENQUEUE_CMD+Cp
		push	cx
		mov	ax, ds
		mov	cl, 4
		rol	ax, cl
		mov	ch, al
		and	ch, 0Fh
		mov	[di+2],	ch
		and	al, 0F0h
		add	ax, si
		mov	[di], ax
		pop	cx
		retn
FDC_sub_FF6A2	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

PARSE_HEX_sub_FF6BA proc near		; CODE XREF: READ_MEM_ADDR_sub_FE9D8+4Bp
					; sub_FEA94+45p ...

var_6		= byte ptr -6
arg_0		= byte ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 2
		mov	[bp+var_6], 1
		cmp	[bp+arg_0], 'f'
		jg	short loc_FF704
		cmp	[bp+arg_0], 'a'
		jl	short loc_FF704
		mov	bx, [bp+arg_2]
		mov	al, [bp+arg_0]
		cbw
		add	ax, -57h
		jmp	short loc_FF700
; ───────────────────────────────────────────────────────────────────────────

loc_FF6DE:				; CODE XREF: PARSE_HEX_sub_FF6BA+4Ej
		cmp	[bp+arg_0], 'A'
		jl	short loc_FF70A
		mov	bx, [bp+arg_2]
		mov	al, [bp+arg_0]
		cbw
		add	ax, -37h
		jmp	short loc_FF700
; ───────────────────────────────────────────────────────────────────────────

loc_FF6F0:				; CODE XREF: PARSE_HEX_sub_FF6BA+54j
		cmp	[bp+arg_0], '0'
		jl	short loc_FF710
		mov	bx, [bp+arg_2]
		mov	al, [bp+arg_0]
		cbw
		add	ax, -30h

loc_FF700:				; CODE XREF: PARSE_HEX_sub_FF6BA+22j
					; PARSE_HEX_sub_FF6BA+34j
		mov	[bx], al
		jmp	short loc_FF714
; ───────────────────────────────────────────────────────────────────────────

loc_FF704:				; CODE XREF: PARSE_HEX_sub_FF6BA+10j
					; PARSE_HEX_sub_FF6BA+16j
		cmp	[bp+arg_0], 'F'
		jle	short loc_FF6DE

loc_FF70A:				; CODE XREF: PARSE_HEX_sub_FF6BA+28j
		cmp	[bp+arg_0], '9'
		jle	short loc_FF6F0

loc_FF710:				; CODE XREF: PARSE_HEX_sub_FF6BA+3Aj
		mov	[bp+var_6], 0

loc_FF714:				; CODE XREF: PARSE_HEX_sub_FF6BA+48j
		mov	al, [bp+var_6]
		cbw
		jmp	TAIL_loc_FFBE4
PARSE_HEX_sub_FF6BA endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

GETCHAR		proc near		; CODE XREF: GETCHAR_ECHO+5p
					; READ_MEM_ADDR_sub_FE9D8+2Bp ...

var_6		= word ptr -6

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 2
		lea	di, [bp+var_6]
		push	di
		mov	di, 1
		push	di
		sub	di, di
		push	di
		call	SIO_RX
		add	sp, 6
		mov	al, byte ptr [bp+var_6]
		cbw
		jmp	TAIL_loc_FFBE4
GETCHAR		endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

PUTCHAR		proc near		; CODE XREF: GETCHAR_ECHO+Fp
					; READ_MEM_ADDR_sub_FE9D8+3Cp ...

CHAR		= byte ptr  4

		push	bp
		mov	bp, sp
		push	di
		push	si
		push	word ptr [bp+CHAR]
		mov	di, 1
		push	di
		sub	di, di
		push	di
		call	PRINT_BUF
		add	sp, 6
		jmp	TAIL_loc_FFBE4
PUTCHAR		endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

M_DISPLAY_MEMORY proc near		; CODE XREF: AUTOBOOT_PROMPT:MON_D_ISPLAY_MEMORYp

var_8		= word ptr -8
var_6		= byte ptr -6

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 4
		mov	di, 1
		push	di
		call	sub_FF14A
		add	sp, 2
		call	sub_FF8DC
		test	ax, ax
		jnz	short loc_FF770
		jmp	loc_FF831
; ───────────────────────────────────────────────────────────────────────────

loc_FF770:				; CODE XREF: M_DISPLAY_MEMORY+17j
		cmp	CHAR_BUF_byte_EBC, 0Dh
		jnz	short loc_FF77E
		mov	[bp+var_8], 1
		jmp	short loc_FF78F
; ───────────────────────────────────────────────────────────────────────────

loc_FF77E:				; CODE XREF: M_DISPLAY_MEMORY+21j
		lea	di, [bp+var_8]
		push	di
		call	sub_FF8EE
		add	sp, 2
		test	ax, ax
		jnz	short loc_FF78F
		jmp	loc_FF831
; ───────────────────────────────────────────────────────────────────────────

loc_FF78F:				; CODE XREF: M_DISPLAY_MEMORY+28j
					; M_DISPLAY_MEMORY+36j
		call	PRINT_MEM_ADDR_sub_FF8A2
		mov	di, ADDR_OFFSET
		and	di, 0Fh
		mov	al, REG_DISP_OFFSETS[di]
		cbw
		push	ax
		call	sub_FF14A
		add	sp, 2

loc_FF7A6:				; CODE XREF: M_DISPLAY_MEMORY+AEj
		cmp	[bp+var_8], 0
		jz	short loc_FF807
		call	MEM_READ8
		mov	[bp+var_6], al
		mov	al, [bp+var_6]
		cbw
		push	ax
		call	PRINTHEX8
		add	sp, 2
		inc	ADDR_OFFSET
		dec	[bp+var_8]
		test	ADDR_OFFSET, 3
		jnz	short loc_FF7D6
		mov	di, 1
		push	di
		call	sub_FF14A
		add	sp, 2

loc_FF7D6:				; CODE XREF: M_DISPLAY_MEMORY+76j
		test	ADDR_OFFSET, 0Fh
		jnz	short loc_FF7EE
		dec	ADDR_OFFSET
		call	DISPMEM_sub_FF834
		cmp	[bp+var_8], 0
		jz	short loc_FF7EE
		call	PRINT_MEM_ADDR_sub_FF8A2

loc_FF7EE:				; CODE XREF: M_DISPLAY_MEMORY+88j
					; M_DISPLAY_MEMORY+95j
		mov	al, byte ptr ds:MONITOR_COMMANDS+2Eh
		cbw
		push	ax
		mov	di, 0FFFFh
		push	di
		sub	di, di
		push	di
		call	SIO_RX
		add	sp, 6
		test	ax, ax
		jz	short loc_FF7A6
		call	GETCHAR

loc_FF807:				; CODE XREF: M_DISPLAY_MEMORY+56j
		test	ADDR_OFFSET, 0Fh
		jz	short loc_FF831
		mov	di, '$'
		mov	si, ADDR_OFFSET
		and	si, 0Fh
		mov	al, REG_DISP_OFFSETS[si]
		cbw
		sub	di, ax
		push	di
		call	sub_FF14A
		add	sp, 2
		and	ADDR_OFFSET, 0FFF0h
		call	DISPMEM_sub_FF834

loc_FF831:				; CODE XREF: M_DISPLAY_MEMORY+19j
					; M_DISPLAY_MEMORY+38j	...
		jmp	TAIL_loc_FFBE4
M_DISPLAY_MEMORY endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

DISPMEM_sub_FF834 proc near		; CODE XREF: M_DISPLAY_MEMORY+8Ep
					; M_DISPLAY_MEMORY+DAp

var_C		= word ptr -0Ch
var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 8
		mov	byte ptr [bp+var_6], '*'
		mov	byte ptr [bp+var_8], '.'
		mov	di, 2
		push	di
		call	sub_FF14A
		add	sp, 2
		lea	di, [bp+var_6]
		push	di
		call	PUTCHAR
		add	sp, 2
		and	ADDR_OFFSET, 0FFF0h
		mov	[bp+var_C], 0

loc_FF863:				; CODE XREF: DISPMEM_sub_FF834+5Fj
		call	MEM_READ8
		and	ax, 7Fh
		mov	byte ptr [bp+var_A], al
		cmp	byte ptr [bp+var_A], ' '
		jl	short loc_FF878
		cmp	byte ptr [bp+var_A], '~'
		jle	short loc_FF87E

loc_FF878:				; CODE XREF: DISPMEM_sub_FF834+3Cj
		lea	di, [bp+var_8]
		push	di
		jmp	short loc_FF882
; ───────────────────────────────────────────────────────────────────────────

loc_FF87E:				; CODE XREF: DISPMEM_sub_FF834+42j
		lea	di, [bp+var_A]
		push	di

loc_FF882:				; CODE XREF: DISPMEM_sub_FF834+48j
		call	PUTCHAR
		add	sp, 2
		inc	ADDR_OFFSET
		inc	[bp+var_C]
		cmp	[bp+var_C], 0Fh
		jle	short loc_FF863
		lea	di, [bp+var_6]
		push	di
		call	PUTCHAR
		add	sp, 2
		jmp	TAIL_loc_FFBE4
DISPMEM_sub_FF834 endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

PRINT_MEM_ADDR_sub_FF8A2 proc near	; CODE XREF: M_ALTER_MEMORY+3Cp
					; M_DISPLAY_MEMORY:loc_FF78Fp ...

var_6		= word ptr -6

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 2
		mov	byte ptr [bp+var_6], ':'
		call	sub_FF134
		push	ADDR_SEGMENT
		call	PRINTHEX16
		add	sp, 2
		lea	di, [bp+var_6]
		push	di
		call	PUTCHAR
		add	sp, 2
		push	ADDR_OFFSET
		call	PRINTHEX16
		add	sp, 2
		mov	di, 2
		push	di
		call	sub_FF14A
		add	sp, 2
		jmp	TAIL_loc_FFBE4
PRINT_MEM_ADDR_sub_FF8A2 endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

sub_FF8DC	proc near		; CODE XREF: M_MEMCPY+12p M_MEMCPY+33p ...
		push	bp
		mov	bp, sp
		push	di
		push	si
		call	GETCHAR_ECHO
		mov	CHAR_BUF_byte_EBC, al
		call	PARSE_ADDR_sub_FE96E
		jmp	TAIL_loc_FFBE4
sub_FF8DC	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

sub_FF8EE	proc near		; CODE XREF: M_MEMCPY+53p
					; M_PORT_IO+35p ...

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		push	di
		push	si
		call	GETCHAR_ECHO
		mov	CHAR_BUF_byte_EBC, al
		push	[bp+arg_0]
		call	READ_MEM_ADDR_sub_FE9D8
		add	sp, 2
		jmp	TAIL_loc_FFBE4
sub_FF8EE	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

sub_FF906	proc near		; CODE XREF: M_BREAKPOINT+9Bp
					; M_LOAD_BOOT+16p

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		push	di
		push	si
		call	GETCHAR_ECHO
		mov	CHAR_BUF_byte_EBC, al
		push	[bp+arg_0]
		call	sub_FEA94
		add	sp, 2
		jmp	TAIL_loc_FFBE4
sub_FF906	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

M_HEX_DOWNLOAD	proc near		; CODE XREF: AUTOBOOT_PROMPT:MON_X_HEX_DOWNLOADp

var_16		= byte ptr -16h
var_14		= word ptr -14h
var_12		= byte ptr -12h
var_10		= byte ptr -10h
var_E		= word ptr -0Eh
var_C		= word ptr -0Ch
var_A		= word ptr -0Ah

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 12h
		mov	byte ptr [bp+var_A], ':'
		mov	byte ptr [bp+var_C], 'E'
		mov	byte ptr [bp+var_E], 'B'
		mov	[bp+var_10], 1
		mov	[bp+var_12], 0
		mov	[bp+var_16], 0
		mov	ADDR_SEGMENT, 0
		mov	ADDR_OFFSET, 0
		mov	al, HEX_byte_4F8
		cbw
		push	ax
		call	HEX_sub_FFA68
		add	sp, 2
		mov	di, offset STR_READY ; " Ready-	"
		push	di
		call	PUTS
		add	sp, 2
		mov	HEX_word_EB8, 0Bh
		mov	di, offset DISK_DATA_BUF
		push	di
		push	HEX_word_EB8
		mov	al, HEX_byte_4F8
		cbw
		push	ax
		call	SIO_RX
		add	sp, 6
		mov	HEX_word_EB4, 0
		mov	HEX_word_EB6, 0
		jmp	loc_FFA4E
; ───────────────────────────────────────────────────────────────────────────

loc_FF987:				; CODE XREF: M_HEX_DOWNLOAD+78j
		inc	HEX_word_EB6

loc_FF98B:				; CODE XREF: M_HEX_DOWNLOAD+136j
		call	HEX_sub_FFB20
		mov	di, ax
		mov	al, byte ptr [bp+var_A]
		cbw
		cmp	di, ax
		jnz	short loc_FF987
		lea	di, [bp+var_A]
		push	di
		call	PUTCHAR
		add	sp, 2
		mov	HEX_word_EBA, 0
		call	HEX_sub_FFAC6
		mov	[bp+var_12], al
		call	HEX_sub_FFB02
		mov	ADDR_OFFSET, ax
		call	HEX_sub_FFAC6
		mov	[bp+var_16], al
		cmp	[bp+var_16], 0
		jge	short loc_FF9C4
		mov	[bp+var_16], 0

loc_FF9C4:				; CODE XREF: M_HEX_DOWNLOAD+A0j
		mov	al, [bp+var_12]
		cbw
		mov	di, ax
		mov	al, [bp+var_12]
		cbw
		add	di, ax
		add	di, 0Bh
		add	HEX_word_EB6, di
		mov	al, [bp+var_16]
		cbw
		cmp	ax, 3
		ja	short loc_FFA25
		shl	ax, 1
		xchg	ax, bx
		jmp	cs:off_FFA31[bx]

loc_FF9E8:				; DATA XREF: M_HEX_DOWNLOAD:off_FFA31o
		mov	[bp+var_14], 1

loc_FF9ED:				; CODE XREF: M_HEX_DOWNLOAD+E9j
		mov	al, [bp+var_12]
		cbw
		cmp	ax, [bp+var_14]
		jl	short loc_FFA39
		call	HEX_sub_FFAC6
		push	ax
		call	MEM_WRITE8
		add	sp, 2
		inc	ADDR_OFFSET
		inc	[bp+var_14]
		jmp	short loc_FF9ED
; ───────────────────────────────────────────────────────────────────────────

loc_FFA09:				; CODE XREF: M_HEX_DOWNLOAD+C5j
					; DATA XREF: M_HEX_DOWNLOAD+115o
		mov	[bp+var_10], 0
		jmp	short loc_FFA39
; ───────────────────────────────────────────────────────────────────────────

loc_FFA0F:				; CODE XREF: M_HEX_DOWNLOAD+C5j
					; DATA XREF: M_HEX_DOWNLOAD+117o
		call	HEX_sub_FFB02
		mov	ADDR_SEGMENT, ax
		jmp	short loc_FFA39
; ───────────────────────────────────────────────────────────────────────────

loc_FFA17:				; CODE XREF: M_HEX_DOWNLOAD+C5j
					; DATA XREF: M_HEX_DOWNLOAD+119o
		call	HEX_sub_FFB02
		mov	SAVED_CPU_REGS.SAVE_CS,	ax
		call	HEX_sub_FFB02
		mov	SAVED_CPU_REGS.SAVE_IP,	ax
		jmp	short loc_FFA39
; ───────────────────────────────────────────────────────────────────────────

loc_FFA25:				; CODE XREF: M_HEX_DOWNLOAD+C0j
		lea	di, [bp+var_E]
		push	di
		call	PUTCHAR
		add	sp, 2
		jmp	short loc_FFA39
; ───────────────────────────────────────────────────────────────────────────
off_FFA31	dw offset loc_FF9E8	; DATA XREF: M_HEX_DOWNLOAD+C5r
		dw offset loc_FFA09
		dw offset loc_FFA0F
		dw offset loc_FFA17
; ───────────────────────────────────────────────────────────────────────────

loc_FFA39:				; CODE XREF: M_HEX_DOWNLOAD+D6j
					; M_HEX_DOWNLOAD+EFj ...
		call	HEX_sub_FFAC6
		test	HEX_word_EBA, 0FFh
		jz	short loc_FFA4E
		lea	di, [bp+var_C]
		push	di
		call	PUTCHAR
		add	sp, 2

loc_FFA4E:				; CODE XREF: M_HEX_DOWNLOAD+66j
					; M_HEX_DOWNLOAD+124j
		cmp	[bp+var_10], 0
		jz	short loc_FFA57
		jmp	loc_FF98B
; ───────────────────────────────────────────────────────────────────────────

loc_FFA57:				; CODE XREF: M_HEX_DOWNLOAD+134j
		mov	di, offset STR_DONE ; "	-Done"
		push	di
		call	PUTS
		add	sp, 2
		call	PRINT_REGS
		jmp	TAIL_loc_FFBE4
M_HEX_DOWNLOAD	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

HEX_sub_FFA68	proc near		; CODE XREF: M_HEX_DOWNLOAD+31p

arg_0		= byte ptr  4

		push	bp
		mov	bp, sp
		push	di
		push	si
		jmp	short loc_FFA7A
; ───────────────────────────────────────────────────────────────────────────

loc_FFA6F:				; CODE XREF: HEX_sub_FFA68+28j
		mov	al, [bp+arg_0]
		cbw
		push	ax
		call	SIO_GETC
		add	sp, 2

loc_FFA7A:				; CODE XREF: HEX_sub_FFA68+5j
		mov	al, CHAR_BUF_byte_EBC
		cbw
		push	ax
		mov	di, 0FFFFh
		push	di
		mov	al, [bp+arg_0]
		cbw
		push	ax
		call	SIO_RX
		add	sp, 6
		test	ax, ax
		jnz	short loc_FFA6F
		jmp	TAIL_loc_FFBE4
HEX_sub_FFA68	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

IN8		proc near		; CODE XREF: M_PORT_IO+77p

IO_PORT		= byte ptr  4

		push	bp
		mov	bp, sp
		mov	dx, word ptr [bp+IO_PORT]
		in	al, dx
		pop	bp
		retn
IN8		endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

IN16		proc near		; CODE XREF: M_PORT_IO+58p

IO_PORT		= byte ptr  4

		push	bp
		mov	bp, sp
		mov	dx, word ptr [bp+IO_PORT]
		in	ax, dx
		pop	bp
		retn
IN16		endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

OUT8		proc near		; CODE XREF: M_PORT_IO+ABp

IO_PORT		= word ptr  4
IO_VAL		= byte ptr  6

		push	bp
		mov	bp, sp
		mov	dx, [bp+IO_PORT]
		mov	al, [bp+IO_VAL]
		out	dx, al
		pop	bp
		retn
OUT8		endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

OUT16		proc near		; CODE XREF: M_PORT_IO+9Dp

IO_PORT		= word ptr  4
IO_VAL		= byte ptr  6

		push	bp
		mov	bp, sp
		mov	dx, [bp+IO_PORT]
		mov	ax, word ptr [bp+IO_VAL]
		out	dx, ax
		pop	bp
		retn
OUT16		endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


NEW_COMMAND	proc near		; CODE XREF: SIO_RX+47p SIO_RX+7Ap ...
		inc	NEW_CMD_REG
		retn
NEW_COMMAND	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

HEX_sub_FFAC6	proc near		; CODE XREF: M_HEX_DOWNLOAD+8Ap
					; M_HEX_DOWNLOAD+96p ...

var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= word ptr -6

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 6
		call	HEX_sub_FFB20
		mov	[bp+var_8], ax
		call	HEX_sub_FFB20
		mov	[bp+var_A], ax
		lea	di, [bp+var_6]
		push	di
		push	ax
		push	[bp+var_8]
		call	HEX_sub_FFB84
		add	sp, 6
		test	ax, ax
		jz	short loc_FFAF9
		mov	di, [bp+var_6]
		and	di, 0FFh
		add	HEX_word_EBA, di
		jmp	short loc_FFAFC
; ───────────────────────────────────────────────────────────────────────────

loc_FFAF9:				; CODE XREF: HEX_sub_FFAC6+24j
		call	ERR_BEEP

loc_FFAFC:				; CODE XREF: HEX_sub_FFAC6+31j
		mov	ax, [bp+var_6]
		jmp	TAIL_loc_FFBE4
HEX_sub_FFAC6	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

HEX_sub_FFB02	proc near		; CODE XREF: M_HEX_DOWNLOAD+90p
					; M_HEX_DOWNLOAD:loc_FFA0Fp ...

var_6		= word ptr -6

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 2
		call	HEX_sub_FFAC6
		mov	cx, 8
		shl	ax, cl
		push	ax
		call	HEX_sub_FFAC6
		pop	bx
		add	ax, bx
		mov	[bp+var_6], ax
		jmp	TAIL_loc_FFBE4
HEX_sub_FFB02	endp

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

HEX_sub_FFB20	proc near		; CODE XREF: M_HEX_DOWNLOAD:loc_FF98Bp
					; HEX_sub_FFAC6+8p ...

var_6		= word ptr -6

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 6
		mov	di, HEX_word_EB8
		cmp	HEX_word_EB4, di
		jb	short loc_FFB6F
		cmp	HEX_word_EB6, 300
		jbe	short loc_FFB48
		mov	HEX_word_EB8, 300
		sub	HEX_word_EB6, 300
		jmp	short loc_FFB56
; ───────────────────────────────────────────────────────────────────────────

loc_FFB48:				; CODE XREF: HEX_sub_FFB20+18j
		mov	di, HEX_word_EB6
		mov	HEX_word_EB8, di
		mov	HEX_word_EB6, 0

loc_FFB56:				; CODE XREF: HEX_sub_FFB20+26j
		mov	di, offset DISK_DATA_BUF
		push	di
		push	HEX_word_EB8
		mov	al, HEX_byte_4F8
		cbw
		push	ax
		call	SIO_RX
		add	sp, 6
		mov	HEX_word_EB4, 0

loc_FFB6F:				; CODE XREF: HEX_sub_FFB20+10j
		mov	bx, HEX_word_EB4
		mov	al, DISK_DATA_BUF[bx]
		and	ax, 7Fh
		mov	[bp+var_6], ax
		inc	HEX_word_EB4
		jmp	TAIL_loc_FFBE4
HEX_sub_FFB20	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

HEX_sub_FFB84	proc near		; CODE XREF: HEX_sub_FFAC6+1Cp

var_A		= word ptr -0Ah
var_8		= word ptr -8
var_6		= byte ptr -6
arg_0		= byte ptr  4
arg_2		= byte ptr  6
arg_4		= word ptr  8

		push	bp
		mov	bp, sp
		push	di
		push	si
		sub	sp, 6
		mov	[bp+var_6], 1
		lea	di, [bp+var_8]
		push	di
		mov	al, [bp+arg_0]
		cbw
		push	ax
		call	PARSE_HEX_sub_FF6BA
		add	sp, 4
		mov	[bp+var_6], al
		cmp	[bp+var_6], 0
		jz	short loc_FFBBB
		lea	di, [bp+var_A]
		push	di
		mov	al, [bp+arg_2]
		cbw
		push	ax
		call	PARSE_HEX_sub_FF6BA
		add	sp, 4
		test	ax, ax
		jnz	short loc_FFBBF

loc_FFBBB:				; CODE XREF: HEX_sub_FFB84+22j
		sub	di, di
		jmp	short loc_FFBC2
; ───────────────────────────────────────────────────────────────────────────

loc_FFBBF:				; CODE XREF: HEX_sub_FFB84+35j
		mov	di, 1

loc_FFBC2:				; CODE XREF: HEX_sub_FFB84+39j
		mov	dx, di
		mov	[bp+var_6], dl
		mov	bx, [bp+arg_4]
		mov	al, byte ptr [bp+var_8]
		cbw
		mov	cx, 4
		shl	ax, cl
		mov	dx, ax
		mov	al, byte ptr [bp+var_A]
		cbw
		add	dx, ax
		mov	[bx], dl
		mov	al, [bp+var_6]
		cbw
		jmp	$+3		; FALLTHROUGH
HEX_sub_FFB84	endp


; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████


TAIL_loc_FFBE4	proc near		; CODE XREF: SIO_GETC+22j
					; DO_SYSCALL_3_PUTC+17j ...
		lea	sp, [bp-4]
		pop	si
		pop	di
		pop	bp
		retn
TAIL_loc_FFBE4	endp ; sp =  6

; ───────────────────────────────────────────────────────────────────────────
		db    0

; ███████████████ S U B	R O U T	I N E ███████████████████████████████████████

; Attributes: bp-based frame

ORPHAN_sub_FFBEC proc near
		push	bp
		mov	bp, sp
		push	di
		push	si
		jmp	TAIL_loc_FFBE4
ORPHAN_sub_FFBEC endp

; ───────────────────────────────────────────────────────────────────────────
		dw 0FEEBh
		dw 0FEEBh
		dw 0FEEBh
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
ROM_DATA	db 1,0,0,0,'@',0,0,0,0,0,0,0,'┤■',0,0,0,0,0,0,0,0,'<',9,0,0Ah
					; DATA XREF: FINISH_POST+9o
		db 0,0,0,0,0,0,0,0,'┤■',0,0,0,0,0,0,0,0,'F',9,0,'F',5,0,0,0,0,0,0,0,'┤¸',0,0,0,0,0,0,0,0,'î',0Eh,0,0Ah
		db 0,0,0,0,0,0,0,0,'┤·',0,0,0,0,0,0,0,0,'û',0Eh,0,0Ah
		db 0,0,0,0,0,0,0,0,'û¸',0,0,0,0,0,0,0,0,'á',0Eh,0,0Ah
		db 0,0,0,0,0,0,0,0,'┤■',0,0,0,0,0,0,0,0,'¬',0Eh,0,0Ah
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,2,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,6,0,0,0,0,0,0,0,0,0,0,0,0
		db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11h,11h,11h,11h,'""""""',0Ch,0,0FFh,1Fh,1,'                             ',0Ah
		db 'Monitor Version V1.3',0,0Ah
		db 'PASSED POWER-UP TEST',0,0Ah
		db 'FAILED POWER-UP TEST ',0,0,'0123456789ABCDEF',0,0,0Ah
		db 'Boot Failed, Status=',0,'*',7,' ',0,0Ah
		db 'Break ....',0,'AXBXCXDXSIDIDSESSSSPBPFL',0Ah
		db 'Press any key to interrupt boot',0Ah
		db 0,0Ah
		db 'Booting from Hard Disk',0,0Ah
		db 'Enter [1] to boot from Hard Disk',0Ah
		db 'Enter [2] to boot from Floppy Disk',0Ah
		db 'Enter [3] to enter Monitor',0Ah
		db 0Ah
		db 'Enter option: ',0,0Ah
		db '< A, B, D, G, I, K, L, M, O, R, S, X > ',0,0,' ',0,'-',0,':',0,'-',0,' '
		db '   ODITSZ A P C',0,0,0Ah
		db 'CS:IP ',0,'  Flags  ',0,0,2,4,6,9,0Bh,0Dh,0Fh,12h,14h,16h,18h,1Bh,1Dh,1Fh,'! Ready- ',0,' -Done',0
IOPB_BLOCK	db 51h,	30h, 0D0h, 0FFh	;	  movi	  gc,0ffd0h
		db 0AAh, 0BBh, 4, 20h	;	  jnbt	  [pp].4h,5,x1ee2
		db 0Ah,	4Eh, 6,	80h	;	  movbi	  [gc].6h,80h
		db 2, 93h, 8, 2, 0CEh, 2 ;	   movb	   [gc].2h,[pp].8h
		db 0EAh, 0BAh, 6, 0FCh	; x1ecc:  jnbt	  [gc].6h,7,x1ecc
		db 0Ah,	4Eh, 6,	20h	;	  movbi	  [gc].6h,20h
		db 13h,	4Fh, 14h, 2 dup(0) ;	     movi    [pp].14h,0h
		db 0Ah,	0BEh, 6, 0FCh	; x1ed9:  jbt	  [gc].6h,0,x1ed9
		db 12h,	0BAh, 4, 0E2h, 0 ;	   ljnbt   [gc].4h,0,x1fc4
		db 0Ah,	0CBh, 4, 0Fh	; x1ee2:  andbi	  [pp].4h,0fh
		db 12h,	0E7h, 4, 0B1h, 0 ;	   ljzb	   [pp].4h,x1f9c
		db 2, 93h, 8, 2, 0CEh, 2 ;	   movb	   [gc].2h,[pp].8h
		db 0EAh, 0BAh, 6, 0FCh	; x1ef1:  jnbt	  [gc].6h,7,x1ef1
		db 2, 93h, 14h,	0, 0CEh	;	  movb	  [gc],[pp].14h
		db 2, 93h, 15h,	0, 0CEh	;	  movb	  [gc],[pp].15h
		db 2, 93h, 6, 2, 0CEh, 4 ;	   movb	   [gc].4h,[pp].6h
		db 2, 93h, 7, 2, 0CEh, 4 ;	   movb	   [gc].4h,[pp].7h
		db 0Ah,	4Eh, 6,	10h	;	  movbi	  [gc].6h,10h
		db 3, 93h, 6, 3, 0CFh, 14h ;	     mov     [pp].14h,[pp].6h
		db 0Ah,	0BEh, 6, 0FCh	; x1f15:  jbt	  [gc].6h,0,x1f15
		db 2Ah,	0BAh, 4, 0FCh	; x1f19:  jnbt	  [gc].4h,1,x1f19
		db 0Ah,	0E7h, 10h, 7Bh	;	  jzb	  [pp].10h,x1f9c
		db 0Ah,	0BFh, 4, 0Eh	;	  jbt	  [pp].4h,0,x1f33
		db 3, 8Bh, 0Ch		;	  lpd	  ga,[pp].0ch
		db 31h,	30h, 2 dup(0)	;	  movi	  gb,0h
		db 63h,	83h, 0Ah	;	  mov	  bc,[pp].0ah
		db 8Bh,	9Fh, 16h, 70h	;	  call	  [pp].16h,x1fa3
		db 31h,	30h, 2 dup(0)	; x1f33:  movi	  gb,0h
		db 0F1h, 30h, 80h, 0FEh	;	  movi	  mc,0fe80h
		db 11h,	30h, 0D0h, 0FFh	;	  movi	  ga,0ffd0h
		db 13h,	4Fh, 12h, 0, 2	;	  movi	  [pp].12h,200h
		db 0Ah,	0BBh, 4, 12h	;	  jnbt	  [pp].4h,0,x1f5a
		db 0D1h, 30h, 28h, 8Ah	;	  movi	  cc,8a28h
		db 0A0h, 0		;	  wid	  8,16
		db 6Ah,	0BBh, 4, 17h	;	  jnbt	  [pp].4h,3,x1f69
		db 13h,	4Fh, 12h, 5, 2	;	  movi	  [pp].12h,205h
		db 88h,	20h, 0Fh	;	  jmp	  x1f69
		db 0D1h, 30h, 28h, 56h	; x1f5a:  movi	  cc,5628h
		db 0C0h, 0		;	  wid	  16,8
		db 4Ah,	0BBh, 4, 5	;	  jnbt	  [pp].4h,2,x1f69
		db 13h,	4Fh, 12h, 4, 0	;	  movi	  [pp].12h,4h
		db 63h,	83h, 12h	; x1f69:  mov	  bc,[pp].12h
		db 2, 93h, 9, 0, 0CEh	;	  movb	  [gc],[pp].9h
		db 60h,	0		;	  xfer
		db 2, 93h, 4, 2, 0CEh, 6 ;	   movb	   [gc].6h,[pp].4h
		db 0Ah,	0B6h, 6, 33h	;	  jmcne	  [gc].6h,x1fb0
		db 2, 0EFh, 10h		;	  decb	  [pp].10h
		db 0Ah,	0E7h, 10h, 6	;	  jzb	  [pp].10h,x1f8a
		db 2, 0EBh, 9		;	  incb	  [pp].9h
		db 88h,	20h, 0DFh	;	  jmp	  x1f69
		db 0Ah,	0BBh, 4, 0Eh	; x1f8a:  jnbt	  [pp].4h,0,x1f9c
		db 23h,	8Bh, 0Ch	;	  lpd	  gb,[pp].0ch
		db 11h,	30h, 2 dup(0)	;	  movi	  ga,0h
		db 63h,	83h, 0Ah	;	  mov	  bc,[pp].0ah
		db 8Bh,	9Fh, 16h, 7	;	  call	  [pp].16h,x1fa3
		db 0Ah,	4Fh, 5,	0	; x1f9c:  movbi	  [pp].5h,0h
		db 88h,	20h, 26h	;	  jmp	  x1fc9
		db 0E0h, 0		; x1fa3:  wid	  16,16
		db 0D1h, 30h, 8, 0C2h	;	  movi	  cc,0c208h
		db 60h,	0		;	  xfer
		db 2 dup(0)		;	  nop
		db 83h,	8Fh, 16h	;	  movp	  tp,[pp].16h
		db 2, 92h, 6, 2, 0CFh, 5 ; x1fb0:  movb	   [pp].5h,[gc].6h
		db 0Ah,	0CBh, 5, 7Eh	;	  andbi	  [pp].5h,7eh
		db 0E2h, 0F7h, 5	;	  setb	  [pp].5h,7
		db 0Ah,	4Eh, 6,	0	;	  movbi	  [gc].6h,0h
		db 88h,	20h, 5		;	  jmp	  x1fc9
		db 13h,	4Fh, 5,	81h, 0	; x1fc4:  movi	  [pp].5h,81h
		db 40h,	0		; x1fc9:  sintr
		db 20h,	48h		;	  hlt
		db 11h dup(   0)	; 0
		dw 1EC8h
		dw 0FE00h
		db 0Eh dup(   0)	; 0
FE00		ends

; ───────────────────────────────────────────────────────────────────────────
; ═══════════════════════════════════════════════════════════════════════════

; Segment type:	Regular
HIGH		segment	byte public '' use16
		assume cs:HIGH
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

loc_FFFF0:
		jmp	far ptr	DO_RESET_ENTRY
; ───────────────────────────────────────────────────────────────────────────
unk_FFFF5	db    0
IOP8089_FLAGS	IOP8089_SCP <1,	0FFh, offset SCB, 0>
unk_FFFFC	db    0
unk_FFFFD	db    0
word_FFFFE	dw 1BFFh		; Checksum???
HIGH		ends


		end
