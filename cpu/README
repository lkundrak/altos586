------------------------------------
Altos 586 main CPU firmware analysis
------------------------------------

This document describes the background of the two different sets of
firmware ROMS and some information on how to make some sense of them.


ROM images -- Monitor Version V1.3
==================================

These firmware images from two 4 KiB files obtained from
<http://www.bitsavers.org/pdf/altos/586_986/firmware/Altos586_firmware.zip>

This firmware apperars to interface to Floppy Disk via a controller on the
CPU board and to a Hard Disk via a Intel 8089-based Controller Board. This
is what one would expect on a stock Altos 586 system.

The two 8-bit ROMs interface to a 16-bit bus and therefore need to be
merged together. The address pins seems to be reversed. The un-reversal and
merging is done with merge.pl:

  perl merge.pl altos586-v13-g1.rom altos586-v13-g2.rom >altos586-v13.bin

The resulting image includes the string "Monitor Version V1.3".

  Filename               SHA1 Checksum
  altos586-v13-g1.rom    34700603d6034f0ccc599d74432cef332459987b
  altos586-v13-g2.rom    ce25a45cd4fb0ff63e5064fb74347b978c3a78f1
  altos586-v13.bin       73c10e52c08d8376bccf296473e4d705a66ee399


ROM images -- Monitor Version a2.2
==================================

These ROM images were read from a CPU board marked "586 CPU BD (C) 1982".
I bought the board alone and have no idea what computer it came from.

This firmware does not use the CPU board's controller to access the Floppy
Disk, nor does it access the Hard Drive via a Intel 8089-based Controller
Board. It issues different commands, presumably targetted at a different
controller board.  There are vestiges of either -- on startup the floppy
disk parameters are set to a controller on a CPU board and submits and
task to the 8089 albeit with an empty parameter block. Perhaps the board
comes from a computer with a different controller board that doesn't use
an Intel 8089 and interfaces both a Hard Drive and a Floppy Drive.

The firmware ROM chips on my board are two 8 KiB 2764s marked with "16349"
and "16350" labels. They were read with the following command:

  minipro -y -p '2764@DIP28' -r altos586-a22-16349.rom
  minipro -y -p '2764@DIP28' -r altos586-a22-16350.rom

The two 8-bit ROMs interface to a 16-bit bus and therefore need to be
merged together. The address pins seems to be reversed. The un-reversal and
merging is done with merge.pl:

  perl merge.pl altos586-a22-16349.rom altos586-a22-16350.rom >altos586-a22.bin

The resulting image includes the string "Monitor Version a2.2".

  Filename               SHA1 Checksum
  altos586-a22-16349.rom 1d4ce9aceb7537053ff9dd1f185fab83433d6af7
  altos586-a22-16350.rom 6a18f4bf486dc06d4e140d22dddb5bc8be619971
  altos586-a22.bin       e72a79b7464b0e42a33cb4f2555a0e42e6263698

This firmware seems somewhat similar to that of Altos 586T that uses a hard
drive and a floppy drive (and also a tape drive) on a separate board:
<http://www.bitsavers.org/pdf/altos/586_986/firmware/Altos586T_firmware.zip>


Reconstructed Monitor Source
============================

I've disassembled the v1.3 firmware and tidied it up to the point
that modifications are possible and hopefully simple. The initial
disassembly was done with IDA Freeware (see the description of the
process below) and the resulting assembler source was manually
converted to the NASM format.

The Intel 8089 I/O program block was disassembled with i89:
<https://github.com/brouhaha/i89/>

The single source file, "altos586.asm", can be built with YASM:
<https://yasm.tortall.net/>

This is the process:

  yasm -o altos586.bin altos586.asm
  perl cksum.pl altos586.bin >altos586.rom
  perl split.pl altos586-hi.rom altos586-lo.rom altos586.rom

Note that the resulting binary is different from the original image due to
the YASM assembler being more efficient at picking better instruction
encoding, such as converting jumps to short ones when possible or
elimination of zero offsets.


Disassembly
===========

I'm doing my disassembly with IDA Pro Freeware 5.0. The later freeware
versions lack the 32-bit x86 support. It is a 32-bit Windows GUI program
that works fine on Linux via wine.

  Filename      SHA1 Checksum
  idafree50.exe d3f90dbde6677ff8ebfee0f0279d93400046816f

Here's a mirror:

  https://downloads.scummvm.org/frs/extras/IDA/idafree50.exe

The disassembly session can be started like this:

   wine idag.exe altos586-v13.idb
   wine idag.exe altos586-a22.idb

Note that my reverse engineering is not complete and some comments & names
reflect my uninformed guesses as opposed to facts. Do not trust it too much.

There's also a script that generates the *.idc, *.asm and *.lst files:

  sh mkdumps.sh


Emulation
=========

There's a libx86emu based emulator that loads in the ROM dump and runs it
while emulating the IOP. It's incomplete, ugly and doesn't smell well.
It's good enough to launch the ROM monitor and conduct some tests, but
doesn't boot any actual operating system. Perhaps some day it might make
sense to extend MAME with 586 emulation instead.

Here's how it's run:

  cc -O2 -Werror -Wall -lx86emu -o altos altos.c
  ./altos altos586-a22.bin 2>emu.log
  DEBUG=1 ./altos altos586-v13.bin 2>emu.log

The tracing will be spewn to stderr. The latter form enables the
instruction trace.
